Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_d1a94e16-5e17-4ebb-ae60-b83a381349fd audiofile /Users/test/go/src/Phonemes/audio_clips/frolic1_paul.wav word frolic dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  1.694687



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.4600000000000001 1.2200000000000002 1.6800000000000002

 start3, duration3, end3 =  0.64 0.52 1.1600000000000001

 Initial start, duration, end =  0.3600000000000001 1.32 1.6800000000000002

 Cut at: start, duration =  0.3600000000000001 1.314687     guard_end =  1.674687 

Running scan for frate = 125
Considering guard y with value 1 for f ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 2 for r ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.5999999999999996 for oh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard sh with value 2 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ih ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z

frate, target rule = 125 public <frolic> = (((sil [((s <any_Cx_f_s_p>) | (<any_Cx_f_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]) | (sil p (sil [((s <any_Cx_f_s_p>) | (<any_Cx_f_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]))) (([(<any_Cx_y_p_s_f_r> y)] | [(y <any_Cx_y_p_s_f_r>)]) (f | s | p | ((<any_Cx_y_p_s_f_r> y) | (y <any_Cx_y_p_s_f_r>)))) (([(<any_Cx_y_y_r_oh_f> y)] | [(y <any_Cx_y_y_r_oh_f>)]) (r | ((<any_Cx_y_y_r_oh> y) | (y <any_Cx_y_y_r_oh>)))) (([(<any_Cx_y_y_oh_l_r> y)] | [(y <any_Cx_y_y_oh_l_r>)]) (oh | ((<any_Cx_y_y_oh_l_r> y) | (y <any_Cx_y_y_oh_l_r>)))) (([(<any_Cx_sh_y_l_oh> sh)] | [(sh <any_Cx_sh_y_l_oh>)]) (l | ((<any_Cx_sh_y_l_oh> sh) | (sh <any_Cx_sh_y_l_oh>)))) ((([(<any_Vx_sh_sh_ih_noSlide> sh)] | [(sh <any_Vx_sh_sh_ih_noSlide>)]) ([(<any_Cx_sh_sh_k_l> sh)] | [(sh <any_Cx_sh_sh_k_l>)])) (ih | ((<any_Vx_sh_sh_ih_noSlide> sh) | (sh <any_Vx_sh_sh_ih_noSlide>)))) (([(<any_Cx_z_sh_k> z)] | [(z <any_Cx_z_sh_k>)]) (k | ((<any_Cx_z_sh_k> z) | (z <any_Cx_z_sh_k>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_z_k_thr> thr)] | [(thr <any_Cx_z_k_thr>)]) sil))
Running scan for frate = 105
Considering guard y with value 1 for f ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 2 for r ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.5999999999999996 for oh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard sh with value 2 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ih ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z

frate, target rule = 105 public <frolic> = (((sil [((dh <any_Cx_f_dh_p>) | (<any_Cx_f_dh_p> dh))] [((dh <any_vowel_noSlide>) | (<any_vowel_noSlide> dh))]) | (sil p (sil [((dh <any_Cx_f_dh_p>) | (<any_Cx_f_dh_p> dh))] [((dh <any_vowel_noSlide>) | (<any_vowel_noSlide> dh))]))) (([(<any_Cx_y_p_dh_f_r> y)] | [(y <any_Cx_y_p_dh_f_r>)]) (f | s | p | ((<any_Cx_y_p_dh_f_r> y) | (y <any_Cx_y_p_dh_f_r>)))) (([(<any_Cx_y_y_r_oh_f> y)] | [(y <any_Cx_y_y_r_oh_f>)]) (r | ((<any_Cx_y_y_r_oh> y) | (y <any_Cx_y_y_r_oh>)))) (([(<any_Cx_y_y_oh_l_r> y)] | [(y <any_Cx_y_y_oh_l_r>)]) (oh | ((<any_Cx_y_y_oh_l_r> y) | (y <any_Cx_y_y_oh_l_r>)))) (([(<any_Cx_sh_y_l_oh> sh)] | [(sh <any_Cx_sh_y_l_oh>)]) (l | ((<any_Cx_sh_y_l_oh> sh) | (sh <any_Cx_sh_y_l_oh>)))) ((([(<any_Vx_sh_sh_ih_noSlide> sh)] | [(sh <any_Vx_sh_sh_ih_noSlide>)]) ([(<any_Cx_sh_sh_k_l> sh)] | [(sh <any_Cx_sh_sh_k_l>)])) (ih | ((<any_Vx_sh_sh_ih_noSlide> sh) | (sh <any_Vx_sh_sh_ih_noSlide>)))) (([(<any_Cx_z_sh_k> z)] | [(z <any_Cx_z_sh_k>)]) (k | ((<any_Cx_z_sh_k> z) | (z <any_Cx_z_sh_k>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_z_k_g> g)] | [(g <any_Cx_z_k_g>)]) sil))
Running scan for frate = 91
Considering guard y with value 1 for f ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 2 for r ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.5999999999999996 for oh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard sh with value 2 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ih ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z

frate, target rule = 91 public <frolic> = (((sil [((v <any_Cx_f_v_p>) | (<any_Cx_f_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]) | (sil p (sil [((v <any_Cx_f_v_p>) | (<any_Cx_f_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]))) (([(<any_Cx_y_p_v_f_r> y)] | [(y <any_Cx_y_p_v_f_r>)]) (f | s | p | ((<any_Cx_y_p_v_f_r> y) | (y <any_Cx_y_p_v_f_r>)))) (([(<any_Cx_y_y_r_oh_f> y)] | [(y <any_Cx_y_y_r_oh_f>)]) (r | ((<any_Cx_y_y_r_oh> y) | (y <any_Cx_y_y_r_oh>)))) (([(<any_Cx_y_y_oh_l_r> y)] | [(y <any_Cx_y_y_oh_l_r>)]) (oh | ((<any_Cx_y_y_oh_l_r> y) | (y <any_Cx_y_y_oh_l_r>)))) (([(<any_Cx_sh_y_l_oh> sh)] | [(sh <any_Cx_sh_y_l_oh>)]) (l | ((<any_Cx_sh_y_l_oh> sh) | (sh <any_Cx_sh_y_l_oh>)))) ((([(<any_Vx_sh_sh_ih_noSlide> sh)] | [(sh <any_Vx_sh_sh_ih_noSlide>)]) ([(<any_Cx_sh_sh_k_l> sh)] | [(sh <any_Cx_sh_sh_k_l>)])) (ih | ((<any_Vx_sh_sh_ih_noSlide> sh) | (sh <any_Vx_sh_sh_ih_noSlide>)))) (([(<any_Cx_z_sh_k> z)] | [(z <any_Cx_z_sh_k>)]) (k | ((<any_Cx_z_sh_k> z) | (z <any_Cx_z_sh_k>)))) (([(<any_vowel_noSlide> t)] | [(t <any_vowel_noSlide>)]) ([(<any_Cx_z_k_t> t)] | [(t <any_Cx_z_k_t>)]) sil))
Running scan for frate = 80
Considering guard y with value 1 for f ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 2 for r ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.5999999999999996 for oh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard sh with value 2 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ih ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z

frate, target rule = 80 public <frolic> = (((sil [((v <any_Cx_f_v_p>) | (<any_Cx_f_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]) | (sil p (sil [((v <any_Cx_f_v_p>) | (<any_Cx_f_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]))) (([(<any_Cx_y_p_v_f_r> y)] | [(y <any_Cx_y_p_v_f_r>)]) (f | s | p | ((<any_Cx_y_p_v_f_r> y) | (y <any_Cx_y_p_v_f_r>)))) (([(<any_Cx_y_y_r_oh_f> y)] | [(y <any_Cx_y_y_r_oh_f>)]) (r | ((<any_Cx_y_y_r_oh> y) | (y <any_Cx_y_y_r_oh>)))) (([(<any_Cx_y_y_oh_l_r> y)] | [(y <any_Cx_y_y_oh_l_r>)]) (oh | ((<any_Cx_y_y_oh_l_r> y) | (y <any_Cx_y_y_oh_l_r>)))) (([(<any_Cx_sh_y_l_oh> sh)] | [(sh <any_Cx_sh_y_l_oh>)]) (l | ((<any_Cx_sh_y_l_oh> sh) | (sh <any_Cx_sh_y_l_oh>)))) ((([(<any_Vx_sh_sh_ih_noSlide> sh)] | [(sh <any_Vx_sh_sh_ih_noSlide>)]) ([(<any_Cx_sh_sh_k_l> sh)] | [(sh <any_Cx_sh_sh_k_l>)])) (ih | ((<any_Vx_sh_sh_ih_noSlide> sh) | (sh <any_Vx_sh_sh_ih_noSlide>)))) (([(<any_Cx_z_sh_k> z)] | [(z <any_Cx_z_sh_k>)]) (k | ((<any_Cx_z_sh_k> z) | (z <any_Cx_z_sh_k>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_z_k_p> p)] | [(p <any_Cx_z_k_p>)]) sil))
Running scan for frate = 72
Considering guard y with value 1 for f ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 2 for r ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.5999999999999996 for oh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard sh with value 2 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ih ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z

frate, target rule = 72 public <frolic> = (((sil [((v <any_Cx_f_v_p>) | (<any_Cx_f_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]) | (sil p (sil [((v <any_Cx_f_v_p>) | (<any_Cx_f_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]))) (([(<any_Cx_y_p_v_f_r> y)] | [(y <any_Cx_y_p_v_f_r>)]) (f | s | p | ((<any_Cx_y_p_v_f_r> y) | (y <any_Cx_y_p_v_f_r>)))) (([(<any_Cx_y_y_r_oh_f> y)] | [(y <any_Cx_y_y_r_oh_f>)]) (r | ((<any_Cx_y_y_r_oh> y) | (y <any_Cx_y_y_r_oh>)))) (([(<any_Cx_y_y_oh_l_r> y)] | [(y <any_Cx_y_y_oh_l_r>)]) (oh | ((<any_Cx_y_y_oh_l_r> y) | (y <any_Cx_y_y_oh_l_r>)))) (([(<any_Cx_sh_y_l_oh> sh)] | [(sh <any_Cx_sh_y_l_oh>)]) (l | ((<any_Cx_sh_y_l_oh> sh) | (sh <any_Cx_sh_y_l_oh>)))) ((([(<any_Vx_sh_sh_ih_noSlide> sh)] | [(sh <any_Vx_sh_sh_ih_noSlide>)]) ([(<any_Cx_sh_sh_k_l> sh)] | [(sh <any_Cx_sh_sh_k_l>)])) (ih | ((<any_Vx_sh_sh_ih_noSlide> sh) | (sh <any_Vx_sh_sh_ih_noSlide>)))) (([(<any_Cx_z_sh_k> z)] | [(z <any_Cx_z_sh_k>)]) (k | ((<any_Cx_z_sh_k> z) | (z <any_Cx_z_sh_k>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_z_k_g> g)] | [(g <any_Cx_z_k_g>)]) sil))

results =
{72 [{sil 0 9} {f 10 26} {r 27 33} {oh 34 38} {l 39 44} {ih 45 54} {k 55 71} {sil 72 88}]}
{80 [{sil 0 10} {f 11 29} {r 30 37} {oh 38 43} {l 44 49} {ih 50 60} {k 61 78} {sil 79 95}]}
{91 [{sil 0 12} {f 13 33} {r 34 43} {oh 44 48} {l 49 56} {ih 57 69} {k 70 90} {sil 91 118}]}
{105 [{sil 0 14} {f 15 39} {r 40 51} {oh 52 57} {l 58 64} {ih 65 80} {k 81 104} {sil 105 137}]}
{125 [{sil 0 14} {f 15 44} {r 45 58} {oh 59 67} {l 68 74} {ih 75 94} {k 95 119} {sil 120 161}]}

normalised results =
{72 [{sil 0 9} {f 14 36} {r 38 46} {oh 47 53} {l 54 61} {ih 63 75} {k 76 99} {sil 100 122}]}
{80 [{sil 0 10} {f 14 36} {r 38 46} {oh 48 54} {l 55 61} {ih 63 75} {k 76 98} {sil 99 119}]}
{91 [{sil 0 12} {f 14 36} {r 37 47} {oh 48 53} {l 54 62} {ih 63 76} {k 77 99} {sil 100 130}]}
{105 [{sil 0 14} {f 14 37} {r 38 49} {oh 50 54} {l 55 61} {ih 62 76} {k 77 99} {sil 100 130}]}
{125 [{sil 0 14} {f 12 35} {r 36 46} {oh 47 54} {l 54 59} {ih 60 75} {k 76 95} {sil 96 129}]}

ruleAligned = [{{f 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{r 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{oh 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]} {{l 0} [{0 4} {1 4} {2 4} {3 4} {4 4}]} {{ih 0} [{0 5} {1 5} {2 5} {3 5} {4 5}]} {{k 0} [{0 6} {1 6} {2 6} {3 6} {4 6}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {f 14 36} {r 38 46} {oh 47 53} {l 54 61} {ih 63 75} {k 76 99} {sil 100 100}]}
{80 [{sil 0 0} {f 14 36} {r 38 46} {oh 48 54} {l 55 61} {ih 63 75} {k 76 98} {sil 99 99}]}
{91 [{sil 0 0} {f 14 36} {r 37 47} {oh 48 53} {l 54 62} {ih 63 76} {k 77 99} {sil 100 100}]}
{105 [{sil 0 0} {f 14 37} {r 38 49} {oh 50 54} {l 55 61} {ih 62 76} {k 77 99} {sil 100 100}]}
{125 [{sil 0 0} {f 12 35} {r 36 46} {oh 47 54} {l 54 59} {ih 60 75} {k 76 95} {sil 96 96}]}

timeAligned = [{{f 14 36} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{r 38 46} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{oh 48 54} [{0 3} {1 3} {2 3} {4 3} {3 3}]} {{l 54 61} [{0 4} {2 4} {4 4} {1 4} {3 4}]} {{ih 63 75} [{0 5} {1 5} {2 5} {3 5} {4 5}]} {{k 76 99} [{0 6} {1 6} {4 6} {2 6} {3 6}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 35
i, iTime, newITime, timeStartFrom = 2 1 2 46
i, iTime, newITime, timeStartFrom = 3 2 3 53
i, iTime, newITime, timeStartFrom = 4 3 4 59
i, iTime, newITime, timeStartFrom = 5 4 5 75
combinedVerdict    = [{f 0} {r 0} {oh 0} {l 0} {ih 0} {k 0}]
ruleAlignedVerdict = [{f 0} {r 0} {oh 0} {l 0} {ih 0} {k 0}]

score->
+2 for f
+2 for r
+2 for oh
+2 for l
+2 for ih
+2 for k
score<-: 17
testPronounce f good r good oh good l good ih good k good
publish->
phonsToAlphas = [{[f] f} {[r] r} {[oh] o} {[l] l} {[ih] i} {[k] c}]
getVerdict<-:new {f [f] 0}
getVerdict<-:new {r [r] 0}
getVerdict<-:new {o [oh] 0}
getVerdict<-:new {l [l] 0}
getVerdict<-:new {i [ih] 0}
getVerdict<-:new {c [k] 0}
lettersVerdicts = [{f [f] 0} {r [r] 0} {o [oh] 0} {l [l] 0} {i [ih] 0} {c [k] 0}]
publish<-
{
  "word": "frolic",
  "results": [
    {
      "letters": "f",
      "phonemes": "f",
      "verdict": "good"
    },
    {
      "letters": "r",
      "phonemes": "ɹ",
      "verdict": "good"
    },
    {
      "letters": "o",
      "phonemes": "ɒ",
      "verdict": "good"
    },
    {
      "letters": "l",
      "phonemes": "l",
      "verdict": "good"
    },
    {
      "letters": "i",
      "phonemes": "ɪ",
      "verdict": "good"
    },
    {
      "letters": "c",
      "phonemes": "k",
      "verdict": "good"
    }
  ],
  "err": null
}
