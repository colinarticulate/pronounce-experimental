Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_bd15a7a6-0c86-4bf2-a05f-adbb51ff51ec audiofile /Users/test/go/src/Phonemes/audio_clips/sit2_k_unknown_us_female.wav word kit dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  1.199125



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.38 0.56 0.9400000000000001

 start3, duration3, end3 =  0.52 0.28 0.8

 Initial start, duration, end =  0.28 0.66 0.9400000000000001

 Cut at: start, duration =  0.28 0.899125     guard_end =  1.179125 

Running scan for frate = 125
Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 125 public <kit> = (((sil [((g <any_Cx_k_g_b>) | (<any_Cx_k_g_b> g))] [((g <any_vowel_noSlide>) | (<any_vowel_noSlide> g))]) | (sil b (sil [((g <any_Cx_k_g_b>) | (<any_Cx_k_g_b> g))] [((g <any_vowel_noSlide>) | (<any_vowel_noSlide> g))]))) (([(<any_Cx_z_b_g_k> z)] | [(z <any_Cx_z_b_g_k>)]) (k | d | ((<any_Cx_z_b_g_k> z) | (z <any_Cx_z_b_g_k>)))) ((([(<any_Vx_r_z_ih_noSlide> r)] | [(r <any_Vx_r_z_ih_noSlide>)]) ([(<any_Cx_r_z_t_k> r)] | [(r <any_Cx_r_z_t_k>)])) (ih | ((<any_Vx_r_z_ih_noSlide> r) | (r <any_Vx_r_z_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_r_t_ch> ch)] | [(ch <any_Cx_r_t_ch>)]) sil))
Running scan for frate = 105
Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 105 public <kit> = (((sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]) | (sil b (sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]))) (([(<any_Cx_z_b_t_k> z)] | [(z <any_Cx_z_b_t_k>)]) (k | d | ((<any_Cx_z_b_t_k> z) | (z <any_Cx_z_b_t_k>)))) ((([(<any_Vx_r_z_ih_noSlide> r)] | [(r <any_Vx_r_z_ih_noSlide>)]) ([(<any_Cx_r_z_t_k> r)] | [(r <any_Cx_r_z_t_k>)])) (ih | ((<any_Vx_r_z_ih_noSlide> r) | (r <any_Vx_r_z_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_r_t_g> g)] | [(g <any_Cx_r_t_g>)]) sil))
Running scan for frate = 91
Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 91 public <kit> = (((sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil b (sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_z_b_d_k> z)] | [(z <any_Cx_z_b_d_k>)]) (k | d | ((<any_Cx_z_b_d_k> z) | (z <any_Cx_z_b_d_k>)))) ((([(<any_Vx_r_z_ih_noSlide> r)] | [(r <any_Vx_r_z_ih_noSlide>)]) ([(<any_Cx_r_z_t_k> r)] | [(r <any_Cx_r_z_t_k>)])) (ih | ((<any_Vx_r_z_ih_noSlide> r) | (r <any_Vx_r_z_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_r_t_ch> ch)] | [(ch <any_Cx_r_t_ch>)]) sil))
Running scan for frate = 80
Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 80 public <kit> = (((sil [((g <any_Cx_k_g_b>) | (<any_Cx_k_g_b> g))] [((g <any_vowel_noSlide>) | (<any_vowel_noSlide> g))]) | (sil b (sil [((g <any_Cx_k_g_b>) | (<any_Cx_k_g_b> g))] [((g <any_vowel_noSlide>) | (<any_vowel_noSlide> g))]))) (([(<any_Cx_z_b_g_k> z)] | [(z <any_Cx_z_b_g_k>)]) (k | d | ((<any_Cx_z_b_g_k> z) | (z <any_Cx_z_b_g_k>)))) ((([(<any_Vx_r_z_ih_noSlide> r)] | [(r <any_Vx_r_z_ih_noSlide>)]) ([(<any_Cx_r_z_t_k> r)] | [(r <any_Cx_r_z_t_k>)])) (ih | ((<any_Vx_r_z_ih_noSlide> r) | (r <any_Vx_r_z_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> d)] | [(d <any_vowel_noSlide>)]) ([(<any_Cx_r_t_d> d)] | [(d <any_Cx_r_t_d>)]) sil))
Running scan for frate = 72
Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 72 public <kit> = (((sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]) | (sil b (sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]))) (([(<any_Cx_z_b_t_k> z)] | [(z <any_Cx_z_b_t_k>)]) (k | d | ((<any_Cx_z_b_t_k> z) | (z <any_Cx_z_b_t_k>)))) ((([(<any_Vx_r_z_ih_noSlide> r)] | [(r <any_Vx_r_z_ih_noSlide>)]) ([(<any_Cx_r_z_t_k> r)] | [(r <any_Cx_r_z_t_k>)])) (ih | ((<any_Vx_r_z_ih_noSlide> r) | (r <any_Vx_r_z_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_r_t_ch> ch)] | [(ch <any_Cx_r_t_ch>)]) sil))

results =
{72 [{sil 0 10} {d 11 13} {z 14 23} {ih 24 34} {t 35 49} {sil 50 63}]}
{80 [{sil 0 12} {d 13 15} {z 16 26} {ih 27 39} {t 40 53} {sil 54 68}]}
{91 [{sil 0 12} {g 13 15} {z 16 29} {ih 30 45} {t 46 63} {sil 64 80}]}
{105 [{sil 0 15} {g 16 18} {z 19 34} {ih 35 53} {t 54 69} {sil 70 93}]}
{125 [{sil 0 18} {dh 19 26} {z 27 39} {ih 40 59} {t 60 81} {sil 82 109}]}

normalised results =
{72 [{sil 0 10} {d 15 15} {z 19 32} {ih 33 47} {t 49 68} {sil 69 88}]}
{80 [{sil 0 12} {d 16 16} {z 20 33} {ih 34 49} {t 50 66} {sil 68 85}]}
{91 [{sil 0 12} {g 14 14} {z 18 32} {ih 33 49} {t 51 69} {sil 70 88}]}
{105 [{sil 0 15} {g 15 15} {z 18 32} {ih 33 50} {t 51 66} {sil 67 89}]}
{125 [{sil 0 18} {dh 15 21} {z 22 31} {ih 32 47} {t 48 65} {sil 66 87}]}

ruleAligned = [{{k 2} []} {{z 3} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{ih 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]} {{t 0} [{0 4} {1 4} {2 4} {3 4} {4 4}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {d 15 15} {z 19 32} {ih 33 47} {t 49 68} {sil 69 69}]}
{80 [{sil 0 0} {d 16 16} {z 20 33} {ih 34 49} {t 50 66} {sil 68 68}]}
{91 [{sil 0 0} {g 14 14} {z 18 32} {ih 33 49} {t 51 69} {sil 70 70}]}
{105 [{sil 0 0} {g 15 15} {z 18 32} {ih 33 50} {t 51 66} {sil 67 67}]}
{125 [{sil 0 0} {dh 15 21} {z 22 31} {ih 32 47} {t 48 65} {sil 66 66}]}

timeAligned = [{{z 19 32} [{0 2} {2 2} {3 2} {1 2} {4 2}]} {{ih 33 49} [{0 3} {2 3} {3 3} {4 3} {1 3}]} {{t 50 66} [{0 4} {1 4} {4 4} {2 4} {3 4}]}]

i, iTime, newITime, timeStartFrom = 0 0 -1 0
i, iTime, newITime, timeStartFrom = 1 0 0 0
i, iTime, newITime, timeStartFrom = 2 0 1 31
i, iTime, newITime, timeStartFrom = 3 1 2 47
combinedVerdict    = [{k 2} {z 3} {ih 0} {t 0}]
ruleAlignedVerdict = [{k 2} {z 3} {ih 0} {t 0}]

score->
-2 for k
-2 for z
+2 for ih
+2 for t
score<-: 0
bestResult = {0 [{k 2} {z 3} {ih 0} {t 0}] [k ih t]}
testPronounce k missing z surprise ih good t good
publish->
phonsToAlphas = [{[k] k} {[ih] i} {[t] t}]
getVerdict<-:new {k [k] 2}
getVerdict<-:new {i [ih] 0}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{k [k] 2} {z [z] 3} {i [ih] 0} {t [t] 0}]
publish<-
{
  "word": "kit",
  "results": [
    {
      "letters": "k",
      "phonemes": "k",
      "verdict": "missing"
    },
    {
      "letters": "z",
      "phonemes": "z",
      "verdict": "surprise"
    },
    {
      "letters": "i",
      "phonemes": "Éª",
      "verdict": "good"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
