Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_ed548acd-4541-4494-979d-3465ee8728fa audiofile /Users/test/go/src/Phonemes/audio_clips/zit1_paul.wav word zit dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  2.111562



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.72 0.76 1.48

 start3, duration3, end3 =  0.72 0.66 1.38

 Initial start, duration, end =  0.62 0.86 1.48

 Cut at: start, duration =  0.62 1.31     guard_end =  1.9300000000000002 

Running scan for frate = 125
Considering guard r with value 3 for z ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 125 public <zit> = (((sil [((v <any_Cx_z_v_p>) | (<any_Cx_z_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]) | (sil p (sil [((v <any_Cx_z_v_p>) | (<any_Cx_z_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]))) (([(<any_Cx_r_p_v_z> r)] | [(r <any_Cx_r_p_v_z>)]) (z | ((<any_Cx_r_p_v_z> r) | (r <any_Cx_r_p_v_z>)))) ((([(<any_Vx_r_r_ih_noSlide> r)] | [(r <any_Vx_r_r_ih_noSlide>)]) ([(<any_Cx_r_r_t_z> r)] | [(r <any_Cx_r_r_t_z>)])) (ih | ((<any_Vx_r_r_ih_noSlide> r) | (r <any_Vx_r_r_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_r_t_p> p)] | [(p <any_Cx_r_t_p>)]) sil))
Running scan for frate = 105
Considering guard r with value 3 for z ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 105 public <zit> = (((sil [((s <any_Cx_z_s_p>) | (<any_Cx_z_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]) | (sil p (sil [((s <any_Cx_z_s_p>) | (<any_Cx_z_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]))) (([(<any_Cx_r_p_s_z> r)] | [(r <any_Cx_r_p_s_z>)]) (z | ((<any_Cx_r_p_s_z> r) | (r <any_Cx_r_p_s_z>)))) ((([(<any_Vx_r_r_ih_noSlide> r)] | [(r <any_Vx_r_r_ih_noSlide>)]) ([(<any_Cx_r_r_t_z> r)] | [(r <any_Cx_r_r_t_z>)])) (ih | ((<any_Vx_r_r_ih_noSlide> r) | (r <any_Vx_r_r_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_r_t_ch> ch)] | [(ch <any_Cx_r_t_ch>)]) sil))
Running scan for frate = 91
Considering guard r with value 3 for z ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 91 public <zit> = (((sil [((s <any_Cx_z_s_p>) | (<any_Cx_z_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]) | (sil p (sil [((s <any_Cx_z_s_p>) | (<any_Cx_z_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]))) (([(<any_Cx_r_p_s_z> r)] | [(r <any_Cx_r_p_s_z>)]) (z | ((<any_Cx_r_p_s_z> r) | (r <any_Cx_r_p_s_z>)))) ((([(<any_Vx_r_r_ih_noSlide> r)] | [(r <any_Vx_r_r_ih_noSlide>)]) ([(<any_Cx_r_r_t_z> r)] | [(r <any_Cx_r_r_t_z>)])) (ih | ((<any_Vx_r_r_ih_noSlide> r) | (r <any_Vx_r_r_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_r_t_p> p)] | [(p <any_Cx_r_t_p>)]) sil))
Running scan for frate = 80
Considering guard r with value 3 for z ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 80 public <zit> = (((sil [((v <any_Cx_z_v_p>) | (<any_Cx_z_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]) | (sil p (sil [((v <any_Cx_z_v_p>) | (<any_Cx_z_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]))) (([(<any_Cx_r_p_v_z> r)] | [(r <any_Cx_r_p_v_z>)]) (z | ((<any_Cx_r_p_v_z> r) | (r <any_Cx_r_p_v_z>)))) ((([(<any_Vx_r_r_ih_noSlide> r)] | [(r <any_Vx_r_r_ih_noSlide>)]) ([(<any_Cx_r_r_t_z> r)] | [(r <any_Cx_r_r_t_z>)])) (ih | ((<any_Vx_r_r_ih_noSlide> r) | (r <any_Vx_r_r_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_r_t_thr> thr)] | [(thr <any_Cx_r_t_thr>)]) sil))
Running scan for frate = 72
Considering guard r with value 3 for z ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 72 public <zit> = (((sil [((v <any_Cx_z_v_p>) | (<any_Cx_z_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]) | (sil p (sil [((v <any_Cx_z_v_p>) | (<any_Cx_z_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]))) (([(<any_Cx_r_p_v_z> r)] | [(r <any_Cx_r_p_v_z>)]) (z | ((<any_Cx_r_p_v_z> r) | (r <any_Cx_r_p_v_z>)))) ((([(<any_Vx_r_r_ih_noSlide> r)] | [(r <any_Vx_r_r_ih_noSlide>)]) ([(<any_Cx_r_r_t_z> r)] | [(r <any_Cx_r_r_t_z>)])) (ih | ((<any_Vx_r_r_ih_noSlide> r) | (r <any_Vx_r_r_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_r_t_p> p)] | [(p <any_Cx_r_t_p>)]) sil))

results =
{72 [{sil 0 16} {z 17 27} {ih 28 42} {t 43 56} {sil 57 75}]}
{80 [{sil 0 12} {r 13 17} {dh 18 32} {ih 33 47} {t 48 62} {sil 63 81}]}
{91 [{sil 0 14} {r 15 19} {dh 20 37} {ih 38 55} {t 56 71} {sil 72 117}]}
{105 [{sil 0 17} {r 18 23} {dh 24 43} {ih 44 65} {t 66 82} {sil 83 136}]}
{125 [{sil 0 26} {z 27 46} {ih 47 75} {t 76 97} {sil 98 160}]}

normalised results =
{72 [{sil 0 16} {z 24 38} {ih 39 58} {t 60 78} {sil 79 104}]}
{80 [{sil 0 12} {r 16 21} {dh 23 40} {ih 41 59} {t 60 78} {sil 79 101}]}
{91 [{sil 0 14} {r 16 21} {dh 22 41} {ih 42 60} {t 62 78} {sil 79 129}]}
{105 [{sil 0 17} {r 17 22} {dh 23 41} {ih 42 62} {t 63 78} {sil 79 130}]}
{125 [{sil 0 26} {z 22 37} {ih 38 60} {t 61 78} {sil 78 128}]}

ruleAligned = [{{z 2} [{0 1} {4 1}]} {{r 3} [{1 1} {2 1} {3 1}]} {{dh 3} [{1 2} {2 2} {3 2}]} {{ih 0} [{0 2} {1 3} {2 3} {3 3} {4 2}]} {{t 0} [{0 3} {1 4} {2 4} {3 4} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {z 24 38} {ih 39 58} {t 60 78} {sil 79 79}]}
{80 [{sil 0 0} {r 16 21} {dh 23 40} {ih 41 59} {t 60 78} {sil 79 79}]}
{91 [{sil 0 0} {r 16 21} {dh 22 41} {ih 42 60} {t 62 78} {sil 79 79}]}
{105 [{sil 0 0} {r 17 22} {dh 23 41} {ih 42 62} {t 63 78} {sil 79 79}]}
{125 [{sil 0 0} {z 22 37} {ih 38 60} {t 61 78} {sil 78 78}]}

timeAligned = [{{r 17 21} [{1 1} {2 1} {3 1}]} {{dh 23 40} [{1 2} {2 2} {3 2}]} {{ih 41 60} [{0 2} {1 3} {4 2} {2 3} {3 3}]} {{t 61 78} [{0 3} {1 4} {4 3} {2 4} {3 4}]}]

i, iTime, newITime, timeStartFrom = 0 0 -1 0
i, iTime, newITime, timeStartFrom = 1 0 0 0
i, iTime, newITime, timeStartFrom = 2 0 1 21
i, iTime, newITime, timeStartFrom = 3 1 2 40
i, iTime, newITime, timeStartFrom = 4 2 3 59
combinedVerdict    = [{z 2} {r 3} {dh 3} {ih 0} {t 0}]
ruleAlignedVerdict = [{z 2} {r 3} {dh 3} {ih 0} {t 0}]

score->
-2 for z
-2 for r
-2 for dh
+2 for ih
+2 for t
score<-: -2
bestResult = {-2 [{z 2} {r 3} {dh 3} {ih 0} {t 0}] [z ih t]}
testPronounce z missing r surprise dh surprise ih good t good
publish->
phonsToAlphas = [{[z] z} {[ih] i} {[t] t}]
getVerdict<-:new {z [z] 2}
getVerdict<-:new {i [ih] 0}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{z [z] 2} {r [r] 3} {dh [dh] 3} {i [ih] 0} {t [t] 0}]
publish<-
{
  "word": "zit",
  "results": [
    {
      "letters": "z",
      "phonemes": "z",
      "verdict": "missing"
    },
    {
      "letters": "r",
      "phonemes": "ɹ",
      "verdict": "surprise"
    },
    {
      "letters": "dh",
      "phonemes": "ð",
      "verdict": "surprise"
    },
    {
      "letters": "i",
      "phonemes": "ɪ",
      "verdict": "good"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
