Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_a44472b6-89fd-449a-a5d8-018d06dcc15c audiofile /Users/test/go/src/Phonemes/audio_clips/cut1_ah_paul.wav word cot dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  1.902625



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.8 0.58 1.38

 start3, duration3, end3 =  0.8 0.48 1.28

 Initial start, duration, end =  0.7000000000000001 0.6799999999999998 1.38

 Cut at: start, duration =  0.7000000000000001 1.13     guard_end =  1.83 

Running scan for frate = 125
Considering guard z with value 1 for k ...
Considering guard zh with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

Considering guard zh with value 2 for oh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 125 public <cot> = (((sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]) | (sil b (sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]))) (([(<any_Cx_zh_b_p_k_oh> zh)] | [(zh <any_Cx_zh_b_p_k_oh>)]) (k | d | ((<any_Cx_zh_b_p_k_oh> zh) | (zh <any_Cx_zh_b_p_k_oh>)))) (([(<any_Cx_zh_zh_oh_k> zh)] | [(zh <any_Cx_zh_zh_oh_k>)]) (oh | ((<any_Cx_zh_zh_oh_t> zh) | (zh <any_Cx_zh_zh_oh_t>)))) (([(<any_Cx_zh_zh_t_oh> zh)] | [(zh <any_Cx_zh_zh_t_oh>)]) (t | ((<any_Cx_zh_zh_t_oh> zh) | (zh <any_Cx_zh_zh_t_oh>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_p> p)] | [(p <any_Cx_zh_t_p>)]) sil))
Running scan for frate = 105
Considering guard zh with value 1 for k ...
Considering guard z with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

Considering guard zh with value 2 for oh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 105 public <cot> = (((sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]) | (sil b (sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]))) (([(<any_Cx_zh_b_t_k_oh> zh)] | [(zh <any_Cx_zh_b_t_k_oh>)]) (k | d | ((<any_Cx_zh_b_t_k_oh> zh) | (zh <any_Cx_zh_b_t_k_oh>)))) (([(<any_Cx_zh_zh_oh_k> zh)] | [(zh <any_Cx_zh_zh_oh_k>)]) (oh | ((<any_Cx_zh_zh_oh_t> zh) | (zh <any_Cx_zh_zh_oh_t>)))) (([(<any_Cx_zh_zh_t_oh> zh)] | [(zh <any_Cx_zh_zh_t_oh>)]) (t | ((<any_Cx_zh_zh_t_oh> zh) | (zh <any_Cx_zh_zh_t_oh>)))) (([(<any_vowel_noSlide> d)] | [(d <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_d> d)] | [(d <any_Cx_zh_t_d>)]) sil))
Running scan for frate = 91
Considering guard z with value 1 for k ...
Considering guard zh with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, z

Considering guard zh with value 2 for oh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 91 public <cot> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_z_b_ch_k_oh> z)] | [(z <any_Cx_z_b_ch_k_oh>)]) (k | d | ((<any_Cx_z_b_ch_k_oh> z) | (z <any_Cx_z_b_ch_k_oh>)))) (([(<any_Cx_zh_z_oh_k> zh)] | [(zh <any_Cx_zh_z_oh_k>)]) (oh | ((<any_Cx_zh_z_oh_t> zh) | (zh <any_Cx_zh_z_oh_t>)))) (([(<any_Cx_zh_zh_t_oh> zh)] | [(zh <any_Cx_zh_zh_t_oh>)]) (t | ((<any_Cx_zh_zh_t_oh> zh) | (zh <any_Cx_zh_zh_t_oh>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_p> p)] | [(p <any_Cx_zh_t_p>)]) sil))
Running scan for frate = 80
Considering guard z with value 1 for k ...
Considering guard zh with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, z

Considering guard zh with value 2 for oh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 80 public <cot> = (((sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]) | (sil b (sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]))) (([(<any_Cx_z_b_p_k_oh> z)] | [(z <any_Cx_z_b_p_k_oh>)]) (k | d | ((<any_Cx_z_b_p_k_oh> z) | (z <any_Cx_z_b_p_k_oh>)))) (([(<any_Cx_zh_z_oh_k> zh)] | [(zh <any_Cx_zh_z_oh_k>)]) (oh | ((<any_Cx_zh_z_oh_t> zh) | (zh <any_Cx_zh_z_oh_t>)))) (([(<any_Cx_zh_zh_t_oh> zh)] | [(zh <any_Cx_zh_zh_t_oh>)]) (t | ((<any_Cx_zh_zh_t_oh> zh) | (zh <any_Cx_zh_zh_t_oh>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_ch> ch)] | [(ch <any_Cx_zh_t_ch>)]) sil))
Running scan for frate = 72
Considering guard z with value 1 for k ...
Considering guard zh with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, z

Considering guard zh with value 2 for oh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 72 public <cot> = (((sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]) | (sil b (sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]))) (([(<any_Cx_z_b_p_k_oh> z)] | [(z <any_Cx_z_b_p_k_oh>)]) (k | d | ((<any_Cx_z_b_p_k_oh> z) | (z <any_Cx_z_b_p_k_oh>)))) (([(<any_Cx_zh_z_oh_k> zh)] | [(zh <any_Cx_zh_z_oh_k>)]) (oh | ((<any_Cx_zh_z_oh_t> zh) | (zh <any_Cx_zh_z_oh_t>)))) (([(<any_Cx_zh_zh_t_oh> zh)] | [(zh <any_Cx_zh_zh_t_oh>)]) (t | ((<any_Cx_zh_zh_t_oh> zh) | (zh <any_Cx_zh_zh_t_oh>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_thr> thr)] | [(thr <any_Cx_zh_t_thr>)]) sil))

results =
{72 [{sil 0 11} {k 12 21} {oh 22 32} {t 33 46} {sil 47 63}]}
{80 [{sil 0 12} {k 13 23} {oh 24 36} {t 37 51} {sil 52 68}]}
{91 [{sil 0 15} {k 16 27} {oh 28 41} {t 42 59} {sil 60 101}]}
{105 [{sil 0 18} {t 19 29} {ah 30 49} {k 50 52} {oh 53 55} {t 56 69} {sil 70 117}]}
{125 [{sil 0 20} {k 21 34} {oh 35 59} {t 60 81} {sil 82 138}]}

normalised results =
{72 [{sil 0 11} {k 17 29} {oh 31 44} {t 46 64} {sil 65 88}]}
{80 [{sil 0 12} {k 16 29} {oh 30 45} {t 46 64} {sil 65 85}]}
{91 [{sil 0 15} {k 18 30} {oh 31 45} {t 46 65} {sil 66 111}]}
{105 [{sil 0 18} {t 18 28} {ah 29 47} {k 48 48} {oh 50 50} {t 53 66} {sil 67 111}]}
{125 [{sil 0 20} {k 17 27} {oh 28 47} {t 48 65} {sil 66 110}]}

ruleAligned = [{{k 0} [{0 1} {1 1} {2 1} {4 1}]} {{oh 0} [{0 2} {1 2} {2 2} {4 2}]} {{t 0} [{0 3} {1 3} {2 3} {3 5} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {k 17 29} {oh 31 44} {t 46 64} {sil 65 65}]}
{80 [{sil 0 0} {k 16 29} {oh 30 45} {t 46 64} {sil 65 65}]}
{91 [{sil 0 0} {k 18 30} {oh 31 45} {t 46 65} {sil 66 66}]}
{105 [{sil 0 0} {t 18 28} {ah 29 47} {k 48 48} {oh 50 50} {t 53 66} {sil 67 67}]}
{125 [{sil 0 0} {k 17 27} {oh 28 47} {t 48 65} {sil 66 66}]}

timeAligned = [{{k 17 29} [{0 1} {1 1} {4 1} {2 1}]} {{oh 31 45} [{0 2} {1 2} {2 2} {4 2}]} {{t 46 65} [{0 3} {1 3} {2 3} {4 3} {3 5}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 27
i, iTime, newITime, timeStartFrom = 2 1 2 44
combinedVerdict    = [{k 0} {oh 0} {t 0}]
ruleAlignedVerdict = [{k 0} {oh 0} {t 0}]

score->
+2 for k
+2 for oh
+2 for t
score<-: 11
testPronounce k good oh good t good
publish->
phonsToAlphas = [{[k] c} {[oh] o} {[t] t}]
getVerdict<-:new {c [k] 0}
getVerdict<-:new {o [oh] 0}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{c [k] 0} {o [oh] 0} {t [t] 0}]
publish<-
{
  "word": "cot",
  "results": [
    {
      "letters": "c",
      "phonemes": "k",
      "verdict": "good"
    },
    {
      "letters": "o",
      "phonemes": "É’",
      "verdict": "good"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
