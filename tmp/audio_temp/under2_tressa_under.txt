Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_9607a8f7-6cde-4b45-9cfe-ae50f7d11618 audiofile /Users/test/go/src/Phonemes/audio_clips/under2_tressa.wav word under dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  1.962312



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.68 0.76 1.44

 start3, duration3, end3 =  0.72 0.66 1.38

 Initial start, duration, end =  0.5800000000000001 0.8599999999999999 1.44

 Cut at: start, duration =  0.5800000000000001 1.3099999999999998     guard_end =  1.89 

Running scan for frate = 125
Considering guard zh with value 0.8 for ah ...
Considering guard sh with value 0.8 for ah ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh

Considering guard sh with value 3 for n ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for axr ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 125 public <under> = (((sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]) | (sil p (sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]))) ((([(<any_Vx_zh_p_l_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_l_ah_noSlide>)]) ([(<any_Cx_zh_p_l_n> zh)] | [(zh <any_Cx_zh_p_l_n>)])) (ah | ((<any_Vx_zh_p_l_ah_noSlide> zh) | (zh <any_Vx_zh_p_l_ah_noSlide>)))) (([(<any_Cx_sh_zh_n_d> sh)] | [(sh <any_Cx_sh_zh_n_d>)]) (n | ((<any_Cx_sh_zh_n_d> sh) | (sh <any_Cx_sh_zh_n_d>)))) (([(<any_Cx_sh_sh_d_n> sh)] | [(sh <any_Cx_sh_sh_d_n>)]) (d | ((<any_Cx_sh_sh_d_axr_n> sh) | (sh <any_Cx_sh_sh_d_axr_n>)))) (([(<any_Cx_sh_sh_axr_d> sh)] | [(sh <any_Cx_sh_sh_axr_d>)]) (axr | ((<any_Cx_sh_sh_axr_d> sh) | (sh <any_Cx_sh_sh_axr_d>)))) (([(<any_vowel_noSlide> ng)] | [(ng <any_vowel_noSlide>)]) ([(<any_Cx_sh_axr_ng> ng)] | [(ng <any_Cx_sh_axr_ng>)]) sil))
Running scan for frate = 105
Considering guard zh with value 0.8 for ah ...
Considering guard sh with value 0.8 for ah ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh

Considering guard sh with value 3 for n ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for axr ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 105 public <under> = (((sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]) | (sil p (sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]))) ((([(<any_Vx_zh_p_l_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_l_ah_noSlide>)]) ([(<any_Cx_zh_p_l_n> zh)] | [(zh <any_Cx_zh_p_l_n>)])) (ah | ((<any_Vx_zh_p_l_ah_noSlide> zh) | (zh <any_Vx_zh_p_l_ah_noSlide>)))) (([(<any_Cx_sh_zh_n_d> sh)] | [(sh <any_Cx_sh_zh_n_d>)]) (n | ((<any_Cx_sh_zh_n_d> sh) | (sh <any_Cx_sh_zh_n_d>)))) (([(<any_Cx_sh_sh_d_n> sh)] | [(sh <any_Cx_sh_sh_d_n>)]) (d | ((<any_Cx_sh_sh_d_axr_n> sh) | (sh <any_Cx_sh_sh_d_axr_n>)))) (([(<any_Cx_sh_sh_axr_d> sh)] | [(sh <any_Cx_sh_sh_axr_d>)]) (axr | ((<any_Cx_sh_sh_axr_d> sh) | (sh <any_Cx_sh_sh_axr_d>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_sh_axr_thr> thr)] | [(thr <any_Cx_sh_axr_thr>)]) sil))
Running scan for frate = 91
Considering guard zh with value 0.8 for ah ...
Considering guard sh with value 0.8 for ah ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh

Considering guard sh with value 3 for n ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for axr ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 91 public <under> = (((sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]) | (sil p (sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]))) ((([(<any_Vx_zh_p_l_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_l_ah_noSlide>)]) ([(<any_Cx_zh_p_l_n> zh)] | [(zh <any_Cx_zh_p_l_n>)])) (ah | ((<any_Vx_zh_p_l_ah_noSlide> zh) | (zh <any_Vx_zh_p_l_ah_noSlide>)))) (([(<any_Cx_sh_zh_n_d> sh)] | [(sh <any_Cx_sh_zh_n_d>)]) (n | ((<any_Cx_sh_zh_n_d> sh) | (sh <any_Cx_sh_zh_n_d>)))) (([(<any_Cx_sh_sh_d_n> sh)] | [(sh <any_Cx_sh_sh_d_n>)]) (d | ((<any_Cx_sh_sh_d_axr_n> sh) | (sh <any_Cx_sh_sh_d_axr_n>)))) (([(<any_Cx_sh_sh_axr_d> sh)] | [(sh <any_Cx_sh_sh_axr_d>)]) (axr | ((<any_Cx_sh_sh_axr_d> sh) | (sh <any_Cx_sh_sh_axr_d>)))) (([(<any_vowel_noSlide> n)] | [(n <any_vowel_noSlide>)]) ([(<any_Cx_sh_axr_n> n)] | [(n <any_Cx_sh_axr_n>)]) sil))
Running scan for frate = 80
Considering guard zh with value 0.8 for ah ...
Considering guard sh with value 0.8 for ah ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh

Considering guard sh with value 3 for n ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for axr ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 80 public <under> = (((sil [((r <any_Vx_ah_r_p_noSlide>) | (<any_Vx_ah_r_p_noSlide> r))] [((r <any_Cx_ah_r_p>) | (<any_Cx_ah_r_p> r))]) | (sil p (sil [((r <any_Vx_ah_r_p_noSlide>) | (<any_Vx_ah_r_p_noSlide> r))] [((r <any_Cx_ah_r_p>) | (<any_Cx_ah_r_p> r))]))) ((([(<any_Vx_zh_p_r_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_r_ah_noSlide>)]) ([(<any_Cx_zh_p_r_n> zh)] | [(zh <any_Cx_zh_p_r_n>)])) (ah | ((<any_Vx_zh_p_r_ah_noSlide> zh) | (zh <any_Vx_zh_p_r_ah_noSlide>)))) (([(<any_Cx_sh_zh_n_d> sh)] | [(sh <any_Cx_sh_zh_n_d>)]) (n | ((<any_Cx_sh_zh_n_d> sh) | (sh <any_Cx_sh_zh_n_d>)))) (([(<any_Cx_sh_sh_d_n> sh)] | [(sh <any_Cx_sh_sh_d_n>)]) (d | ((<any_Cx_sh_sh_d_axr_n> sh) | (sh <any_Cx_sh_sh_d_axr_n>)))) (([(<any_Cx_sh_sh_axr_d> sh)] | [(sh <any_Cx_sh_sh_axr_d>)]) (axr | ((<any_Cx_sh_sh_axr_d> sh) | (sh <any_Cx_sh_sh_axr_d>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_sh_axr_hh> hh)] | [(hh <any_Cx_sh_axr_hh>)]) sil))
Running scan for frate = 72
Considering guard zh with value 0.8 for ah ...
Considering guard sh with value 0.8 for ah ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh

Considering guard sh with value 3 for n ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for axr ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 72 public <under> = (((sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]) | (sil p (sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]))) ((([(<any_Vx_zh_p_b_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_b_ah_noSlide>)]) ([(<any_Cx_zh_p_b_n> zh)] | [(zh <any_Cx_zh_p_b_n>)])) (ah | ((<any_Vx_zh_p_b_ah_noSlide> zh) | (zh <any_Vx_zh_p_b_ah_noSlide>)))) (([(<any_Cx_sh_zh_n_d> sh)] | [(sh <any_Cx_sh_zh_n_d>)]) (n | ((<any_Cx_sh_zh_n_d> sh) | (sh <any_Cx_sh_zh_n_d>)))) (([(<any_Cx_sh_sh_d_n> sh)] | [(sh <any_Cx_sh_sh_d_n>)]) (d | ((<any_Cx_sh_sh_d_axr_n> sh) | (sh <any_Cx_sh_sh_d_axr_n>)))) (([(<any_Cx_sh_sh_axr_d> sh)] | [(sh <any_Cx_sh_sh_axr_d>)]) (axr | ((<any_Cx_sh_sh_axr_d> sh) | (sh <any_Cx_sh_sh_axr_d>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_sh_axr_thr> thr)] | [(thr <any_Cx_sh_axr_thr>)]) sil))

results =
{72 [{sil 0 12} {ah 13 19} {n 20 34} {d 35 40} {axr 41 56} {sil 57 70}]}
{80 [{sil 0 14} {ah 15 18} {n 19 38} {d 39 44} {axr 45 62} {sil 63 75}]}
{91 [{sil 0 14} {ah 15 25} {n 26 44} {d 45 51} {axr 52 93} {sil 94 117}]}
{105 [{sil 0 18} {ah 19 23} {n 24 52} {d 53 59} {axr 60 108} {sil 109 136}]}
{125 [{sil 0 18} {ah 19 26} {n 27 60} {d 61 67} {axr 68 114} {sil 115 160}]}

normalised results =
{72 [{sil 0 12} {ah 18 26} {n 28 47} {d 49 56} {axr 57 78} {sil 79 97}]}
{80 [{sil 0 14} {ah 19 23} {n 24 48} {d 49 55} {axr 56 78} {sil 79 94}]}
{91 [{sil 0 14} {ah 16 27} {n 29 48} {d 49 56} {axr 57 102} {sil 103 129}]}
{105 [{sil 0 18} {ah 18 22} {n 23 50} {d 50 56} {axr 57 103} {sil 104 130}]}
{125 [{sil 0 18} {ah 15 21} {n 22 48} {d 49 54} {axr 54 91} {sil 92 128}]}

ruleAligned = [{{ah 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{n 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{d 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]} {{axr 0} [{0 4} {1 4} {2 4} {3 4} {4 4}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {ah 18 26} {n 28 47} {d 49 56} {axr 57 78} {sil 79 79}]}
{80 [{sil 0 0} {ah 19 23} {n 24 48} {d 49 55} {axr 56 78} {sil 79 79}]}
{91 [{sil 0 0} {ah 16 27} {n 29 48} {d 49 56} {axr 57 102} {sil 103 103}]}
{105 [{sil 0 0} {ah 18 22} {n 23 50} {d 50 56} {axr 57 103} {sil 104 104}]}
{125 [{sil 0 0} {ah 15 21} {n 22 48} {d 49 54} {axr 54 91} {sil 92 92}]}

timeAligned = [{{ah 18 23} [{0 1} {2 1} {3 1} {4 1} {1 1}]} {{n 24 48} [{1 2} {3 2} {4 2} {0 2} {2 2}]} {{d 49 56} [{0 3} {1 3} {2 3} {4 3} {3 3}]} {{axr 57 91} [{0 4} {1 4} {2 4} {3 4} {4 4}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 21
i, iTime, newITime, timeStartFrom = 2 1 2 47
i, iTime, newITime, timeStartFrom = 3 2 3 54
combinedVerdict    = [{ah 0} {n 0} {d 0} {axr 0}]
ruleAlignedVerdict = [{ah 0} {n 0} {d 0} {axr 0}]

score->
+2 for ah
+2 for n
+2 for d
+2 for axr
score<-: 13
testPronounce ah good n good d good axr good
publish->
phonsToAlphas = [{[ah] u} {[n] n} {[d] d} {[axr] er}]
getVerdict<-:new {u [ah] 0}
getVerdict<-:new {n [n] 0}
getVerdict<-:new {d [d] 0}
getVerdict<-:new {er [axr] 0}
lettersVerdicts = [{u [ah] 0} {n [n] 0} {d [d] 0} {er [axr] 0}]
publish<-
{
  "word": "under",
  "results": [
    {
      "letters": "u",
      "phonemes": "ʌ",
      "verdict": "good"
    },
    {
      "letters": "n",
      "phonemes": "n",
      "verdict": "good"
    },
    {
      "letters": "d",
      "phonemes": "d",
      "verdict": "good"
    },
    {
      "letters": "er",
      "phonemes": "əɹ",
      "verdict": "good"
    }
  ],
  "err": null
}
