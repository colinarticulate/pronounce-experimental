Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_d2e9c5d2-18a8-4aa5-9679-340d05e218cb audiofile /Users/test/go/src/Phonemes/audio_clips/ebb1_b_colin.wav word egg dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  2.476313



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.68 0.66 1.34

 start3, duration3, end3 =  0.7000000000000001 0.56 1.2600000000000002

 Initial start, duration, end =  0.5800000000000001 0.76 1.34

 Cut at: start, duration =  0.5800000000000001 1.21     guard_end =  1.79 

Running scan for frate = 125
Considering guard ch with value 1 for eh ...
Considering guard oy with value 1 for eh ...
Considering guard zh with value 1 for eh ...
Considering guard s with value 1 for eh ...
Considering guard sh with value 1 for eh ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, oy

Considering guard oy with value 1 for g ...
Considering guard zh with value 1 for g ...
Considering guard sh with value 1 for g ...
Considering guard s with value 1 for g ...
Considering guard ch with value 1 for g ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, zh

frate, target rule = 125 public <egg> = (((sil [((r <any_Vx_eh_r_p_noSlide>) | (<any_Vx_eh_r_p_noSlide> r))] [((r <any_Cx_eh_r_p>) | (<any_Cx_eh_r_p> r))]) | (sil p (sil [((r <any_Vx_eh_r_p_noSlide>) | (<any_Vx_eh_r_p_noSlide> r))] [((r <any_Cx_eh_r_p>) | (<any_Cx_eh_r_p> r))]))) ((([(<any_Vx_oy_p_r_eh_noSlide> oy)] | [(oy <any_Vx_oy_p_r_eh_noSlide>)]) ([(<any_Cx_oy_p_r_g> oy)] | [(oy <any_Cx_oy_p_r_g>)])) (eh | ((<any_Vx_oy_p_r_eh_noSlide> oy) | (oy <any_Vx_oy_p_r_eh_noSlide>)))) (([(<any_Cx_zh_oy_g> zh)] | [(zh <any_Cx_zh_oy_g>)]) (g | ((<any_Cx_zh_oy_g> zh) | (zh <any_Cx_zh_oy_g>)))) (([(<any_vowel_noSlide> y)] | [(y <any_vowel_noSlide>)]) ([(<any_Cx_zh_g_y> y)] | [(y <any_Cx_zh_g_y>)]) sil))
Running scan for frate = 105
Considering guard s with value 1 for eh ...
Considering guard zh with value 1 for eh ...
Considering guard ch with value 1 for eh ...
Considering guard sh with value 1 for eh ...
Considering guard oy with value 1 for eh ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, s

Considering guard ch with value 1 for g ...
Considering guard oy with value 1 for g ...
Considering guard zh with value 1 for g ...
Considering guard sh with value 1 for g ...
Considering guard s with value 1 for g ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, sh

frate, target rule = 105 public <egg> = (((sil [((hh <any_Vx_eh_hh_p_noSlide>) | (<any_Vx_eh_hh_p_noSlide> hh))] [((hh <any_Cx_eh_hh_p>) | (<any_Cx_eh_hh_p> hh))]) | (sil p (sil [((hh <any_Vx_eh_hh_p_noSlide>) | (<any_Vx_eh_hh_p_noSlide> hh))] [((hh <any_Cx_eh_hh_p>) | (<any_Cx_eh_hh_p> hh))]))) ((([(<any_Vx_s_p_hh_eh_noSlide> s)] | [(s <any_Vx_s_p_hh_eh_noSlide>)]) ([(<any_Cx_s_p_hh_g> s)] | [(s <any_Cx_s_p_hh_g>)])) (eh | ((<any_Vx_s_p_hh_eh_noSlide> s) | (s <any_Vx_s_p_hh_eh_noSlide>)))) (([(<any_Cx_sh_s_g> sh)] | [(sh <any_Cx_sh_s_g>)]) (g | ((<any_Cx_sh_s_g> sh) | (sh <any_Cx_sh_s_g>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_sh_g_hh> hh)] | [(hh <any_Cx_sh_g_hh>)]) sil))
Running scan for frate = 91
Considering guard s with value 1 for eh ...
Considering guard ch with value 1 for eh ...
Considering guard oy with value 1 for eh ...
Considering guard zh with value 1 for eh ...
Considering guard sh with value 1 for eh ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, s

Considering guard ch with value 1 for g ...
Considering guard oy with value 1 for g ...
Considering guard sh with value 1 for g ...
Considering guard zh with value 1 for g ...
Considering guard s with value 1 for g ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, ch

frate, target rule = 91 public <egg> = (((sil [((l <any_Vx_eh_l_p_noSlide>) | (<any_Vx_eh_l_p_noSlide> l))] [((l <any_Cx_eh_l_p>) | (<any_Cx_eh_l_p> l))]) | (sil p (sil [((l <any_Vx_eh_l_p_noSlide>) | (<any_Vx_eh_l_p_noSlide> l))] [((l <any_Cx_eh_l_p>) | (<any_Cx_eh_l_p> l))]))) ((([(<any_Vx_s_p_l_eh_noSlide> s)] | [(s <any_Vx_s_p_l_eh_noSlide>)]) ([(<any_Cx_s_p_l_g> s)] | [(s <any_Cx_s_p_l_g>)])) (eh | ((<any_Vx_s_p_l_eh_noSlide> s) | (s <any_Vx_s_p_l_eh_noSlide>)))) (([(<any_Cx_ch_s_g> ch)] | [(ch <any_Cx_ch_s_g>)]) (g | ((<any_Cx_ch_s_g> ch) | (ch <any_Cx_ch_s_g>)))) (([(<any_vowel_noSlide> d)] | [(d <any_vowel_noSlide>)]) ([(<any_Cx_ch_g_d> d)] | [(d <any_Cx_ch_g_d>)]) sil))
Running scan for frate = 80
Considering guard zh with value 1 for eh ...
Considering guard s with value 1 for eh ...
Considering guard ch with value 1 for eh ...
Considering guard oy with value 1 for eh ...
Considering guard sh with value 1 for eh ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, oy

Considering guard zh with value 1 for g ...
Considering guard ch with value 1 for g ...
Considering guard oy with value 1 for g ...
Considering guard sh with value 1 for g ...
Considering guard s with value 1 for g ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, s

frate, target rule = 80 public <egg> = (((sil [((hh <any_Vx_eh_hh_p_noSlide>) | (<any_Vx_eh_hh_p_noSlide> hh))] [((hh <any_Cx_eh_hh_p>) | (<any_Cx_eh_hh_p> hh))]) | (sil p (sil [((hh <any_Vx_eh_hh_p_noSlide>) | (<any_Vx_eh_hh_p_noSlide> hh))] [((hh <any_Cx_eh_hh_p>) | (<any_Cx_eh_hh_p> hh))]))) ((([(<any_Vx_oy_p_hh_eh_noSlide> oy)] | [(oy <any_Vx_oy_p_hh_eh_noSlide>)]) ([(<any_Cx_oy_p_hh_g> oy)] | [(oy <any_Cx_oy_p_hh_g>)])) (eh | ((<any_Vx_oy_p_hh_eh_noSlide> oy) | (oy <any_Vx_oy_p_hh_eh_noSlide>)))) (([(<any_Cx_s_oy_g> s)] | [(s <any_Cx_s_oy_g>)]) (g | ((<any_Cx_s_oy_g> s) | (s <any_Cx_s_oy_g>)))) (([(<any_vowel_noSlide> y)] | [(y <any_vowel_noSlide>)]) ([(<any_Cx_s_g_y> y)] | [(y <any_Cx_s_g_y>)]) sil))
Running scan for frate = 72
Considering guard oy with value 1 for eh ...
Considering guard zh with value 1 for eh ...
Considering guard sh with value 1 for eh ...
Considering guard s with value 1 for eh ...
Considering guard ch with value 1 for eh ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, oy

Considering guard sh with value 1 for g ...
Considering guard s with value 1 for g ...
Considering guard oy with value 1 for g ...
Considering guard ch with value 1 for g ...
Considering guard zh with value 1 for g ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, sh

frate, target rule = 72 public <egg> = (((sil [((b <any_Vx_eh_b_p_noSlide>) | (<any_Vx_eh_b_p_noSlide> b))] [((b <any_Cx_eh_b_p>) | (<any_Cx_eh_b_p> b))]) | (sil p (sil [((b <any_Vx_eh_b_p_noSlide>) | (<any_Vx_eh_b_p_noSlide> b))] [((b <any_Cx_eh_b_p>) | (<any_Cx_eh_b_p> b))]))) ((([(<any_Vx_oy_p_b_eh_noSlide> oy)] | [(oy <any_Vx_oy_p_b_eh_noSlide>)]) ([(<any_Cx_oy_p_b_g> oy)] | [(oy <any_Cx_oy_p_b_g>)])) (eh | ((<any_Vx_oy_p_b_eh_noSlide> oy) | (oy <any_Vx_oy_p_b_eh_noSlide>)))) (([(<any_Cx_sh_oy_g> sh)] | [(sh <any_Cx_sh_oy_g>)]) (g | ((<any_Cx_sh_oy_g> sh) | (sh <any_Cx_sh_oy_g>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_sh_g_thr> thr)] | [(thr <any_Cx_sh_g_thr>)]) sil))

results =
{72 [{sil 0 13} {eh 14 31} {g 32 42} {sil 43 56}]}
{80 [{sil 0 14} {eh 15 34} {g 35 47} {sil 48 59}]}
{91 [{sil 0 17} {eh 18 41} {g 42 55} {sil 56 108}]}
{105 [{sil 0 20} {eh 21 48} {g 49 64} {sil 65 126}]}
{125 [{sil 0 22} {eh 23 56} {g 57 75} {sil 76 148}]}

normalised results =
{72 [{sil 0 13} {eh 19 43} {g 44 58} {sil 60 78}]}
{80 [{sil 0 14} {eh 19 43} {g 44 59} {sil 60 74}]}
{91 [{sil 0 17} {eh 20 45} {g 46 60} {sil 62 119}]}
{105 [{sil 0 20} {eh 20 46} {g 47 61} {sil 62 120}]}
{125 [{sil 0 22} {eh 18 45} {g 46 60} {sil 61 118}]}

ruleAligned = [{{eh 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{g 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {eh 19 43} {g 44 58} {sil 60 60}]}
{80 [{sil 0 0} {eh 19 43} {g 44 59} {sil 60 60}]}
{91 [{sil 0 0} {eh 20 45} {g 46 60} {sil 62 62}]}
{105 [{sil 0 0} {eh 20 46} {g 47 61} {sil 62 62}]}
{125 [{sil 0 0} {eh 18 45} {g 46 60} {sil 61 61}]}

timeAligned = [{{eh 19 45} [{0 1} {1 1} {4 1} {2 1} {3 1}]} {{g 46 60} [{0 2} {1 2} {2 2} {4 2} {3 2}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 43
combinedVerdict    = [{eh 0} {g 0}]
ruleAlignedVerdict = [{eh 0} {g 0}]

score->
+2 for eh
+2 for g
score<-: 9
testPronounce eh good g good
publish->
phonsToAlphas = [{[eh] e} {[g] gg}]
getVerdict<-:new {e [eh] 0}
getVerdict<-:new {gg [g] 0}
lettersVerdicts = [{e [eh] 0} {gg [g] 0}]
publish<-
{
  "word": "egg",
  "results": [
    {
      "letters": "e",
      "phonemes": "É›",
      "verdict": "good"
    },
    {
      "letters": "gg",
      "phonemes": "g",
      "verdict": "good"
    }
  ],
  "err": null
}
