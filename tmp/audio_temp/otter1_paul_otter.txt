Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_59c3d8a3-acf0-40d6-a45e-8e6cad385e14 audiofile /Users/test/go/src/Phonemes/audio_clips/otter1_paul.wav word otter dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  2.413438



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.76 0.74 1.5

 start3, duration3, end3 =  0.78 0.33999999999999997 1.12

 Initial start, duration, end =  0.66 0.84 1.5

 Cut at: start, duration =  0.66 1.29     guard_end =  1.9500000000000002 

Running scan for frate = 125
Considering guard zh with value 1 for oh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 125 public <otter> = (((sil [((z <any_Cx_oh_z_p>) | (<any_Cx_oh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_oh_z_p>) | (<any_Cx_oh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_zh_p_z_oh_t> zh)] | [(zh <any_Cx_zh_p_z_oh_t>)]) (oh | ((<any_Cx_zh_p_z_oh_t> zh) | (zh <any_Cx_zh_p_z_oh_t>)))) (([(<any_Cx_zh_zh_t_oh> zh)] | [(zh <any_Cx_zh_zh_t_oh>)]) (t | ((<any_Cx_zh_zh_t_axr> zh) | (zh <any_Cx_zh_zh_t_axr>)))) (([(<any_Cx_zh_zh_axr_t> zh)] | [(zh <any_Cx_zh_zh_axr_t>)]) (axr | ((<any_Cx_zh_zh_axr_t> zh) | (zh <any_Cx_zh_zh_axr_t>)))) (([(<any_vowel_noSlide> ng)] | [(ng <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_ng> ng)] | [(ng <any_Cx_zh_axr_ng>)]) sil))
Running scan for frate = 105
Considering guard zh with value 1 for oh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 105 public <otter> = (((sil [((z <any_Cx_oh_z_p>) | (<any_Cx_oh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_oh_z_p>) | (<any_Cx_oh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_zh_p_z_oh_t> zh)] | [(zh <any_Cx_zh_p_z_oh_t>)]) (oh | ((<any_Cx_zh_p_z_oh_t> zh) | (zh <any_Cx_zh_p_z_oh_t>)))) (([(<any_Cx_zh_zh_t_oh> zh)] | [(zh <any_Cx_zh_zh_t_oh>)]) (t | ((<any_Cx_zh_zh_t_axr> zh) | (zh <any_Cx_zh_zh_t_axr>)))) (([(<any_Cx_zh_zh_axr_t> zh)] | [(zh <any_Cx_zh_zh_axr_t>)]) (axr | ((<any_Cx_zh_zh_axr_t> zh) | (zh <any_Cx_zh_zh_axr_t>)))) (([(<any_vowel_noSlide> f)] | [(f <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_f> f)] | [(f <any_Cx_zh_axr_f>)]) sil))
Running scan for frate = 91
Considering guard zh with value 1 for oh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 91 public <otter> = (((sil [((z <any_Cx_oh_z_p>) | (<any_Cx_oh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_oh_z_p>) | (<any_Cx_oh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_zh_p_z_oh_t> zh)] | [(zh <any_Cx_zh_p_z_oh_t>)]) (oh | ((<any_Cx_zh_p_z_oh_t> zh) | (zh <any_Cx_zh_p_z_oh_t>)))) (([(<any_Cx_zh_zh_t_oh> zh)] | [(zh <any_Cx_zh_zh_t_oh>)]) (t | ((<any_Cx_zh_zh_t_axr> zh) | (zh <any_Cx_zh_zh_t_axr>)))) (([(<any_Cx_zh_zh_axr_t> zh)] | [(zh <any_Cx_zh_zh_axr_t>)]) (axr | ((<any_Cx_zh_zh_axr_t> zh) | (zh <any_Cx_zh_zh_axr_t>)))) (([(<any_vowel_noSlide> f)] | [(f <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_f> f)] | [(f <any_Cx_zh_axr_f>)]) sil))
Running scan for frate = 80
Considering guard zh with value 1 for oh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 80 public <otter> = (((sil [((z <any_Cx_oh_z_p>) | (<any_Cx_oh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_oh_z_p>) | (<any_Cx_oh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_zh_p_z_oh_t> zh)] | [(zh <any_Cx_zh_p_z_oh_t>)]) (oh | ((<any_Cx_zh_p_z_oh_t> zh) | (zh <any_Cx_zh_p_z_oh_t>)))) (([(<any_Cx_zh_zh_t_oh> zh)] | [(zh <any_Cx_zh_zh_t_oh>)]) (t | ((<any_Cx_zh_zh_t_axr> zh) | (zh <any_Cx_zh_zh_t_axr>)))) (([(<any_Cx_zh_zh_axr_t> zh)] | [(zh <any_Cx_zh_zh_axr_t>)]) (axr | ((<any_Cx_zh_zh_axr_t> zh) | (zh <any_Cx_zh_zh_axr_t>)))) (([(<any_vowel_noSlide> m)] | [(m <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_m> m)] | [(m <any_Cx_zh_axr_m>)]) sil))
Running scan for frate = 72
Considering guard zh with value 1 for oh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 72 public <otter> = (((sil [((z <any_Cx_oh_z_p>) | (<any_Cx_oh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_oh_z_p>) | (<any_Cx_oh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_zh_p_z_oh_t> zh)] | [(zh <any_Cx_zh_p_z_oh_t>)]) (oh | ((<any_Cx_zh_p_z_oh_t> zh) | (zh <any_Cx_zh_p_z_oh_t>)))) (([(<any_Cx_zh_zh_t_oh> zh)] | [(zh <any_Cx_zh_zh_t_oh>)]) (t | ((<any_Cx_zh_zh_t_axr> zh) | (zh <any_Cx_zh_zh_t_axr>)))) (([(<any_Cx_zh_zh_axr_t> zh)] | [(zh <any_Cx_zh_zh_axr_t>)]) (axr | ((<any_Cx_zh_zh_axr_t> zh) | (zh <any_Cx_zh_zh_axr_t>)))) (([(<any_vowel_noSlide> m)] | [(m <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_m> m)] | [(m <any_Cx_zh_axr_m>)]) sil))

results =
{72 [{sil 0 11} {oh 12 27} {t 28 37} {axr 38 55} {sil 56 69}]}
{80 [{sil 0 13} {oh 14 31} {t 32 41} {axr 42 61} {sil 62 74}]}
{91 [{sil 0 15} {oh 16 35} {t 36 47} {axr 48 75} {sil 76 116}]}
{105 [{sil 0 18} {oh 19 41} {t 42 54} {axr 55 104} {sil 105 134}]}
{125 [{sil 0 20} {oh 21 47} {t 48 63} {axr 64 113} {sil 114 158}]}

normalised results =
{72 [{sil 0 11} {oh 17 38} {t 39 51} {axr 53 76} {sil 78 96}]}
{80 [{sil 0 13} {oh 18 39} {t 40 51} {axr 53 76} {sil 78 93}]}
{91 [{sil 0 15} {oh 18 38} {t 40 52} {axr 53 82} {sil 84 127}]}
{105 [{sil 0 18} {oh 18 39} {t 40 51} {axr 52 99} {sil 100 128}]}
{125 [{sil 0 20} {oh 17 38} {t 38 50} {axr 51 90} {sil 91 126}]}

ruleAligned = [{{oh 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{t 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{axr 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {oh 17 38} {t 39 51} {axr 53 76} {sil 78 78}]}
{80 [{sil 0 0} {oh 18 39} {t 40 51} {axr 53 76} {sil 78 78}]}
{91 [{sil 0 0} {oh 18 38} {t 40 52} {axr 53 82} {sil 84 84}]}
{105 [{sil 0 0} {oh 18 39} {t 40 51} {axr 52 99} {sil 100 100}]}
{125 [{sil 0 0} {oh 17 38} {t 38 50} {axr 51 90} {sil 91 91}]}

timeAligned = [{{oh 18 38} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{t 40 51} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{axr 53 82} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 38
i, iTime, newITime, timeStartFrom = 2 1 2 50
combinedVerdict    = [{oh 0} {t 0} {axr 0}]
ruleAlignedVerdict = [{oh 0} {t 0} {axr 0}]

score->
+2 for oh
+2 for t
+2 for axr
score<-: 11
testPronounce oh good t good axr good
publish->
phonsToAlphas = [{[oh] o} {[t] tt} {[axr] er}]
getVerdict<-:new {o [oh] 0}
getVerdict<-:new {tt [t] 0}
getVerdict<-:new {er [axr] 0}
lettersVerdicts = [{o [oh] 0} {tt [t] 0} {er [axr] 0}]
publish<-
{
  "word": "otter",
  "results": [
    {
      "letters": "o",
      "phonemes": "ɒ",
      "verdict": "good"
    },
    {
      "letters": "tt",
      "phonemes": "t",
      "verdict": "good"
    },
    {
      "letters": "er",
      "phonemes": "əɹ",
      "verdict": "good"
    }
  ],
  "err": null
}
