Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_b4dab6d6-c3ff-47f1-8bed-7b9239ed7105 audiofile /Users/test/go/src/Phonemes/audio_clips/deadpan1_b_colin.wav word bedpan dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  1.614812



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.54 0.9 1.44

 start3, duration3, end3 =  0.54 0.82 1.3599999999999999

 Initial start, duration, end =  0.44000000000000006 0.9999999999999999 1.44

 Cut at: start, duration =  0.44000000000000006 1.1548119999999997     guard_end =  1.5948119999999997 

Running scan for frate = 125
Considering guard s with value 1 for b ...
Considering guard zh with value 1 for b ...
Considering guard jh with value 1 for b ...
Considering guard sh with value 1 for b ...
candidateGuards = map[jh:true s:true sh:true zh:true]
Picking guard, s

Considering guard sh with value 3 for eh ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard w with value 4 for d ...
candidateGuards = map[w:true]
Picking guard, w

Considering guard ng with value 10 for p ...
candidateGuards = map[ng:true]
Picking guard, ng

Considering guard zh with value 2 for ae ...
Considering guard jh with value 2 for ae ...
candidateGuards = map[jh:true zh:true]
Picking guard, zh

Considering guard zh with value 0.8 for n ...
Considering guard sh with value 0.8 for n ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh

frate, target rule = 125 public <bedpan> = (((sil [((d <any_Cx_b_d_hh>) | (<any_Cx_b_d_hh> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil hh (sil [((d <any_Cx_b_d_hh>) | (<any_Cx_b_d_hh> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_s_hh_d_b> s)] | [(s <any_Cx_s_hh_d_b>)]) (b | ((<any_Cx_s_hh_d_b> s) | (s <any_Cx_s_hh_d_b>)))) ((([(<any_Vx_sh_s_eh_noSlide> sh)] | [(sh <any_Vx_sh_s_eh_noSlide>)]) ([(<any_Cx_sh_s_d_b> sh)] | [(sh <any_Cx_sh_s_d_b>)])) (eh | ((<any_Vx_sh_s_eh_noSlide> sh) | (sh <any_Vx_sh_s_eh_noSlide>)))) (([(<any_Cx_w_sh_d_p> w)] | [(w <any_Cx_w_sh_d_p>)]) (d | ((<any_Cx_w_sh_d_p> w) | (w <any_Cx_w_sh_d_p>)))) (([(<any_Cx_ng_w_p_d> ng)] | [(ng <any_Cx_ng_w_p_d>)]) (p | ((<any_Cx_ng_w_p_d> ng) | (ng <any_Cx_ng_w_p_d>)))) ((([(<any_Vx_zh_ng_ae_noSlide> zh)] | [(zh <any_Vx_zh_ng_ae_noSlide>)]) ([(<any_Cx_zh_ng_n_p> zh)] | [(zh <any_Cx_zh_ng_n_p>)])) (ae | ((<any_Vx_zh_ng_ae_noSlide> zh) | (zh <any_Vx_zh_ng_ae_noSlide>)))) (([(<any_Cx_zh_zh_n> zh)] | [(zh <any_Cx_zh_zh_n>)]) (n | ((<any_Cx_zh_zh_n> zh) | (zh <any_Cx_zh_zh_n>)))) (([(<any_vowel_noSlide> m)] | [(m <any_vowel_noSlide>)]) ([(<any_Cx_zh_n_m> m)] | [(m <any_Cx_zh_n_m>)]) sil))
Running scan for frate = 105
Considering guard jh with value 1 for b ...
Considering guard zh with value 1 for b ...
Considering guard sh with value 1 for b ...
Considering guard s with value 1 for b ...
candidateGuards = map[jh:true s:true sh:true zh:true]
Picking guard, sh

Considering guard sh with value 3 for eh ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard w with value 4 for d ...
candidateGuards = map[w:true]
Picking guard, w

Considering guard ng with value 10 for p ...
candidateGuards = map[ng:true]
Picking guard, ng

Considering guard jh with value 2 for ae ...
Considering guard zh with value 2 for ae ...
candidateGuards = map[jh:true zh:true]
Picking guard, zh

Considering guard zh with value 0.8 for n ...
Considering guard sh with value 0.8 for n ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh

frate, target rule = 105 public <bedpan> = (((sil [((p <any_Cx_b_p_hh>) | (<any_Cx_b_p_hh> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]) | (sil hh (sil [((p <any_Cx_b_p_hh>) | (<any_Cx_b_p_hh> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]))) (([(<any_Cx_sh_hh_p_b> sh)] | [(sh <any_Cx_sh_hh_p_b>)]) (b | ((<any_Cx_sh_hh_p_b> sh) | (sh <any_Cx_sh_hh_p_b>)))) ((([(<any_Vx_sh_sh_eh_noSlide> sh)] | [(sh <any_Vx_sh_sh_eh_noSlide>)]) ([(<any_Cx_sh_sh_d_b> sh)] | [(sh <any_Cx_sh_sh_d_b>)])) (eh | ((<any_Vx_sh_sh_eh_noSlide> sh) | (sh <any_Vx_sh_sh_eh_noSlide>)))) (([(<any_Cx_w_sh_d_p> w)] | [(w <any_Cx_w_sh_d_p>)]) (d | ((<any_Cx_w_sh_d_p> w) | (w <any_Cx_w_sh_d_p>)))) (([(<any_Cx_ng_w_p_d> ng)] | [(ng <any_Cx_ng_w_p_d>)]) (p | ((<any_Cx_ng_w_p_d> ng) | (ng <any_Cx_ng_w_p_d>)))) ((([(<any_Vx_zh_ng_ae_noSlide> zh)] | [(zh <any_Vx_zh_ng_ae_noSlide>)]) ([(<any_Cx_zh_ng_n_p> zh)] | [(zh <any_Cx_zh_ng_n_p>)])) (ae | ((<any_Vx_zh_ng_ae_noSlide> zh) | (zh <any_Vx_zh_ng_ae_noSlide>)))) (([(<any_Cx_zh_zh_n> zh)] | [(zh <any_Cx_zh_zh_n>)]) (n | ((<any_Cx_zh_zh_n> zh) | (zh <any_Cx_zh_zh_n>)))) (([(<any_vowel_noSlide> m)] | [(m <any_vowel_noSlide>)]) ([(<any_Cx_zh_n_m> m)] | [(m <any_Cx_zh_n_m>)]) sil))
Running scan for frate = 91
Considering guard jh with value 1 for b ...
Considering guard zh with value 1 for b ...
Considering guard s with value 1 for b ...
Considering guard sh with value 1 for b ...
candidateGuards = map[jh:true s:true sh:true zh:true]
Picking guard, sh

Considering guard sh with value 3 for eh ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard w with value 4 for d ...
candidateGuards = map[w:true]
Picking guard, w

Considering guard ng with value 10 for p ...
candidateGuards = map[ng:true]
Picking guard, ng

Considering guard zh with value 2 for ae ...
Considering guard jh with value 2 for ae ...
candidateGuards = map[jh:true zh:true]
Picking guard, zh

Considering guard sh with value 0.8 for n ...
Considering guard zh with value 0.8 for n ...
candidateGuards = map[sh:true zh:true]
Picking guard, sh

frate, target rule = 91 public <bedpan> = (((sil [((hh <any_Cx_b_hh_hh>) | (<any_Cx_b_hh_hh> hh))] [((hh <any_vowel_noSlide>) | (<any_vowel_noSlide> hh))]) | (sil hh (sil [((hh <any_Cx_b_hh_hh>) | (<any_Cx_b_hh_hh> hh))] [((hh <any_vowel_noSlide>) | (<any_vowel_noSlide> hh))]))) (([(<any_Cx_sh_hh_hh_b> sh)] | [(sh <any_Cx_sh_hh_hh_b>)]) (b | ((<any_Cx_sh_hh_hh_b> sh) | (sh <any_Cx_sh_hh_hh_b>)))) ((([(<any_Vx_sh_sh_eh_noSlide> sh)] | [(sh <any_Vx_sh_sh_eh_noSlide>)]) ([(<any_Cx_sh_sh_d_b> sh)] | [(sh <any_Cx_sh_sh_d_b>)])) (eh | ((<any_Vx_sh_sh_eh_noSlide> sh) | (sh <any_Vx_sh_sh_eh_noSlide>)))) (([(<any_Cx_w_sh_d_p> w)] | [(w <any_Cx_w_sh_d_p>)]) (d | ((<any_Cx_w_sh_d_p> w) | (w <any_Cx_w_sh_d_p>)))) (([(<any_Cx_ng_w_p_d> ng)] | [(ng <any_Cx_ng_w_p_d>)]) (p | ((<any_Cx_ng_w_p_d> ng) | (ng <any_Cx_ng_w_p_d>)))) ((([(<any_Vx_zh_ng_ae_noSlide> zh)] | [(zh <any_Vx_zh_ng_ae_noSlide>)]) ([(<any_Cx_zh_ng_n_p> zh)] | [(zh <any_Cx_zh_ng_n_p>)])) (ae | ((<any_Vx_zh_ng_ae_noSlide> zh) | (zh <any_Vx_zh_ng_ae_noSlide>)))) (([(<any_Cx_sh_zh_n> sh)] | [(sh <any_Cx_sh_zh_n>)]) (n | ((<any_Cx_sh_zh_n> sh) | (sh <any_Cx_sh_zh_n>)))) (([(<any_vowel_noSlide> z)] | [(z <any_vowel_noSlide>)]) ([(<any_Cx_sh_n_z> z)] | [(z <any_Cx_sh_n_z>)]) sil))
Running scan for frate = 80
Considering guard zh with value 1 for b ...
Considering guard jh with value 1 for b ...
Considering guard s with value 1 for b ...
Considering guard sh with value 1 for b ...
candidateGuards = map[jh:true s:true sh:true zh:true]
Picking guard, zh

Considering guard sh with value 3 for eh ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard w with value 4 for d ...
candidateGuards = map[w:true]
Picking guard, w

Considering guard ng with value 10 for p ...
candidateGuards = map[ng:true]
Picking guard, ng

Considering guard jh with value 2 for ae ...
Considering guard zh with value 2 for ae ...
candidateGuards = map[jh:true zh:true]
Picking guard, zh

Considering guard zh with value 0.8 for n ...
Considering guard sh with value 0.8 for n ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh

frate, target rule = 80 public <bedpan> = (((sil [((f <any_Cx_b_f_hh>) | (<any_Cx_b_f_hh> f))] [((f <any_vowel_noSlide>) | (<any_vowel_noSlide> f))]) | (sil hh (sil [((f <any_Cx_b_f_hh>) | (<any_Cx_b_f_hh> f))] [((f <any_vowel_noSlide>) | (<any_vowel_noSlide> f))]))) (([(<any_Cx_zh_hh_f_b> zh)] | [(zh <any_Cx_zh_hh_f_b>)]) (b | ((<any_Cx_zh_hh_f_b> zh) | (zh <any_Cx_zh_hh_f_b>)))) ((([(<any_Vx_sh_zh_eh_noSlide> sh)] | [(sh <any_Vx_sh_zh_eh_noSlide>)]) ([(<any_Cx_sh_zh_d_b> sh)] | [(sh <any_Cx_sh_zh_d_b>)])) (eh | ((<any_Vx_sh_zh_eh_noSlide> sh) | (sh <any_Vx_sh_zh_eh_noSlide>)))) (([(<any_Cx_w_sh_d_p> w)] | [(w <any_Cx_w_sh_d_p>)]) (d | ((<any_Cx_w_sh_d_p> w) | (w <any_Cx_w_sh_d_p>)))) (([(<any_Cx_ng_w_p_d> ng)] | [(ng <any_Cx_ng_w_p_d>)]) (p | ((<any_Cx_ng_w_p_d> ng) | (ng <any_Cx_ng_w_p_d>)))) ((([(<any_Vx_zh_ng_ae_noSlide> zh)] | [(zh <any_Vx_zh_ng_ae_noSlide>)]) ([(<any_Cx_zh_ng_n_p> zh)] | [(zh <any_Cx_zh_ng_n_p>)])) (ae | ((<any_Vx_zh_ng_ae_noSlide> zh) | (zh <any_Vx_zh_ng_ae_noSlide>)))) (([(<any_Cx_zh_zh_n> zh)] | [(zh <any_Cx_zh_zh_n>)]) (n | ((<any_Cx_zh_zh_n> zh) | (zh <any_Cx_zh_zh_n>)))) (([(<any_vowel_noSlide> ng)] | [(ng <any_vowel_noSlide>)]) ([(<any_Cx_zh_n_ng> ng)] | [(ng <any_Cx_zh_n_ng>)]) sil))
Running scan for frate = 72
Considering guard sh with value 1 for b ...
Considering guard jh with value 1 for b ...
Considering guard zh with value 1 for b ...
Considering guard s with value 1 for b ...
candidateGuards = map[jh:true s:true sh:true zh:true]
Picking guard, sh

Considering guard sh with value 3 for eh ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard w with value 4 for d ...
candidateGuards = map[w:true]
Picking guard, w

Considering guard ng with value 10 for p ...
candidateGuards = map[ng:true]
Picking guard, ng

Considering guard zh with value 2 for ae ...
Considering guard jh with value 2 for ae ...
candidateGuards = map[jh:true zh:true]
Picking guard, zh

Considering guard zh with value 0.8 for n ...
Considering guard sh with value 0.8 for n ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh

frate, target rule = 72 public <bedpan> = (((sil [((hh <any_Cx_b_hh_hh>) | (<any_Cx_b_hh_hh> hh))] [((hh <any_vowel_noSlide>) | (<any_vowel_noSlide> hh))]) | (sil hh (sil [((hh <any_Cx_b_hh_hh>) | (<any_Cx_b_hh_hh> hh))] [((hh <any_vowel_noSlide>) | (<any_vowel_noSlide> hh))]))) (([(<any_Cx_sh_hh_hh_b> sh)] | [(sh <any_Cx_sh_hh_hh_b>)]) (b | ((<any_Cx_sh_hh_hh_b> sh) | (sh <any_Cx_sh_hh_hh_b>)))) ((([(<any_Vx_sh_sh_eh_noSlide> sh)] | [(sh <any_Vx_sh_sh_eh_noSlide>)]) ([(<any_Cx_sh_sh_d_b> sh)] | [(sh <any_Cx_sh_sh_d_b>)])) (eh | ((<any_Vx_sh_sh_eh_noSlide> sh) | (sh <any_Vx_sh_sh_eh_noSlide>)))) (([(<any_Cx_w_sh_d_p> w)] | [(w <any_Cx_w_sh_d_p>)]) (d | ((<any_Cx_w_sh_d_p> w) | (w <any_Cx_w_sh_d_p>)))) (([(<any_Cx_ng_w_p_d> ng)] | [(ng <any_Cx_ng_w_p_d>)]) (p | ((<any_Cx_ng_w_p_d> ng) | (ng <any_Cx_ng_w_p_d>)))) ((([(<any_Vx_zh_ng_ae_noSlide> zh)] | [(zh <any_Vx_zh_ng_ae_noSlide>)]) ([(<any_Cx_zh_ng_n_p> zh)] | [(zh <any_Cx_zh_ng_n_p>)])) (ae | ((<any_Vx_zh_ng_ae_noSlide> zh) | (zh <any_Vx_zh_ng_ae_noSlide>)))) (([(<any_Cx_zh_zh_n> zh)] | [(zh <any_Cx_zh_zh_n>)]) (n | ((<any_Cx_zh_zh_n> zh) | (zh <any_Cx_zh_zh_n>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_n_thr> thr)] | [(thr <any_Cx_zh_n_thr>)]) sil))

results =
{72 [{sil 0 11} {b 12 17} {eh 18 24} {d 25 30} {p 31 35} {ae 36 46} {n 47 55} {sil 56 80}]}
{80 [{sil 0 13} {b 14 18} {eh 19 25} {d 26 33} {p 34 39} {ae 40 51} {n 52 61} {sil 62 88}]}
{91 [{sil 0 15} {b 16 21} {eh 22 29} {d 30 38} {p 39 45} {ae 46 60} {n 61 73} {sil 74 103}]}
{105 [{sil 0 18} {b 19 24} {eh 25 36} {d 37 44} {p 45 52} {ae 53 70} {n 71 86} {sil 87 120}]}
{125 [{sil 0 21} {b 22 26} {eh 27 41} {d 42 51} {p 52 60} {ae 61 81} {n 82 101} {sil 102 141}]}

normalised results =
{72 [{sil 0 11} {b 17 24} {eh 25 33} {d 35 42} {p 43 49} {ae 50 64} {n 65 76} {sil 78 111}]}
{80 [{sil 0 13} {b 18 23} {eh 24 31} {d 33 41} {p 43 49} {ae 50 64} {n 65 76} {sil 78 110}]}
{91 [{sil 0 15} {b 18 23} {eh 24 32} {d 33 42} {p 43 49} {ae 51 66} {n 67 80} {sil 81 113}]}
{105 [{sil 0 18} {b 18 23} {eh 24 34} {d 35 42} {p 43 50} {ae 50 67} {n 68 82} {sil 83 114}]}
{125 [{sil 0 21} {b 18 21} {eh 22 33} {d 34 41} {p 42 48} {ae 49 65} {n 66 81} {sil 82 113}]}

ruleAligned = [{{b 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{eh 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{d 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]} {{p 0} [{0 4} {1 4} {2 4} {3 4} {4 4}]} {{ae 0} [{0 5} {1 5} {2 5} {3 5} {4 5}]} {{n 0} [{0 6} {1 6} {2 6} {3 6} {4 6}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {b 17 24} {eh 25 33} {d 35 42} {p 43 49} {ae 50 64} {n 65 76} {sil 78 78}]}
{80 [{sil 0 0} {b 18 23} {eh 24 31} {d 33 41} {p 43 49} {ae 50 64} {n 65 76} {sil 78 78}]}
{91 [{sil 0 0} {b 18 23} {eh 24 32} {d 33 42} {p 43 49} {ae 51 66} {n 67 80} {sil 81 81}]}
{105 [{sil 0 0} {b 18 23} {eh 24 34} {d 35 42} {p 43 50} {ae 50 67} {n 68 82} {sil 83 83}]}
{125 [{sil 0 0} {b 18 21} {eh 22 33} {d 34 41} {p 42 48} {ae 49 65} {n 66 81} {sil 82 82}]}

timeAligned = [{{b 18 23} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{eh 24 33} [{1 2} {2 2} {3 2} {4 2} {0 2}]} {{d 34 42} [{1 3} {2 3} {4 3} {0 3} {3 3}]} {{p 43 49} [{0 4} {1 4} {2 4} {3 4} {4 4}]} {{ae 50 65} [{0 5} {1 5} {3 5} {4 5} {2 5}]} {{n 66 80} [{0 6} {1 6} {4 6} {2 6} {3 6}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 21
i, iTime, newITime, timeStartFrom = 2 1 2 31
i, iTime, newITime, timeStartFrom = 3 2 3 41
i, iTime, newITime, timeStartFrom = 4 3 4 48
i, iTime, newITime, timeStartFrom = 5 4 5 64
combinedVerdict    = [{b 0} {eh 0} {d 0} {p 0} {ae 0} {n 0}]
ruleAlignedVerdict = [{b 0} {eh 0} {d 0} {p 0} {ae 0} {n 0}]

score->
+2 for b
+2 for eh
+2 for d
+2 for p
+2 for ae
+2 for n
score<-: 17
testPronounce b good eh good d good p good ae good n good
publish->
phonsToAlphas = [{[b] b} {[eh] e} {[d] d} {[p] p} {[ae] a} {[n] n}]
getVerdict<-:new {b [b] 0}
getVerdict<-:new {e [eh] 0}
getVerdict<-:new {d [d] 0}
getVerdict<-:new {p [p] 0}
getVerdict<-:new {a [ae] 0}
getVerdict<-:new {n [n] 0}
lettersVerdicts = [{b [b] 0} {e [eh] 0} {d [d] 0} {p [p] 0} {a [ae] 0} {n [n] 0}]
publish<-
{
  "word": "bedpan",
  "results": [
    {
      "letters": "b",
      "phonemes": "b",
      "verdict": "good"
    },
    {
      "letters": "e",
      "phonemes": "ɛ",
      "verdict": "good"
    },
    {
      "letters": "d",
      "phonemes": "d",
      "verdict": "good"
    },
    {
      "letters": "p",
      "phonemes": "p",
      "verdict": "good"
    },
    {
      "letters": "a",
      "phonemes": "æ",
      "verdict": "good"
    },
    {
      "letters": "n",
      "phonemes": "n",
      "verdict": "good"
    }
  ],
  "err": null
}
