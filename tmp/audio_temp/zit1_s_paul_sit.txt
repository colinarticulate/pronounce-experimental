Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_3114ede0-ce47-4172-a869-463d59a13cbb audiofile /Users/test/go/src/Phonemes/audio_clips/zit1_s_paul.wav word sit dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  2.111562



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.72 0.76 1.48

 start3, duration3, end3 =  0.72 0.66 1.38

 Initial start, duration, end =  0.62 0.86 1.48

 Cut at: start, duration =  0.62 1.31     guard_end =  1.9300000000000002 

Running scan for frate = 125
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 125 public <sit> = (((sil [((sh <any_Cx_s_sh_p>) | (<any_Cx_s_sh_p> sh))] [((sh <any_vowel_noSlide>) | (<any_vowel_noSlide> sh))]) | (sil p (sil [((sh <any_Cx_s_sh_p>) | (<any_Cx_s_sh_p> sh))] [((sh <any_vowel_noSlide>) | (<any_vowel_noSlide> sh))]))) (([(<any_Cx_l_p_sh_s> l)] | [(l <any_Cx_l_p_sh_s>)]) (s | z | ((<any_Cx_l_p_sh_s> l) | (l <any_Cx_l_p_sh_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_r_t_p> p)] | [(p <any_Cx_r_t_p>)]) sil))
Running scan for frate = 105
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 105 public <sit> = (((sil [((t <any_Cx_s_t_p>) | (<any_Cx_s_t_p> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]) | (sil p (sil [((t <any_Cx_s_t_p>) | (<any_Cx_s_t_p> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]))) (([(<any_Cx_l_p_t_s> l)] | [(l <any_Cx_l_p_t_s>)]) (s | z | ((<any_Cx_l_p_t_s> l) | (l <any_Cx_l_p_t_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_r_t_ch> ch)] | [(ch <any_Cx_r_t_ch>)]) sil))
Running scan for frate = 91
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 91 public <sit> = (((sil [((sh <any_Cx_s_sh_p>) | (<any_Cx_s_sh_p> sh))] [((sh <any_vowel_noSlide>) | (<any_vowel_noSlide> sh))]) | (sil p (sil [((sh <any_Cx_s_sh_p>) | (<any_Cx_s_sh_p> sh))] [((sh <any_vowel_noSlide>) | (<any_vowel_noSlide> sh))]))) (([(<any_Cx_l_p_sh_s> l)] | [(l <any_Cx_l_p_sh_s>)]) (s | z | ((<any_Cx_l_p_sh_s> l) | (l <any_Cx_l_p_sh_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> k)] | [(k <any_vowel_noSlide>)]) ([(<any_Cx_r_t_k> k)] | [(k <any_Cx_r_t_k>)]) sil))
Running scan for frate = 80
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 80 public <sit> = (((sil [((z <any_Cx_s_z_p>) | (<any_Cx_s_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_s_z_p>) | (<any_Cx_s_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_l_p_z_s> l)] | [(l <any_Cx_l_p_z_s>)]) (s | z | ((<any_Cx_l_p_z_s> l) | (l <any_Cx_l_p_z_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_r_t_g> g)] | [(g <any_Cx_r_t_g>)]) sil))
Running scan for frate = 72
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 72 public <sit> = (((sil [((ch <any_Cx_s_ch_p>) | (<any_Cx_s_ch_p> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil p (sil [((ch <any_Cx_s_ch_p>) | (<any_Cx_s_ch_p> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_l_p_ch_s> l)] | [(l <any_Cx_l_p_ch_s>)]) (s | z | ((<any_Cx_l_p_ch_s> l) | (l <any_Cx_l_p_ch_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_r_t_p> p)] | [(p <any_Cx_r_t_p>)]) sil))

results =
{72 [{sil 0 16} {s 17 27} {ih 28 42} {t 43 56} {sil 57 75}]}
{80 [{sil 0 18} {s 19 30} {ih 31 47} {t 48 62} {sil 63 81}]}
{91 [{sil 0 14} {l 15 22} {dh 23 37} {ih 38 55} {t 56 71} {sil 72 117}]}
{105 [{sil 0 17} {l 18 25} {dh 26 43} {ih 44 65} {t 66 82} {sil 83 136}]}
{125 [{sil 0 19} {l 20 26} {z 27 46} {ih 47 75} {t 76 97} {sil 98 160}]}

normalised results =
{72 [{sil 0 16} {s 24 38} {ih 39 58} {t 60 78} {sil 79 104}]}
{80 [{sil 0 18} {s 24 38} {ih 39 59} {t 60 78} {sil 79 101}]}
{91 [{sil 0 14} {l 16 24} {dh 25 41} {ih 42 60} {t 62 78} {sil 79 129}]}
{105 [{sil 0 17} {l 17 24} {dh 25 41} {ih 42 62} {t 63 78} {sil 79 130}]}
{125 [{sil 0 19} {l 16 21} {z 22 37} {ih 38 60} {t 61 78} {sil 78 128}]}

ruleAligned = [{{s 2} [{0 1} {1 1}]} {{l 3} [{2 1} {3 1} {4 1}]} {{ih 0} [{0 2} {1 2} {2 3} {3 3} {4 3}]} {{t 0} [{0 3} {1 3} {2 4} {3 4} {4 4}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {s 24 38} {ih 39 58} {t 60 78} {sil 79 79}]}
{80 [{sil 0 0} {s 24 38} {ih 39 59} {t 60 78} {sil 79 79}]}
{91 [{sil 0 0} {l 16 24} {dh 25 41} {ih 42 60} {t 62 78} {sil 79 79}]}
{105 [{sil 0 0} {l 17 24} {dh 25 41} {ih 42 62} {t 63 78} {sil 79 79}]}
{125 [{sil 0 0} {l 16 21} {z 22 37} {ih 38 60} {t 61 78} {sil 78 78}]}

timeAligned = [{{l 17 21} [{2 1} {3 1} {4 1}]} {{ih 39 60} [{0 2} {1 2} {4 3} {2 3} {3 3}]} {{t 61 78} [{0 3} {1 3} {4 4} {2 4} {3 4}]}]

i, iTime, newITime, timeStartFrom = 0 0 -1 0
i, iTime, newITime, timeStartFrom = 1 0 0 0
i, iTime, newITime, timeStartFrom = 2 0 1 21
i, iTime, newITime, timeStartFrom = 3 1 2 58
combinedVerdict    = [{s 2} {l 3} {ih 0} {t 0}]
ruleAlignedVerdict = [{s 2} {l 3} {ih 0} {t 0}]

score->
-2 for s
-2 for l
+2 for ih
+2 for t
score<-: 0
bestResult = {0 [{s 2} {l 3} {ih 0} {t 0}] [s ih t]}
testPronounce s missing l surprise ih good t good
publish->
phonsToAlphas = [{[s] s} {[ih] i} {[t] t}]
getVerdict<-:new {s [s] 2}
getVerdict<-:new {i [ih] 0}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{s [s] 2} {l [l] 3} {i [ih] 0} {t [t] 0}]
publish<-
{
  "word": "sit",
  "results": [
    {
      "letters": "s",
      "phonemes": "s",
      "verdict": "missing"
    },
    {
      "letters": "l",
      "phonemes": "l",
      "verdict": "surprise"
    },
    {
      "letters": "i",
      "phonemes": "Éª",
      "verdict": "good"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
