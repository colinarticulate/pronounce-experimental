Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_db66b21d-2723-4e1b-b047-1eb3cd0ccdd4 audiofile /Users/test/go/src/Phonemes/audio_clips/world1_tomo.wav word world dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  1.446312



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.5800000000000001 0.64 1.2200000000000002

 start3, duration3, end3 =  0.5800000000000001 0.58 1.1600000000000001

 Initial start, duration, end =  0.4800000000000001 0.7400000000000001 1.2200000000000002

 Cut at: start, duration =  0.4800000000000001 0.9463119999999999     guard_end =  1.426312 

Running scan for frate = 125
Considering guard sh with value 0.8 for w ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 1.6 for er ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 125 public <world> = (((sil [((d <any_Cx_w_d_p>) | (<any_Cx_w_d_p> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil p (sil [((d <any_Cx_w_d_p>) | (<any_Cx_w_d_p> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_sh_p_d_w> sh)] | [(sh <any_Cx_sh_p_d_w>)]) (w | v | ((<any_Cx_sh_p_d_w> sh) | (sh <any_Cx_sh_p_d_w>)))) ((([(<any_Vx_sh_sh_er_noSlide> sh)] | [(sh <any_Vx_sh_sh_er_noSlide>)]) ([(<any_Cx_sh_sh_l_w> sh)] | [(sh <any_Cx_sh_sh_l_w>)])) (er | ((<any_Vx_sh_sh_er_noSlide> sh) | (sh <any_Vx_sh_sh_er_noSlide>)))) (([(<any_Cx_sh_sh_l> sh)] | [(sh <any_Cx_sh_sh_l>)]) (l | ((<any_Cx_sh_sh_l_d> sh) | (sh <any_Cx_sh_sh_l_d>)))) (([(<any_Cx_sh_sh_d_l> sh)] | [(sh <any_Cx_sh_sh_d_l>)]) (d | ((<any_Cx_sh_sh_d_l> sh) | (sh <any_Cx_sh_sh_d_l>)))) (([(<any_vowel_noSlide> b)] | [(b <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_b> b)] | [(b <any_Cx_sh_d_b>)]) sil))
Running scan for frate = 105
Considering guard sh with value 0.8 for w ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 1.6 for er ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 105 public <world> = (((sil [((n <any_Cx_w_n_p>) | (<any_Cx_w_n_p> n))] [((n <any_vowel_noSlide>) | (<any_vowel_noSlide> n))]) | (sil p (sil [((n <any_Cx_w_n_p>) | (<any_Cx_w_n_p> n))] [((n <any_vowel_noSlide>) | (<any_vowel_noSlide> n))]))) (([(<any_Cx_sh_p_n_w> sh)] | [(sh <any_Cx_sh_p_n_w>)]) (w | v | ((<any_Cx_sh_p_n_w> sh) | (sh <any_Cx_sh_p_n_w>)))) ((([(<any_Vx_sh_sh_er_noSlide> sh)] | [(sh <any_Vx_sh_sh_er_noSlide>)]) ([(<any_Cx_sh_sh_l_w> sh)] | [(sh <any_Cx_sh_sh_l_w>)])) (er | ((<any_Vx_sh_sh_er_noSlide> sh) | (sh <any_Vx_sh_sh_er_noSlide>)))) (([(<any_Cx_sh_sh_l> sh)] | [(sh <any_Cx_sh_sh_l>)]) (l | ((<any_Cx_sh_sh_l_d> sh) | (sh <any_Cx_sh_sh_l_d>)))) (([(<any_Cx_sh_sh_d_l> sh)] | [(sh <any_Cx_sh_sh_d_l>)]) (d | ((<any_Cx_sh_sh_d_l> sh) | (sh <any_Cx_sh_sh_d_l>)))) (([(<any_vowel_noSlide> dh)] | [(dh <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_dh> dh)] | [(dh <any_Cx_sh_d_dh>)]) sil))
Running scan for frate = 91
Considering guard sh with value 0.8 for w ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 1.6 for er ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 91 public <world> = (((sil [((m <any_Cx_w_m_p>) | (<any_Cx_w_m_p> m))] [((m <any_vowel_noSlide>) | (<any_vowel_noSlide> m))]) | (sil p (sil [((m <any_Cx_w_m_p>) | (<any_Cx_w_m_p> m))] [((m <any_vowel_noSlide>) | (<any_vowel_noSlide> m))]))) (([(<any_Cx_sh_p_m_w> sh)] | [(sh <any_Cx_sh_p_m_w>)]) (w | v | ((<any_Cx_sh_p_m_w> sh) | (sh <any_Cx_sh_p_m_w>)))) ((([(<any_Vx_sh_sh_er_noSlide> sh)] | [(sh <any_Vx_sh_sh_er_noSlide>)]) ([(<any_Cx_sh_sh_l_w> sh)] | [(sh <any_Cx_sh_sh_l_w>)])) (er | ((<any_Vx_sh_sh_er_noSlide> sh) | (sh <any_Vx_sh_sh_er_noSlide>)))) (([(<any_Cx_sh_sh_l> sh)] | [(sh <any_Cx_sh_sh_l>)]) (l | ((<any_Cx_sh_sh_l_d> sh) | (sh <any_Cx_sh_sh_l_d>)))) (([(<any_Cx_sh_sh_d_l> sh)] | [(sh <any_Cx_sh_sh_d_l>)]) (d | ((<any_Cx_sh_sh_d_l> sh) | (sh <any_Cx_sh_sh_d_l>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_thr> thr)] | [(thr <any_Cx_sh_d_thr>)]) sil))
Running scan for frate = 80
Considering guard sh with value 0.8 for w ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 1.6 for er ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 80 public <world> = (((sil [((d <any_Cx_w_d_p>) | (<any_Cx_w_d_p> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil p (sil [((d <any_Cx_w_d_p>) | (<any_Cx_w_d_p> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_sh_p_d_w> sh)] | [(sh <any_Cx_sh_p_d_w>)]) (w | v | ((<any_Cx_sh_p_d_w> sh) | (sh <any_Cx_sh_p_d_w>)))) ((([(<any_Vx_sh_sh_er_noSlide> sh)] | [(sh <any_Vx_sh_sh_er_noSlide>)]) ([(<any_Cx_sh_sh_l_w> sh)] | [(sh <any_Cx_sh_sh_l_w>)])) (er | ((<any_Vx_sh_sh_er_noSlide> sh) | (sh <any_Vx_sh_sh_er_noSlide>)))) (([(<any_Cx_sh_sh_l> sh)] | [(sh <any_Cx_sh_sh_l>)]) (l | ((<any_Cx_sh_sh_l_d> sh) | (sh <any_Cx_sh_sh_l_d>)))) (([(<any_Cx_sh_sh_d_l> sh)] | [(sh <any_Cx_sh_sh_d_l>)]) (d | ((<any_Cx_sh_sh_d_l> sh) | (sh <any_Cx_sh_sh_d_l>)))) (([(<any_vowel_noSlide> b)] | [(b <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_b> b)] | [(b <any_Cx_sh_d_b>)]) sil))
Running scan for frate = 72
Considering guard sh with value 0.8 for w ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 1.6 for er ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 72 public <world> = (((sil [((z <any_Cx_w_z_p>) | (<any_Cx_w_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_w_z_p>) | (<any_Cx_w_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_w> sh)] | [(sh <any_Cx_sh_p_z_w>)]) (w | v | ((<any_Cx_sh_p_z_w> sh) | (sh <any_Cx_sh_p_z_w>)))) ((([(<any_Vx_sh_sh_er_noSlide> sh)] | [(sh <any_Vx_sh_sh_er_noSlide>)]) ([(<any_Cx_sh_sh_l_w> sh)] | [(sh <any_Cx_sh_sh_l_w>)])) (er | ((<any_Vx_sh_sh_er_noSlide> sh) | (sh <any_Vx_sh_sh_er_noSlide>)))) (([(<any_Cx_sh_sh_l> sh)] | [(sh <any_Cx_sh_sh_l>)]) (l | ((<any_Cx_sh_sh_l_d> sh) | (sh <any_Cx_sh_sh_l_d>)))) (([(<any_Cx_sh_sh_d_l> sh)] | [(sh <any_Cx_sh_sh_d_l>)]) (d | ((<any_Cx_sh_sh_d_l> sh) | (sh <any_Cx_sh_sh_d_l>)))) (([(<any_vowel_noSlide> dh)] | [(dh <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_dh> dh)] | [(dh <any_Cx_sh_d_dh>)]) sil))

results =
{72 [{sil 0 10} {w 11 20} {er 21 29} {sh 30 33} {g 34 38} {v 39 55} {sh 56 63} {sil 64 66}]}
{80 [{sil 0 12} {w 13 23} {er 24 33} {sh 34 37} {g 38 42} {v 43 62} {sh 63 71} {sil 72 74}]}
{91 [{sil 0 2} {sh 3 10} {v 11 13} {w 14 26} {er 27 39} {sh 40 42} {g 43 48} {v 49 70} {sh 71 81} {sil 82 84}]}
{105 [{sil 0 2} {sh 3 11} {v 12 16} {w 17 31} {er 32 45} {sh 46 49} {d 50 60} {b 61 67} {sh 68 77} {b 78 82} {sh 83 94} {sil 95 98}]}
{125 [{sil 0 19} {w 20 34} {er 35 52} {l 53 56} {d 57 90} {sil 91 115}]}

normalised results =
{72 [{sil 0 10} {w 15 28} {er 29 40} {sh 42 46} {g 47 53} {v 54 76} {sh 78 88} {sil 89 89}]}
{80 [{sil 0 12} {w 16 29} {er 30 41} {sh 43 46} {g 48 53} {v 54 78} {sh 79 89} {sil 90 90}]}
{91 [{sil 0 2} {sh 3 11} {v 12 12} {w 15 29} {er 30 43} {sh 44 44} {g 47 53} {v 54 77} {sh 78 89} {sil 90 90}]}
{105 [{sil 0 2} {sh 3 10} {v 11 15} {w 16 30} {er 30 43} {sh 44 47} {d 48 57} {b 58 64} {sh 65 73} {b 74 78} {sh 79 90} {sil 90 93}]}
{125 [{sil 0 19} {w 16 27} {er 28 42} {l 42 45} {d 46 72} {sil 73 92}]}

ruleAligned = [{{w 0} [{0 1} {1 1} {2 3} {3 3} {4 1}]} {{er 0} [{0 2} {1 2} {2 4} {3 4} {4 2}]} {{l 2} [{4 3}]} {{g 3} [{0 4} {1 4} {2 6}]} {{d 2} [{4 4}]} {{v 3} [{0 5} {1 5} {2 7}]} {{sh 3} [{0 6} {1 6} {2 8} {3 10}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {w 15 28} {er 29 40} {sh 42 42} {g 47 53} {v 54 76} {sh 78 88} {sil 89 89}]}
{80 [{sil 0 0} {w 16 29} {er 30 41} {sh 43 43} {g 48 53} {v 54 78} {sh 79 89} {sil 90 90}]}
{91 [{sil 0 0} {sh 3 11} {v 12 12} {w 15 29} {er 30 43} {sh 44 44} {g 47 53} {v 54 77} {sh 78 89} {sil 90 90}]}
{105 [{sil 0 0} {sh 3 10} {v 11 15} {w 16 30} {er 30 43} {sh 44 44} {d 48 57} {b 58 64} {sh 65 73} {b 74 78} {sh 79 90} {sil 90 90}]}
{125 [{sil 0 0} {w 16 27} {er 28 42} {l 42 45} {d 46 72} {sil 73 73}]}

timeAligned = [{{w 16 29} [{0 1} {1 1} {2 3} {3 3} {4 1}]} {{er 30 42} [{0 2} {1 2} {2 4} {3 4} {4 2}]} {{g 48 53} [{0 4} {1 4} {2 6}]} {{v 54 76} [{0 5} {1 5} {2 7}]} {{sh 79 89} [{0 6} {1 6} {2 8} {3 10}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 27
i, iTime, newITime, timeStartFrom = 2 1 -1 40
i, iTime, newITime, timeStartFrom = 3 1 2 40
i, iTime, newITime, timeStartFrom = 4 2 -1 53
i, iTime, newITime, timeStartFrom = 5 2 3 53
i, iTime, newITime, timeStartFrom = 6 3 4 76
combinedVerdict    = [{w 0} {er 0} {l 2} {g 3} {d 2} {v 3} {sh 3}]
ruleAlignedVerdict = [{w 0} {er 0} {l 2} {g 3} {d 2} {v 3} {sh 3}]

score->
+2 for w
+2 for er
-2 for l
-2 for g
-2 for d
-2 for v
-2 for sh
score<-: -6
bestResult = {-6 [{w 0} {er 0} {l 2} {g 3} {d 2} {v 3} {sh 3}] [w er l d]}
testPronounce w good er good l missing g surprise d missing v surprise sh surprise
publish->
phonsToAlphas = [{[w] w} {[er] or} {[l] l} {[d] d}]
getVerdict<-:new {w [w] 0}
getVerdict<-:new {or [er] 0}
getVerdict<-:new {l [l] 2}
getVerdict<-:new {d [d] 2}
lettersVerdicts = [{w [w] 0} {or [er] 0} {l [l] 2} {g [g] 3} {d [d] 2} {v [v] 3} {sh [sh] 3}]
publish<-
{
  "word": "world",
  "results": [
    {
      "letters": "w",
      "phonemes": "w",
      "verdict": "good"
    },
    {
      "letters": "or",
      "phonemes": "ɜɹ",
      "verdict": "good"
    },
    {
      "letters": "l",
      "phonemes": "l",
      "verdict": "missing"
    },
    {
      "letters": "g",
      "phonemes": "g",
      "verdict": "surprise"
    },
    {
      "letters": "d",
      "phonemes": "d",
      "verdict": "missing"
    },
    {
      "letters": "v",
      "phonemes": "v",
      "verdict": "surprise"
    },
    {
      "letters": "sh",
      "phonemes": "ʃ",
      "verdict": "surprise"
    }
  ],
  "err": null
}
