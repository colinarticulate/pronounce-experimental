Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_8c4a001e-16ce-483e-9033-71048e20d686 audiofile /Users/test/go/src/Phonemes/audio_clips/hardly3_paul.wav word hardly dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  2.111562



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.56 1.06 1.62

 start3, duration3, end3 =  0.64 0.7999999999999999 1.44

 Initial start, duration, end =  0.4600000000000001 1.1600000000000001 1.62

 Cut at: start, duration =  0.4600000000000001 1.61     guard_end =  2.0700000000000003 

Running scan for frate = 125
Considering guard z with value 1 for hh ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard ng with value 8 for aa ...
Considering guard zh with value 8 for aa ...
Considering guard ch with value 8 for aa ...
Considering guard s with value 8 for aa ...
Considering guard sh with value 8 for aa ...
candidateGuards = map[ch:true ng:true s:true sh:true zh:true]
Picking guard, ng

Considering guard sh with value 6 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 1 for iy ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 125 public <hardly> = (((sil [((z <any_Cx_hh_z_b>) | (<any_Cx_hh_z_b> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil b (sil [((z <any_Cx_hh_z_b>) | (<any_Cx_hh_z_b> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_z_b_z_hh> z)] | [(z <any_Cx_z_b_z_hh>)]) (hh | ((<any_Cx_z_b_z_hh> z) | (z <any_Cx_z_b_z_hh>)))) ((([(<any_Vx_ng_z_aa_noSlide> ng)] | [(ng <any_Vx_ng_z_aa_noSlide>)]) ([(<any_Cx_ng_z_d_hh> ng)] | [(ng <any_Cx_ng_z_d_hh>)])) (aa | ((<any_Vx_ng_z_aa_noSlide> ng) | (ng <any_Vx_ng_z_aa_noSlide>)))) (([(<any_Cx_sh_ng_d_l> sh)] | [(sh <any_Cx_sh_ng_d_l>)]) (d | ((<any_Cx_sh_ng_d_l> sh) | (sh <any_Cx_sh_ng_d_l>)))) (([(<any_Cx_sh_sh_l_d> sh)] | [(sh <any_Cx_sh_sh_l_d>)]) (l | ((<any_Cx_sh_sh_l_d> sh) | (sh <any_Cx_sh_sh_l_d>)))) ((([(<any_Vx_sh_sh_iy_noSlide> sh)] | [(sh <any_Vx_sh_sh_iy_noSlide>)]) ([(<any_Cx_sh_sh_l> sh)] | [(sh <any_Cx_sh_sh_l>)])) (iy | ((<any_Vx_sh_sh_iy_noSlide> sh) | (sh <any_Vx_sh_sh_iy_noSlide>)))) (([(<any_Cx_sh_iy_p> p)] | [(p <any_Cx_sh_iy_p>)]) ([(<any_Vx_sh_iy_p> p)] | [(p <any_Vx_sh_iy_p>)]) sil))
Running scan for frate = 105
Considering guard z with value 1 for hh ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard ch with value 8 for aa ...
Considering guard ng with value 8 for aa ...
Considering guard zh with value 8 for aa ...
Considering guard s with value 8 for aa ...
Considering guard sh with value 8 for aa ...
candidateGuards = map[ch:true ng:true s:true sh:true zh:true]
Picking guard, ch

Considering guard sh with value 6 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 1 for iy ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 105 public <hardly> = (((sil [((z <any_Cx_hh_z_b>) | (<any_Cx_hh_z_b> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil b (sil [((z <any_Cx_hh_z_b>) | (<any_Cx_hh_z_b> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_z_b_z_hh> z)] | [(z <any_Cx_z_b_z_hh>)]) (hh | ((<any_Cx_z_b_z_hh> z) | (z <any_Cx_z_b_z_hh>)))) ((([(<any_Vx_ch_z_aa_noSlide> ch)] | [(ch <any_Vx_ch_z_aa_noSlide>)]) ([(<any_Cx_ch_z_d_hh> ch)] | [(ch <any_Cx_ch_z_d_hh>)])) (aa | ((<any_Vx_ch_z_aa_noSlide> ch) | (ch <any_Vx_ch_z_aa_noSlide>)))) (([(<any_Cx_sh_ch_d_l> sh)] | [(sh <any_Cx_sh_ch_d_l>)]) (d | ((<any_Cx_sh_ch_d_l> sh) | (sh <any_Cx_sh_ch_d_l>)))) (([(<any_Cx_sh_sh_l_d> sh)] | [(sh <any_Cx_sh_sh_l_d>)]) (l | ((<any_Cx_sh_sh_l_d> sh) | (sh <any_Cx_sh_sh_l_d>)))) ((([(<any_Vx_sh_sh_iy_noSlide> sh)] | [(sh <any_Vx_sh_sh_iy_noSlide>)]) ([(<any_Cx_sh_sh_l> sh)] | [(sh <any_Cx_sh_sh_l>)])) (iy | ((<any_Vx_sh_sh_iy_noSlide> sh) | (sh <any_Vx_sh_sh_iy_noSlide>)))) (([(<any_Cx_sh_iy_hh> hh)] | [(hh <any_Cx_sh_iy_hh>)]) ([(<any_Vx_sh_iy_hh> hh)] | [(hh <any_Vx_sh_iy_hh>)]) sil))
Running scan for frate = 91
Considering guard z with value 1 for hh ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard s with value 8 for aa ...
Considering guard zh with value 8 for aa ...
Considering guard ng with value 8 for aa ...
Considering guard sh with value 8 for aa ...
Considering guard ch with value 8 for aa ...
candidateGuards = map[ch:true ng:true s:true sh:true zh:true]
Picking guard, ch

Considering guard sh with value 6 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 1 for iy ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 91 public <hardly> = (((sil [((z <any_Cx_hh_z_b>) | (<any_Cx_hh_z_b> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil b (sil [((z <any_Cx_hh_z_b>) | (<any_Cx_hh_z_b> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_z_b_z_hh> z)] | [(z <any_Cx_z_b_z_hh>)]) (hh | ((<any_Cx_z_b_z_hh> z) | (z <any_Cx_z_b_z_hh>)))) ((([(<any_Vx_ch_z_aa_noSlide> ch)] | [(ch <any_Vx_ch_z_aa_noSlide>)]) ([(<any_Cx_ch_z_d_hh> ch)] | [(ch <any_Cx_ch_z_d_hh>)])) (aa | ((<any_Vx_ch_z_aa_noSlide> ch) | (ch <any_Vx_ch_z_aa_noSlide>)))) (([(<any_Cx_sh_ch_d_l> sh)] | [(sh <any_Cx_sh_ch_d_l>)]) (d | ((<any_Cx_sh_ch_d_l> sh) | (sh <any_Cx_sh_ch_d_l>)))) (([(<any_Cx_sh_sh_l_d> sh)] | [(sh <any_Cx_sh_sh_l_d>)]) (l | ((<any_Cx_sh_sh_l_d> sh) | (sh <any_Cx_sh_sh_l_d>)))) ((([(<any_Vx_sh_sh_iy_noSlide> sh)] | [(sh <any_Vx_sh_sh_iy_noSlide>)]) ([(<any_Cx_sh_sh_l> sh)] | [(sh <any_Cx_sh_sh_l>)])) (iy | ((<any_Vx_sh_sh_iy_noSlide> sh) | (sh <any_Vx_sh_sh_iy_noSlide>)))) (([(<any_Cx_sh_iy_n> n)] | [(n <any_Cx_sh_iy_n>)]) ([(<any_Vx_sh_iy_n> n)] | [(n <any_Vx_sh_iy_n>)]) sil))
Running scan for frate = 80
Considering guard z with value 1 for hh ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard sh with value 8 for aa ...
Considering guard ch with value 8 for aa ...
Considering guard ng with value 8 for aa ...
Considering guard zh with value 8 for aa ...
Considering guard s with value 8 for aa ...
candidateGuards = map[ch:true ng:true s:true sh:true zh:true]
Picking guard, ng

Considering guard sh with value 6 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 1 for iy ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 80 public <hardly> = (((sil [((b <any_Cx_hh_b_b>) | (<any_Cx_hh_b_b> b))] [((b <any_vowel_noSlide>) | (<any_vowel_noSlide> b))]) | (sil b (sil [((b <any_Cx_hh_b_b>) | (<any_Cx_hh_b_b> b))] [((b <any_vowel_noSlide>) | (<any_vowel_noSlide> b))]))) (([(<any_Cx_z_b_b_hh> z)] | [(z <any_Cx_z_b_b_hh>)]) (hh | ((<any_Cx_z_b_b_hh> z) | (z <any_Cx_z_b_b_hh>)))) ((([(<any_Vx_ng_z_aa_noSlide> ng)] | [(ng <any_Vx_ng_z_aa_noSlide>)]) ([(<any_Cx_ng_z_d_hh> ng)] | [(ng <any_Cx_ng_z_d_hh>)])) (aa | ((<any_Vx_ng_z_aa_noSlide> ng) | (ng <any_Vx_ng_z_aa_noSlide>)))) (([(<any_Cx_sh_ng_d_l> sh)] | [(sh <any_Cx_sh_ng_d_l>)]) (d | ((<any_Cx_sh_ng_d_l> sh) | (sh <any_Cx_sh_ng_d_l>)))) (([(<any_Cx_sh_sh_l_d> sh)] | [(sh <any_Cx_sh_sh_l_d>)]) (l | ((<any_Cx_sh_sh_l_d> sh) | (sh <any_Cx_sh_sh_l_d>)))) ((([(<any_Vx_sh_sh_iy_noSlide> sh)] | [(sh <any_Vx_sh_sh_iy_noSlide>)]) ([(<any_Cx_sh_sh_l> sh)] | [(sh <any_Cx_sh_sh_l>)])) (iy | ((<any_Vx_sh_sh_iy_noSlide> sh) | (sh <any_Vx_sh_sh_iy_noSlide>)))) (([(<any_Cx_sh_iy_n> n)] | [(n <any_Cx_sh_iy_n>)]) ([(<any_Vx_sh_iy_n> n)] | [(n <any_Vx_sh_iy_n>)]) sil))
Running scan for frate = 72
Considering guard z with value 1 for hh ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard ch with value 8 for aa ...
Considering guard zh with value 8 for aa ...
Considering guard s with value 8 for aa ...
Considering guard sh with value 8 for aa ...
Considering guard ng with value 8 for aa ...
candidateGuards = map[ch:true ng:true s:true sh:true zh:true]
Picking guard, sh

Considering guard sh with value 6 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 1 for iy ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 72 public <hardly> = (((sil [((b <any_Cx_hh_b_b>) | (<any_Cx_hh_b_b> b))] [((b <any_vowel_noSlide>) | (<any_vowel_noSlide> b))]) | (sil b (sil [((b <any_Cx_hh_b_b>) | (<any_Cx_hh_b_b> b))] [((b <any_vowel_noSlide>) | (<any_vowel_noSlide> b))]))) (([(<any_Cx_z_b_b_hh> z)] | [(z <any_Cx_z_b_b_hh>)]) (hh | ((<any_Cx_z_b_b_hh> z) | (z <any_Cx_z_b_b_hh>)))) ((([(<any_Vx_sh_z_aa_noSlide> sh)] | [(sh <any_Vx_sh_z_aa_noSlide>)]) ([(<any_Cx_sh_z_d_hh> sh)] | [(sh <any_Cx_sh_z_d_hh>)])) (aa | ((<any_Vx_sh_z_aa_noSlide> sh) | (sh <any_Vx_sh_z_aa_noSlide>)))) (([(<any_Cx_sh_sh_d_l> sh)] | [(sh <any_Cx_sh_sh_d_l>)]) (d | ((<any_Cx_sh_sh_d_l> sh) | (sh <any_Cx_sh_sh_d_l>)))) (([(<any_Cx_sh_sh_l_d> sh)] | [(sh <any_Cx_sh_sh_l_d>)]) (l | ((<any_Cx_sh_sh_l_d> sh) | (sh <any_Cx_sh_sh_l_d>)))) ((([(<any_Vx_sh_sh_iy_noSlide> sh)] | [(sh <any_Vx_sh_sh_iy_noSlide>)]) ([(<any_Cx_sh_sh_l> sh)] | [(sh <any_Cx_sh_sh_l>)])) (iy | ((<any_Vx_sh_sh_iy_noSlide> sh) | (sh <any_Vx_sh_sh_iy_noSlide>)))) (([(<any_Cx_sh_iy_n> n)] | [(n <any_Cx_sh_iy_n>)]) ([(<any_Vx_sh_iy_n> n)] | [(n <any_Vx_sh_iy_n>)]) sil))

results =
{72 [{sil 0 8} {hh 9 21} {aa 22 39} {d 40 43} {l 44 49} {iy 50 60} {sil 61 77}]}
{80 [{sil 0 9} {hh 10 23} {aa 24 43} {d 44 47} {l 48 54} {iy 55 67} {sil 68 83}]}
{91 [{sil 0 11} {hh 12 26} {aa 27 50} {d 51 54} {l 55 62} {iy 63 66} {ey 67 77} {n 78 98} {sil 99 145}]}
{105 [{sil 0 13} {hh 14 30} {aa 31 58} {d 59 63} {l 64 71} {iy 72 100} {sil 101 168}]}
{125 [{sil 0 14} {hh 15 32} {aa 33 68} {d 69 73} {l 74 83} {iy 84 117} {sil 118 198}]}

normalised results =
{72 [{sil 0 8} {hh 13 29} {aa 31 54} {d 56 60} {l 61 68} {iy 69 83} {sil 85 107}]}
{80 [{sil 0 9} {hh 13 29} {aa 30 54} {d 55 59} {l 60 68} {iy 69 84} {sil 85 104}]}
{91 [{sil 0 11} {hh 13 29} {aa 30 55} {d 56 59} {l 60 68} {iy 69 73} {ey 74 85} {n 86 108} {sil 109 159}]}
{105 [{sil 0 13} {hh 13 29} {aa 30 55} {d 56 60} {l 61 68} {iy 69 95} {sil 96 160}]}
{125 [{sil 0 14} {hh 12 26} {aa 26 54} {d 55 58} {l 59 66} {iy 67 94} {sil 94 158}]}

ruleAligned = [{{hh 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{aa 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{d 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]} {{l 0} [{0 4} {1 4} {2 4} {3 4} {4 4}]} {{iy 0} [{0 5} {1 5} {3 5} {4 5}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {hh 13 29} {aa 31 54} {d 56 60} {l 61 68} {iy 69 83} {sil 85 85}]}
{80 [{sil 0 0} {hh 13 29} {aa 30 54} {d 55 59} {l 60 68} {iy 69 84} {sil 85 85}]}
{91 [{sil 0 0} {hh 13 29} {aa 30 55} {d 56 59} {l 60 68} {iy 69 69} {ey 74 85} {n 86 108} {sil 109 109}]}
{105 [{sil 0 0} {hh 13 29} {aa 30 55} {d 56 60} {l 61 68} {iy 69 95} {sil 96 96}]}
{125 [{sil 0 0} {hh 12 26} {aa 26 54} {d 55 58} {l 59 66} {iy 67 94} {sil 94 94}]}

timeAligned = [{{hh 13 29} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{aa 30 54} [{1 2} {2 2} {3 2} {4 2} {0 2}]} {{d 56 59} [{0 3} {1 3} {2 3} {3 3} {4 3}]} {{l 60 68} [{1 4} {2 4} {4 4} {0 4} {3 4}]} {{iy 69 84} [{0 5} {1 5} {3 5} {4 5}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 26
i, iTime, newITime, timeStartFrom = 2 1 2 54
i, iTime, newITime, timeStartFrom = 3 2 3 58
i, iTime, newITime, timeStartFrom = 4 3 4 66
combinedVerdict    = [{hh 0} {aa 0} {d 0} {l 0} {iy 0}]
ruleAlignedVerdict = [{hh 0} {aa 0} {d 0} {l 0} {iy 0}]

score->
+2 for hh
+2 for aa
+2 for d
+2 for l
+2 for iy
score<-: 15
testPronounce hh good aa good d good l good iy good
publish->
phonsToAlphas = [{[hh] h} {[aa] ar} {[d] d} {[l] l} {[iy] y}]
getVerdict<-:new {h [hh] 0}
getVerdict<-:new {ar [aa] 0}
getVerdict<-:new {d [d] 0}
getVerdict<-:new {l [l] 0}
getVerdict<-:new {y [iy] 0}
lettersVerdicts = [{h [hh] 0} {ar [aa] 0} {d [d] 0} {l [l] 0} {y [iy] 0}]
publish<-
{
  "word": "hardly",
  "results": [
    {
      "letters": "h",
      "phonemes": "h",
      "verdict": "good"
    },
    {
      "letters": "ar",
      "phonemes": "ɑ",
      "verdict": "good"
    },
    {
      "letters": "d",
      "phonemes": "d",
      "verdict": "good"
    },
    {
      "letters": "l",
      "phonemes": "l",
      "verdict": "good"
    },
    {
      "letters": "y",
      "phonemes": "iː",
      "verdict": "good"
    }
  ],
  "err": null
}
