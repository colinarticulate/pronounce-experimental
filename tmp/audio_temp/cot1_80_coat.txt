Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_5a1630b4-64c8-412f-ae3c-68207e15a6f7 audiofile /Users/test/go/src/Phonemes/audio_clips/cot1_80.wav word coat dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  1.416



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.5800000000000001 0.44000000000000006 1.02

 start3, duration3, end3 =  0.5800000000000001 0.38 0.9600000000000001

 Initial start, duration, end =  0.4800000000000001 0.5399999999999999 1.02

 Cut at: start, duration =  0.4800000000000001 0.9159999999999998     guard_end =  1.396 

Running scan for frate = 125
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 125 public <coat> = (((sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]) | (sil b (sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]))) (([(<any_Cx_z_b_t_k> z)] | [(z <any_Cx_z_b_t_k>)]) (k | d | ((<any_Cx_z_b_t_k> z) | (z <any_Cx_z_b_t_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_y_t_ch> ch)] | [(ch <any_Cx_y_t_ch>)]) sil))
Running scan for frate = 105
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 105 public <coat> = (((sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]) | (sil b (sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]))) (([(<any_Cx_z_b_t_k> z)] | [(z <any_Cx_z_b_t_k>)]) (k | d | ((<any_Cx_z_b_t_k> z) | (z <any_Cx_z_b_t_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> k)] | [(k <any_vowel_noSlide>)]) ([(<any_Cx_y_t_k> k)] | [(k <any_Cx_y_t_k>)]) sil))
Running scan for frate = 91
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 91 public <coat> = (((sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]) | (sil b (sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]))) (([(<any_Cx_z_b_t_k> z)] | [(z <any_Cx_z_b_t_k>)]) (k | d | ((<any_Cx_z_b_t_k> z) | (z <any_Cx_z_b_t_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_y_t_p> p)] | [(p <any_Cx_y_t_p>)]) sil))
Running scan for frate = 80
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 80 public <coat> = (((sil [((g <any_Cx_k_g_b>) | (<any_Cx_k_g_b> g))] [((g <any_vowel_noSlide>) | (<any_vowel_noSlide> g))]) | (sil b (sil [((g <any_Cx_k_g_b>) | (<any_Cx_k_g_b> g))] [((g <any_vowel_noSlide>) | (<any_vowel_noSlide> g))]))) (([(<any_Cx_z_b_g_k> z)] | [(z <any_Cx_z_b_g_k>)]) (k | d | ((<any_Cx_z_b_g_k> z) | (z <any_Cx_z_b_g_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_y_t_ch> ch)] | [(ch <any_Cx_y_t_ch>)]) sil))
Running scan for frate = 72
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 72 public <coat> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_z_b_ch_k> z)] | [(z <any_Cx_z_b_ch_k>)]) (k | d | ((<any_Cx_z_b_ch_k> z) | (z <any_Cx_z_b_ch_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_y_t_thr> thr)] | [(thr <any_Cx_y_t_thr>)]) sil))

results =
{72 [{sil 0 10} {k 11 18} {ow 19 28} {t 29 40} {sil 41 61}]}
{80 [{sil 0 12} {k 13 20} {ow 21 33} {t 34 47} {sil 48 72}]}
{91 [{sil 0 13} {k 14 23} {ow 24 38} {t 39 57} {p 58 67} {v 68 71} {sil 72 82}]}
{105 [{sil 0 17} {k 18 26} {oh 27 42} {y 43 45} {t 46 78} {sil 79 95}]}
{125 [{sil 0 18} {k 19 30} {ow 31 52} {t 53 91} {sil 92 111}]}

normalised results =
{72 [{sil 0 10} {k 15 25} {ow 26 39} {t 40 56} {sil 57 85}]}
{80 [{sil 0 12} {k 16 25} {ow 26 41} {t 43 59} {sil 60 90}]}
{91 [{sil 0 13} {k 15 25} {ow 26 42} {t 43 63} {p 64 74} {v 75 78} {sil 79 90}]}
{105 [{sil 0 17} {k 17 25} {oh 26 40} {y 41 41} {t 44 74} {sil 75 90}]}
{125 [{sil 0 18} {k 15 24} {ow 25 42} {t 42 73} {sil 74 89}]}

ruleAligned = [{{k 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ow 0} [{0 2} {1 2} {2 2} {4 2}]} {{t 0} [{0 3} {1 3} {2 3} {3 4} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {k 15 25} {ow 26 39} {t 40 56} {sil 57 57}]}
{80 [{sil 0 0} {k 16 25} {ow 26 41} {t 43 59} {sil 60 60}]}
{91 [{sil 0 0} {k 15 25} {ow 26 42} {t 43 63} {p 64 74} {v 75 75} {sil 79 79}]}
{105 [{sil 0 0} {k 17 25} {oh 26 40} {y 41 41} {t 44 74} {sil 75 75}]}
{125 [{sil 0 0} {k 15 24} {ow 25 42} {t 42 73} {sil 74 74}]}

timeAligned = [{{k 15 25} [{0 1} {2 1} {4 1} {1 1} {3 1}]} {{ow 26 41} [{0 2} {1 2} {2 2} {4 2}]} {{t 43 63} [{0 3} {1 3} {2 3} {4 3} {3 4}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 24
i, iTime, newITime, timeStartFrom = 2 1 2 39
combinedVerdict    = [{k 0} {ow 0} {t 0}]
ruleAlignedVerdict = [{k 0} {ow 0} {t 0}]

score->
+2 for k
+2 for ow
+2 for t
score<-: 11
testPronounce k good ow good t good
publish->
phonsToAlphas = [{[k] c} {[ow] oa} {[t] t}]
getVerdict<-:new {c [k] 0}
getVerdict<-:new {oa [ow] 0}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{c [k] 0} {oa [ow] 0} {t [t] 0}]
publish<-
{
  "word": "coat",
  "results": [
    {
      "letters": "c",
      "phonemes": "k",
      "verdict": "good"
    },
    {
      "letters": "oa",
      "phonemes": "oÊŠ",
      "verdict": "good"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
