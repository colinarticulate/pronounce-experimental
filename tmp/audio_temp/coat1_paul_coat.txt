Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_3db73553-a55e-4f1c-abd2-de2e1af8bd0d audiofile /Users/test/go/src/Phonemes/audio_clips/coat1_paul.wav word coat dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  2.018687



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.5800000000000001 0.74 1.32

 start3, duration3, end3 =  0.5800000000000001 0.56 1.1400000000000001

 Initial start, duration, end =  0.4800000000000001 0.84 1.32

 Cut at: start, duration =  0.4800000000000001 1.29     guard_end =  1.77 

Running scan for frate = 125
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 125 public <coat> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_z_b_ch_k> z)] | [(z <any_Cx_z_b_ch_k>)]) (k | d | ((<any_Cx_z_b_ch_k> z) | (z <any_Cx_z_b_ch_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> k)] | [(k <any_vowel_noSlide>)]) ([(<any_Cx_y_t_k> k)] | [(k <any_Cx_y_t_k>)]) sil))
Running scan for frate = 105
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 105 public <coat> = (((sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]) | (sil b (sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]))) (([(<any_Cx_z_b_t_k> z)] | [(z <any_Cx_z_b_t_k>)]) (k | d | ((<any_Cx_z_b_t_k> z) | (z <any_Cx_z_b_t_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> d)] | [(d <any_vowel_noSlide>)]) ([(<any_Cx_y_t_d> d)] | [(d <any_Cx_y_t_d>)]) sil))
Running scan for frate = 91
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 91 public <coat> = (((sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil b (sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_z_b_d_k> z)] | [(z <any_Cx_z_b_d_k>)]) (k | d | ((<any_Cx_z_b_d_k> z) | (z <any_Cx_z_b_d_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_y_t_ch> ch)] | [(ch <any_Cx_y_t_ch>)]) sil))
Running scan for frate = 80
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 80 public <coat> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_z_b_ch_k> z)] | [(z <any_Cx_z_b_ch_k>)]) (k | d | ((<any_Cx_z_b_ch_k> z) | (z <any_Cx_z_b_ch_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_y_t_thr> thr)] | [(thr <any_Cx_y_t_thr>)]) sil))
Running scan for frate = 72
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 72 public <coat> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_z_b_ch_k> z)] | [(z <any_Cx_z_b_ch_k>)]) (k | d | ((<any_Cx_z_b_ch_k> z) | (z <any_Cx_z_b_ch_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> k)] | [(k <any_vowel_noSlide>)]) ([(<any_Cx_y_t_k> k)] | [(k <any_Cx_y_t_k>)]) sil))

results =
{72 [{sil 0 10} {k 11 21} {ow 22 34} {t 35 55} {sil 56 73}]}
{80 [{sil 0 12} {k 13 23} {ow 24 40} {t 41 61} {sil 62 79}]}
{91 [{sil 0 14} {k 15 26} {ow 27 49} {t 50 70} {sil 71 116}]}
{105 [{sil 0 17} {k 18 31} {ow 32 56} {t 57 80} {sil 81 134}]}
{125 [{sil 0 19} {k 20 34} {ow 35 67} {t 68 92} {sil 93 158}]}

normalised results =
{72 [{sil 0 10} {k 15 29} {ow 31 47} {t 49 76} {sil 78 101}]}
{80 [{sil 0 12} {k 16 29} {ow 30 50} {t 51 76} {sil 78 99}]}
{91 [{sil 0 14} {k 16 29} {ow 30 54} {t 55 77} {sil 78 127}]}
{105 [{sil 0 17} {k 17 30} {ow 30 53} {t 54 76} {sil 77 128}]}
{125 [{sil 0 19} {k 16 27} {ow 28 54} {t 54 74} {sil 74 126}]}

ruleAligned = [{{k 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ow 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{t 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {k 15 29} {ow 31 47} {t 49 76} {sil 78 78}]}
{80 [{sil 0 0} {k 16 29} {ow 30 50} {t 51 76} {sil 78 78}]}
{91 [{sil 0 0} {k 16 29} {ow 30 54} {t 55 77} {sil 78 78}]}
{105 [{sil 0 0} {k 17 30} {ow 30 53} {t 54 76} {sil 77 77}]}
{125 [{sil 0 0} {k 16 27} {ow 28 54} {t 54 74} {sil 74 74}]}

timeAligned = [{{k 16 29} [{0 1} {1 1} {2 1} {4 1} {3 1}]} {{ow 30 53} [{1 2} {2 2} {3 2} {4 2} {0 2}]} {{t 54 76} [{0 3} {1 3} {3 3} {4 3} {2 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 27
i, iTime, newITime, timeStartFrom = 2 1 2 47
combinedVerdict    = [{k 0} {ow 0} {t 0}]
ruleAlignedVerdict = [{k 0} {ow 0} {t 0}]

score->
+2 for k
+2 for ow
+2 for t
score<-: 11
testPronounce k good ow good t good
publish->
phonsToAlphas = [{[k] c} {[ow] oa} {[t] t}]
getVerdict<-:new {c [k] 0}
getVerdict<-:new {oa [ow] 0}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{c [k] 0} {oa [ow] 0} {t [t] 0}]
publish<-
{
  "word": "coat",
  "results": [
    {
      "letters": "c",
      "phonemes": "k",
      "verdict": "good"
    },
    {
      "letters": "oa",
      "phonemes": "oÊŠ",
      "verdict": "good"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
