Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_db6d4c5c-07ea-4b59-8a5c-3d5dba81cc5c audiofile /Users/test/go/src/Phonemes/audio_clips/russia1_tressa.wav word russia dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  2.01975



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.18000000000000002 1.82 2

 start3, duration3, end3 =  0.42000000000000004 0.52 0.9400000000000001

 Initial start, duration, end =  0 2 2

 Cut at: start, duration =  0 1.9997500000000001     guard_end =  1.9997500000000001 

Running scan for frate = 125
Considering guard y with value 1 for r ...
Considering guard z with value 1 for r ...
candidateGuards = map[y:true z:true]
Picking guard, y

Considering guard y with value 2 for ah ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.2 for sh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 1.6 for axr ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 125 public <russia> = (((sil [((n <any_Cx_r_n_p>) | (<any_Cx_r_n_p> n))] [((n <any_vowel_noSlide>) | (<any_vowel_noSlide> n))]) | (sil p (sil [((n <any_Cx_r_n_p>) | (<any_Cx_r_n_p> n))] [((n <any_vowel_noSlide>) | (<any_vowel_noSlide> n))]))) (([(<any_Cx_y_p_n_r> y)] | [(y <any_Cx_y_p_n_r>)]) (r | l | w | ((<any_Cx_y_p_n_r> y) | (y <any_Cx_y_p_n_r>)))) ((([(<any_Vx_y_y_ah_noSlide> y)] | [(y <any_Vx_y_y_ah_noSlide>)]) ([(<any_Cx_y_y_sh_r> y)] | [(y <any_Cx_y_y_sh_r>)])) (ah | ((<any_Vx_y_y_ah_noSlide> y) | (y <any_Vx_y_y_ah_noSlide>)))) (([(<any_Cx_y_y_sh> y)] | [(y <any_Cx_y_y_sh>)]) (sh | ((<any_Cx_y_y_sh_axr> y) | (y <any_Cx_y_y_sh_axr>)))) (([(<any_Cx_y_y_axr_sh> y)] | [(y <any_Cx_y_y_axr_sh>)]) (axr | ((<any_Cx_y_y_axr_sh> y) | (y <any_Cx_y_y_axr_sh>)))) (([(<any_vowel_noSlide> f)] | [(f <any_vowel_noSlide>)]) ([(<any_Cx_y_axr_f> f)] | [(f <any_Cx_y_axr_f>)]) sil))
Running scan for frate = 105
Considering guard y with value 1 for r ...
Considering guard z with value 1 for r ...
candidateGuards = map[y:true z:true]
Picking guard, y

Considering guard y with value 2 for ah ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.2 for sh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 1.6 for axr ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 105 public <russia> = (((sil [((n <any_Cx_r_n_p>) | (<any_Cx_r_n_p> n))] [((n <any_vowel_noSlide>) | (<any_vowel_noSlide> n))]) | (sil p (sil [((n <any_Cx_r_n_p>) | (<any_Cx_r_n_p> n))] [((n <any_vowel_noSlide>) | (<any_vowel_noSlide> n))]))) (([(<any_Cx_y_p_n_r> y)] | [(y <any_Cx_y_p_n_r>)]) (r | l | w | ((<any_Cx_y_p_n_r> y) | (y <any_Cx_y_p_n_r>)))) ((([(<any_Vx_y_y_ah_noSlide> y)] | [(y <any_Vx_y_y_ah_noSlide>)]) ([(<any_Cx_y_y_sh_r> y)] | [(y <any_Cx_y_y_sh_r>)])) (ah | ((<any_Vx_y_y_ah_noSlide> y) | (y <any_Vx_y_y_ah_noSlide>)))) (([(<any_Cx_y_y_sh> y)] | [(y <any_Cx_y_y_sh>)]) (sh | ((<any_Cx_y_y_sh_axr> y) | (y <any_Cx_y_y_sh_axr>)))) (([(<any_Cx_y_y_axr_sh> y)] | [(y <any_Cx_y_y_axr_sh>)]) (axr | ((<any_Cx_y_y_axr_sh> y) | (y <any_Cx_y_y_axr_sh>)))) (([(<any_vowel_noSlide> f)] | [(f <any_vowel_noSlide>)]) ([(<any_Cx_y_axr_f> f)] | [(f <any_Cx_y_axr_f>)]) sil))
Running scan for frate = 91
Considering guard y with value 1 for r ...
Considering guard z with value 1 for r ...
candidateGuards = map[y:true z:true]
Picking guard, y

Considering guard y with value 2 for ah ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.2 for sh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 1.6 for axr ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 91 public <russia> = (((sil [((hh <any_Cx_r_hh_p>) | (<any_Cx_r_hh_p> hh))] [((hh <any_vowel_noSlide>) | (<any_vowel_noSlide> hh))]) | (sil p (sil [((hh <any_Cx_r_hh_p>) | (<any_Cx_r_hh_p> hh))] [((hh <any_vowel_noSlide>) | (<any_vowel_noSlide> hh))]))) (([(<any_Cx_y_p_hh_r> y)] | [(y <any_Cx_y_p_hh_r>)]) (r | l | w | ((<any_Cx_y_p_hh_r> y) | (y <any_Cx_y_p_hh_r>)))) ((([(<any_Vx_y_y_ah_noSlide> y)] | [(y <any_Vx_y_y_ah_noSlide>)]) ([(<any_Cx_y_y_sh_r> y)] | [(y <any_Cx_y_y_sh_r>)])) (ah | ((<any_Vx_y_y_ah_noSlide> y) | (y <any_Vx_y_y_ah_noSlide>)))) (([(<any_Cx_y_y_sh> y)] | [(y <any_Cx_y_y_sh>)]) (sh | ((<any_Cx_y_y_sh_axr> y) | (y <any_Cx_y_y_sh_axr>)))) (([(<any_Cx_y_y_axr_sh> y)] | [(y <any_Cx_y_y_axr_sh>)]) (axr | ((<any_Cx_y_y_axr_sh> y) | (y <any_Cx_y_y_axr_sh>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_y_axr_thr> thr)] | [(thr <any_Cx_y_axr_thr>)]) sil))
Running scan for frate = 80
Considering guard y with value 1 for r ...
Considering guard z with value 1 for r ...
candidateGuards = map[y:true z:true]
Picking guard, z

Considering guard y with value 2 for ah ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.2 for sh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 1.6 for axr ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 80 public <russia> = (((sil [((m <any_Cx_r_m_p>) | (<any_Cx_r_m_p> m))] [((m <any_vowel_noSlide>) | (<any_vowel_noSlide> m))]) | (sil p (sil [((m <any_Cx_r_m_p>) | (<any_Cx_r_m_p> m))] [((m <any_vowel_noSlide>) | (<any_vowel_noSlide> m))]))) (([(<any_Cx_z_p_m_r> z)] | [(z <any_Cx_z_p_m_r>)]) (r | l | w | ((<any_Cx_z_p_m_r> z) | (z <any_Cx_z_p_m_r>)))) ((([(<any_Vx_y_z_ah_noSlide> y)] | [(y <any_Vx_y_z_ah_noSlide>)]) ([(<any_Cx_y_z_sh_r> y)] | [(y <any_Cx_y_z_sh_r>)])) (ah | ((<any_Vx_y_z_ah_noSlide> y) | (y <any_Vx_y_z_ah_noSlide>)))) (([(<any_Cx_y_y_sh> y)] | [(y <any_Cx_y_y_sh>)]) (sh | ((<any_Cx_y_y_sh_axr> y) | (y <any_Cx_y_y_sh_axr>)))) (([(<any_Cx_y_y_axr_sh> y)] | [(y <any_Cx_y_y_axr_sh>)]) (axr | ((<any_Cx_y_y_axr_sh> y) | (y <any_Cx_y_y_axr_sh>)))) (([(<any_vowel_noSlide> ng)] | [(ng <any_vowel_noSlide>)]) ([(<any_Cx_y_axr_ng> ng)] | [(ng <any_Cx_y_axr_ng>)]) sil))
Running scan for frate = 72
Considering guard z with value 1 for r ...
Considering guard y with value 1 for r ...
candidateGuards = map[y:true z:true]
Picking guard, z

Considering guard y with value 2 for ah ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.2 for sh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 1.6 for axr ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 72 public <russia> = (((sil [((m <any_Cx_r_m_p>) | (<any_Cx_r_m_p> m))] [((m <any_vowel_noSlide>) | (<any_vowel_noSlide> m))]) | (sil p (sil [((m <any_Cx_r_m_p>) | (<any_Cx_r_m_p> m))] [((m <any_vowel_noSlide>) | (<any_vowel_noSlide> m))]))) (([(<any_Cx_z_p_m_r> z)] | [(z <any_Cx_z_p_m_r>)]) (r | l | w | ((<any_Cx_z_p_m_r> z) | (z <any_Cx_z_p_m_r>)))) ((([(<any_Vx_y_z_ah_noSlide> y)] | [(y <any_Vx_y_z_ah_noSlide>)]) ([(<any_Cx_y_z_sh_r> y)] | [(y <any_Cx_y_z_sh_r>)])) (ah | ((<any_Vx_y_z_ah_noSlide> y) | (y <any_Vx_y_z_ah_noSlide>)))) (([(<any_Cx_y_y_sh> y)] | [(y <any_Cx_y_y_sh>)]) (sh | ((<any_Cx_y_y_sh_axr> y) | (y <any_Cx_y_y_sh_axr>)))) (([(<any_Cx_y_y_axr_sh> y)] | [(y <any_Cx_y_y_axr_sh>)]) (axr | ((<any_Cx_y_y_axr_sh> y) | (y <any_Cx_y_y_axr_sh>)))) (([(<any_vowel_noSlide> f)] | [(f <any_vowel_noSlide>)]) ([(<any_Cx_y_axr_f> f)] | [(f <any_Cx_y_axr_f>)]) sil))

results =
{72 [{sil 0 36} {r 37 49} {ah 50 57} {sh 58 72} {axr 73 96} {sil 97 102}]}
{80 [{sil 0 40} {r 41 55} {ah 56 63} {sh 64 80} {axr 81 98} {sil 99 111}]}
{91 [{sil 0 22} {p 23 25} {sil 26 46} {r 47 62} {ah 63 72} {ch 73 89} {y 90 92} {axr 93 147} {sil 148 180}]}
{105 [{sil 0 26} {p 27 29} {sil 30 54} {r 55 72} {ah 73 84} {ch 85 103} {y 104 107} {axr 108 166} {sil 167 209}]}
{125 [{sil 0 63} {r 64 84} {ah 85 98} {sh 99 123} {axr 124 179} {sil 180 246}]}

normalised results =
{72 [{sil 0 36} {r 51 68} {ah 69 79} {sh 81 100} {axr 101 133} {sil 135 142}]}
{80 [{sil 0 40} {r 51 69} {ah 70 79} {sh 80 100} {axr 101 123} {sil 124 139}]}
{91 [{sil 0 22} {p 25 25} {sil 29 51} {r 52 68} {ah 69 79} {ch 80 98} {y 99 99} {axr 102 162} {sil 163 198}]}
{105 [{sil 0 26} {p 26 26} {sil 29 51} {r 52 69} {ah 70 80} {ch 81 98} {y 99 102} {axr 103 158} {sil 159 199}]}
{125 [{sil 0 63} {r 51 67} {ah 68 78} {sh 79 98} {axr 99 143} {sil 144 197}]}

ruleAligned = [{{r 0} [{0 1} {1 1} {2 3} {3 3} {4 1}]} {{ah 0} [{0 2} {1 2} {2 4} {3 4} {4 2}]} {{sh 1} [{0 3} {1 3} {4 3}]} {{axr 0} [{0 4} {1 4} {2 7} {3 7} {4 4}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {r 51 68} {ah 69 79} {sh 81 100} {axr 101 133} {sil 135 135}]}
{80 [{sil 0 0} {r 51 69} {ah 70 79} {sh 80 100} {axr 101 123} {sil 124 124}]}
{91 [{sil 0 0} {p 25 25} {sil 29 29} {r 52 68} {ah 69 79} {ch 80 98} {y 99 99} {axr 102 162} {sil 163 163}]}
{105 [{sil 0 0} {p 26 26} {sil 29 29} {r 52 69} {ah 70 80} {ch 81 98} {y 99 99} {axr 103 158} {sil 159 159}]}
{125 [{sil 0 0} {r 51 67} {ah 68 78} {sh 79 98} {axr 99 143} {sil 144 144}]}

timeAligned = [{{r 51 68} [{0 1} {1 1} {4 1} {2 3} {3 3}]} {{ah 69 79} [{0 2} {2 4} {4 2} {1 2} {3 4}]} {{sh 81 98} [{0 3} {1 3} {4 3}]} {{axr 101 143} [{0 4} {1 4} {4 4} {2 7} {3 7}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 67
i, iTime, newITime, timeStartFrom = 2 1 2 78
i, iTime, newITime, timeStartFrom = 3 2 3 98
combinedVerdict    = [{r 0} {ah 0} {sh 1} {axr 0}]
ruleAlignedVerdict = [{r 0} {ah 0} {sh 1} {axr 0}]

score->
+2 for r
+2 for ah
+1 for sh
+2 for axr
score<-: 12
testPronounce r good ah good sh possible axr good
publish->
phonsToAlphas = [{[r] r} {[ah] u} {[sh] ssi} {[axr] a}]
getVerdict<-:new {r [r] 0}
getVerdict<-:new {u [ah] 0}
getVerdict<-:new {ssi [sh] 1}
getVerdict<-:new {a [axr] 0}
lettersVerdicts = [{r [r] 0} {u [ah] 0} {ssi [sh] 1} {a [axr] 0}]
publish<-
{
  "word": "russia",
  "results": [
    {
      "letters": "r",
      "phonemes": "ɹ",
      "verdict": "good"
    },
    {
      "letters": "u",
      "phonemes": "ʌ",
      "verdict": "good"
    },
    {
      "letters": "ssi",
      "phonemes": "ʃ",
      "verdict": "possible"
    },
    {
      "letters": "a",
      "phonemes": "əɹ",
      "verdict": "good"
    }
  ],
  "err": null
}
