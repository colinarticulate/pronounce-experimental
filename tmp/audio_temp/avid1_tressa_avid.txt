Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_da1e784a-32dc-4ca9-9a14-a25547052d41 audiofile /Users/test/go/src/Phonemes/audio_clips/avid1_tressa.wav word avid dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  1.257812



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.33999999999999997 0.72 1.06

 start3, duration3, end3 =  0.33999999999999997 0.6799999999999999 1.02

 Initial start, duration, end =  0.23999999999999996 0.8200000000000001 1.06

 Cut at: start, duration =  0.23999999999999996 0.9978119999999999     guard_end =  1.237812 

Running scan for frate = 125
Considering guard zh with value 1 for ae ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 4 for v ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 8 for ih ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 125 public <avid> = (((sil [((z <any_Vx_ae_z_p_noSlide>) | (<any_Vx_ae_z_p_noSlide> z))] [((z <any_Cx_ae_z_p>) | (<any_Cx_ae_z_p> z))]) | (sil p (sil [((z <any_Vx_ae_z_p_noSlide>) | (<any_Vx_ae_z_p_noSlide> z))] [((z <any_Cx_ae_z_p>) | (<any_Cx_ae_z_p> z))]))) ((([(<any_Vx_zh_p_z_ae_noSlide> zh)] | [(zh <any_Vx_zh_p_z_ae_noSlide>)]) ([(<any_Cx_zh_p_z_v> zh)] | [(zh <any_Cx_zh_p_z_v>)])) (ae | ((<any_Vx_zh_p_z_ae_noSlide> zh) | (zh <any_Vx_zh_p_z_ae_noSlide>)))) (([(<any_Cx_zh_zh_v> zh)] | [(zh <any_Cx_zh_zh_v>)]) (v | ((<any_Cx_zh_zh_v> zh) | (zh <any_Cx_zh_zh_v>)))) ((([(<any_Vx_zh_zh_ih_noSlide> zh)] | [(zh <any_Vx_zh_zh_ih_noSlide>)]) ([(<any_Cx_zh_zh_d_v> zh)] | [(zh <any_Cx_zh_zh_d_v>)])) (ih | ((<any_Vx_zh_zh_ih_noSlide> zh) | (zh <any_Vx_zh_zh_ih_noSlide>)))) (([(<any_Cx_sh_zh_d> sh)] | [(sh <any_Cx_sh_zh_d>)]) (d | ((<any_Cx_sh_zh_d> sh) | (sh <any_Cx_sh_zh_d>)))) (([(<any_vowel_noSlide> b)] | [(b <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_b> b)] | [(b <any_Cx_sh_d_b>)]) sil))
Running scan for frate = 105
Considering guard zh with value 1 for ae ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 4 for v ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 8 for ih ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 105 public <avid> = (((sil [((z <any_Vx_ae_z_p_noSlide>) | (<any_Vx_ae_z_p_noSlide> z))] [((z <any_Cx_ae_z_p>) | (<any_Cx_ae_z_p> z))]) | (sil p (sil [((z <any_Vx_ae_z_p_noSlide>) | (<any_Vx_ae_z_p_noSlide> z))] [((z <any_Cx_ae_z_p>) | (<any_Cx_ae_z_p> z))]))) ((([(<any_Vx_zh_p_z_ae_noSlide> zh)] | [(zh <any_Vx_zh_p_z_ae_noSlide>)]) ([(<any_Cx_zh_p_z_v> zh)] | [(zh <any_Cx_zh_p_z_v>)])) (ae | ((<any_Vx_zh_p_z_ae_noSlide> zh) | (zh <any_Vx_zh_p_z_ae_noSlide>)))) (([(<any_Cx_zh_zh_v> zh)] | [(zh <any_Cx_zh_zh_v>)]) (v | ((<any_Cx_zh_zh_v> zh) | (zh <any_Cx_zh_zh_v>)))) ((([(<any_Vx_zh_zh_ih_noSlide> zh)] | [(zh <any_Vx_zh_zh_ih_noSlide>)]) ([(<any_Cx_zh_zh_d_v> zh)] | [(zh <any_Cx_zh_zh_d_v>)])) (ih | ((<any_Vx_zh_zh_ih_noSlide> zh) | (zh <any_Vx_zh_zh_ih_noSlide>)))) (([(<any_Cx_sh_zh_d> sh)] | [(sh <any_Cx_sh_zh_d>)]) (d | ((<any_Cx_sh_zh_d> sh) | (sh <any_Cx_sh_zh_d>)))) (([(<any_vowel_noSlide> b)] | [(b <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_b> b)] | [(b <any_Cx_sh_d_b>)]) sil))
Running scan for frate = 91
Considering guard zh with value 1 for ae ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 4 for v ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 8 for ih ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 91 public <avid> = (((sil [((z <any_Vx_ae_z_p_noSlide>) | (<any_Vx_ae_z_p_noSlide> z))] [((z <any_Cx_ae_z_p>) | (<any_Cx_ae_z_p> z))]) | (sil p (sil [((z <any_Vx_ae_z_p_noSlide>) | (<any_Vx_ae_z_p_noSlide> z))] [((z <any_Cx_ae_z_p>) | (<any_Cx_ae_z_p> z))]))) ((([(<any_Vx_zh_p_z_ae_noSlide> zh)] | [(zh <any_Vx_zh_p_z_ae_noSlide>)]) ([(<any_Cx_zh_p_z_v> zh)] | [(zh <any_Cx_zh_p_z_v>)])) (ae | ((<any_Vx_zh_p_z_ae_noSlide> zh) | (zh <any_Vx_zh_p_z_ae_noSlide>)))) (([(<any_Cx_zh_zh_v> zh)] | [(zh <any_Cx_zh_zh_v>)]) (v | ((<any_Cx_zh_zh_v> zh) | (zh <any_Cx_zh_zh_v>)))) ((([(<any_Vx_zh_zh_ih_noSlide> zh)] | [(zh <any_Vx_zh_zh_ih_noSlide>)]) ([(<any_Cx_zh_zh_d_v> zh)] | [(zh <any_Cx_zh_zh_d_v>)])) (ih | ((<any_Vx_zh_zh_ih_noSlide> zh) | (zh <any_Vx_zh_zh_ih_noSlide>)))) (([(<any_Cx_sh_zh_d> sh)] | [(sh <any_Cx_sh_zh_d>)]) (d | ((<any_Cx_sh_zh_d> sh) | (sh <any_Cx_sh_zh_d>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_thr> thr)] | [(thr <any_Cx_sh_d_thr>)]) sil))
Running scan for frate = 80
Considering guard zh with value 1 for ae ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 4 for v ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 8 for ih ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 80 public <avid> = (((sil [((z <any_Vx_ae_z_p_noSlide>) | (<any_Vx_ae_z_p_noSlide> z))] [((z <any_Cx_ae_z_p>) | (<any_Cx_ae_z_p> z))]) | (sil p (sil [((z <any_Vx_ae_z_p_noSlide>) | (<any_Vx_ae_z_p_noSlide> z))] [((z <any_Cx_ae_z_p>) | (<any_Cx_ae_z_p> z))]))) ((([(<any_Vx_zh_p_z_ae_noSlide> zh)] | [(zh <any_Vx_zh_p_z_ae_noSlide>)]) ([(<any_Cx_zh_p_z_v> zh)] | [(zh <any_Cx_zh_p_z_v>)])) (ae | ((<any_Vx_zh_p_z_ae_noSlide> zh) | (zh <any_Vx_zh_p_z_ae_noSlide>)))) (([(<any_Cx_zh_zh_v> zh)] | [(zh <any_Cx_zh_zh_v>)]) (v | ((<any_Cx_zh_zh_v> zh) | (zh <any_Cx_zh_zh_v>)))) ((([(<any_Vx_zh_zh_ih_noSlide> zh)] | [(zh <any_Vx_zh_zh_ih_noSlide>)]) ([(<any_Cx_zh_zh_d_v> zh)] | [(zh <any_Cx_zh_zh_d_v>)])) (ih | ((<any_Vx_zh_zh_ih_noSlide> zh) | (zh <any_Vx_zh_zh_ih_noSlide>)))) (([(<any_Cx_sh_zh_d> sh)] | [(sh <any_Cx_sh_zh_d>)]) (d | ((<any_Cx_sh_zh_d> sh) | (sh <any_Cx_sh_zh_d>)))) (([(<any_vowel_noSlide> b)] | [(b <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_b> b)] | [(b <any_Cx_sh_d_b>)]) sil))
Running scan for frate = 72
Considering guard zh with value 1 for ae ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 4 for v ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 8 for ih ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 72 public <avid> = (((sil [((z <any_Vx_ae_z_p_noSlide>) | (<any_Vx_ae_z_p_noSlide> z))] [((z <any_Cx_ae_z_p>) | (<any_Cx_ae_z_p> z))]) | (sil p (sil [((z <any_Vx_ae_z_p_noSlide>) | (<any_Vx_ae_z_p_noSlide> z))] [((z <any_Cx_ae_z_p>) | (<any_Cx_ae_z_p> z))]))) ((([(<any_Vx_zh_p_z_ae_noSlide> zh)] | [(zh <any_Vx_zh_p_z_ae_noSlide>)]) ([(<any_Cx_zh_p_z_v> zh)] | [(zh <any_Cx_zh_p_z_v>)])) (ae | ((<any_Vx_zh_p_z_ae_noSlide> zh) | (zh <any_Vx_zh_p_z_ae_noSlide>)))) (([(<any_Cx_zh_zh_v> zh)] | [(zh <any_Cx_zh_zh_v>)]) (v | ((<any_Cx_zh_zh_v> zh) | (zh <any_Cx_zh_zh_v>)))) ((([(<any_Vx_zh_zh_ih_noSlide> zh)] | [(zh <any_Vx_zh_zh_ih_noSlide>)]) ([(<any_Cx_zh_zh_d_v> zh)] | [(zh <any_Cx_zh_zh_d_v>)])) (ih | ((<any_Vx_zh_zh_ih_noSlide> zh) | (zh <any_Vx_zh_zh_ih_noSlide>)))) (([(<any_Cx_sh_zh_d> sh)] | [(sh <any_Cx_sh_zh_d>)]) (d | ((<any_Cx_sh_zh_d> sh) | (sh <any_Cx_sh_zh_d>)))) (([(<any_vowel_noSlide> b)] | [(b <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_b> b)] | [(b <any_Cx_sh_d_b>)]) sil))

results =
{72 [{sil 0 10} {ae 11 24} {v 25 29} {ih 30 40} {d 41 53} {sil 54 70}]}
{80 [{sil 0 11} {ae 12 28} {v 29 32} {ih 33 45} {d 46 59} {sil 60 78}]}
{91 [{sil 0 13} {ae 14 33} {v 34 37} {ih 38 52} {d 53 67} {sil 68 89}]}
{105 [{sil 0 17} {ae 18 38} {v 39 43} {ih 44 61} {d 62 76} {sil 77 103}]}
{125 [{sil 0 19} {ae 20 44} {v 45 49} {ih 50 71} {d 72 86} {sil 87 121}]}

normalised results =
{72 [{sil 0 10} {ae 15 33} {v 35 40} {ih 42 56} {d 57 74} {sil 75 97}]}
{80 [{sil 0 11} {ae 15 35} {v 36 40} {ih 41 56} {d 58 74} {sil 75 98}]}
{91 [{sil 0 13} {ae 15 36} {v 37 41} {ih 42 57} {d 58 74} {sil 75 98}]}
{105 [{sil 0 17} {ae 17 36} {v 37 41} {ih 42 58} {d 59 72} {sil 73 98}]}
{125 [{sil 0 19} {ae 16 35} {v 36 39} {ih 40 57} {d 58 69} {sil 70 97}]}

ruleAligned = [{{ae 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{v 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{ih 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]} {{d 0} [{0 4} {1 4} {2 4} {3 4} {4 4}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {ae 15 33} {v 35 40} {ih 42 56} {d 57 74} {sil 75 75}]}
{80 [{sil 0 0} {ae 15 35} {v 36 40} {ih 41 56} {d 58 74} {sil 75 75}]}
{91 [{sil 0 0} {ae 15 36} {v 37 41} {ih 42 57} {d 58 74} {sil 75 75}]}
{105 [{sil 0 0} {ae 17 36} {v 37 41} {ih 42 58} {d 59 72} {sil 73 73}]}
{125 [{sil 0 0} {ae 16 35} {v 36 39} {ih 40 57} {d 58 69} {sil 70 70}]}

timeAligned = [{{ae 15 35} [{0 1} {1 1} {2 1} {4 1} {3 1}]} {{v 36 40} [{0 2} {1 2} {4 2} {2 2} {3 2}]} {{ih 42 57} [{0 3} {1 3} {2 3} {3 3} {4 3}]} {{d 58 74} [{0 4} {1 4} {2 4} {4 4} {3 4}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 33
i, iTime, newITime, timeStartFrom = 2 1 2 39
i, iTime, newITime, timeStartFrom = 3 2 3 56
combinedVerdict    = [{ae 0} {v 0} {ih 0} {d 0}]
ruleAlignedVerdict = [{ae 0} {v 0} {ih 0} {d 0}]

score->
+2 for ae
+2 for v
+2 for ih
+2 for d
score<-: 13
testPronounce ae good v good ih good d good
publish->
phonsToAlphas = [{[ae] a} {[v] v} {[ih] i} {[d] d}]
getVerdict<-:new {a [ae] 0}
getVerdict<-:new {v [v] 0}
getVerdict<-:new {i [ih] 0}
getVerdict<-:new {d [d] 0}
lettersVerdicts = [{a [ae] 0} {v [v] 0} {i [ih] 0} {d [d] 0}]
publish<-
{
  "word": "avid",
  "results": [
    {
      "letters": "a",
      "phonemes": "æ",
      "verdict": "good"
    },
    {
      "letters": "v",
      "phonemes": "v",
      "verdict": "good"
    },
    {
      "letters": "i",
      "phonemes": "ɪ",
      "verdict": "good"
    },
    {
      "letters": "d",
      "phonemes": "d",
      "verdict": "good"
    }
  ],
  "err": null
}
