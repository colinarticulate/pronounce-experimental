Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_d1cac8d3-18cb-4b83-8415-5167e9fe913e audiofile /Users/test/go/src/Phonemes/audio_clips/time1_us_colin.wav word time dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  2.414875



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.5800000000000001 0.96 1.54

 start3, duration3, end3 =  0.5800000000000001 0.86 1.44

 Initial start, duration, end =  0.4800000000000001 1.06 1.54

 Cut at: start, duration =  0.4800000000000001 1.51     guard_end =  1.9900000000000002 

Running scan for frate = 125
Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2.4000000000000004 for ay ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard ch with value 1.4 for m ...
candidateGuards = map[ch:true]
Picking guard, ch

frate, target rule = 125 public <time> = (((sil [((g <any_Cx_t_g_p>) | (<any_Cx_t_g_p> g))] [((g <any_vowel_noSlide>) | (<any_vowel_noSlide> g))]) | (sil p (sil [((g <any_Cx_t_g_p>) | (<any_Cx_t_g_p> g))] [((g <any_vowel_noSlide>) | (<any_vowel_noSlide> g))]))) (([(<any_Cx_zh_p_g_t> zh)] | [(zh <any_Cx_zh_p_g_t>)]) (t | ((<any_Cx_zh_p_g_t> zh) | (zh <any_Cx_zh_p_g_t>)))) ((([(<any_Vx_zh_zh_ay_noSlide> zh)] | [(zh <any_Vx_zh_zh_ay_noSlide>)]) ([(<any_Cx_zh_zh_m_t> zh)] | [(zh <any_Cx_zh_zh_m_t>)])) (ay | ((<any_Vx_zh_zh_ay_noSlide> zh) | (zh <any_Vx_zh_zh_ay_noSlide>)))) (([(<any_Cx_ch_zh_m> ch)] | [(ch <any_Cx_ch_zh_m>)]) (m | ((<any_Cx_ch_zh_m> ch) | (ch <any_Cx_ch_zh_m>)))) (([(<any_vowel_noSlide> b)] | [(b <any_vowel_noSlide>)]) ([(<any_Cx_ch_m_b> b)] | [(b <any_Cx_ch_m_b>)]) sil))
Running scan for frate = 105
Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2.4000000000000004 for ay ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard ch with value 1.4 for m ...
candidateGuards = map[ch:true]
Picking guard, ch

frate, target rule = 105 public <time> = (((sil [((s <any_Cx_t_s_p>) | (<any_Cx_t_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]) | (sil p (sil [((s <any_Cx_t_s_p>) | (<any_Cx_t_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]))) (([(<any_Cx_zh_p_s_t> zh)] | [(zh <any_Cx_zh_p_s_t>)]) (t | ((<any_Cx_zh_p_s_t> zh) | (zh <any_Cx_zh_p_s_t>)))) ((([(<any_Vx_zh_zh_ay_noSlide> zh)] | [(zh <any_Vx_zh_zh_ay_noSlide>)]) ([(<any_Cx_zh_zh_m_t> zh)] | [(zh <any_Cx_zh_zh_m_t>)])) (ay | ((<any_Vx_zh_zh_ay_noSlide> zh) | (zh <any_Vx_zh_zh_ay_noSlide>)))) (([(<any_Cx_ch_zh_m> ch)] | [(ch <any_Cx_ch_zh_m>)]) (m | ((<any_Cx_ch_zh_m> ch) | (ch <any_Cx_ch_zh_m>)))) (([(<any_vowel_noSlide> n)] | [(n <any_vowel_noSlide>)]) ([(<any_Cx_ch_m_n> n)] | [(n <any_Cx_ch_m_n>)]) sil))
Running scan for frate = 91
Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2.4000000000000004 for ay ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard ch with value 1.4 for m ...
candidateGuards = map[ch:true]
Picking guard, ch

frate, target rule = 91 public <time> = (((sil [((d <any_Cx_t_d_p>) | (<any_Cx_t_d_p> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil p (sil [((d <any_Cx_t_d_p>) | (<any_Cx_t_d_p> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_zh_p_d_t> zh)] | [(zh <any_Cx_zh_p_d_t>)]) (t | ((<any_Cx_zh_p_d_t> zh) | (zh <any_Cx_zh_p_d_t>)))) ((([(<any_Vx_zh_zh_ay_noSlide> zh)] | [(zh <any_Vx_zh_zh_ay_noSlide>)]) ([(<any_Cx_zh_zh_m_t> zh)] | [(zh <any_Cx_zh_zh_m_t>)])) (ay | ((<any_Vx_zh_zh_ay_noSlide> zh) | (zh <any_Vx_zh_zh_ay_noSlide>)))) (([(<any_Cx_ch_zh_m> ch)] | [(ch <any_Cx_ch_zh_m>)]) (m | ((<any_Cx_ch_zh_m> ch) | (ch <any_Cx_ch_zh_m>)))) (([(<any_vowel_noSlide> b)] | [(b <any_vowel_noSlide>)]) ([(<any_Cx_ch_m_b> b)] | [(b <any_Cx_ch_m_b>)]) sil))
Running scan for frate = 80
Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2.4000000000000004 for ay ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard ch with value 1.4 for m ...
candidateGuards = map[ch:true]
Picking guard, ch

frate, target rule = 80 public <time> = (((sil [((s <any_Cx_t_s_p>) | (<any_Cx_t_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]) | (sil p (sil [((s <any_Cx_t_s_p>) | (<any_Cx_t_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]))) (([(<any_Cx_zh_p_s_t> zh)] | [(zh <any_Cx_zh_p_s_t>)]) (t | ((<any_Cx_zh_p_s_t> zh) | (zh <any_Cx_zh_p_s_t>)))) ((([(<any_Vx_zh_zh_ay_noSlide> zh)] | [(zh <any_Vx_zh_zh_ay_noSlide>)]) ([(<any_Cx_zh_zh_m_t> zh)] | [(zh <any_Cx_zh_zh_m_t>)])) (ay | ((<any_Vx_zh_zh_ay_noSlide> zh) | (zh <any_Vx_zh_zh_ay_noSlide>)))) (([(<any_Cx_ch_zh_m> ch)] | [(ch <any_Cx_ch_zh_m>)]) (m | ((<any_Cx_ch_zh_m> ch) | (ch <any_Cx_ch_zh_m>)))) (([(<any_vowel_noSlide> n)] | [(n <any_vowel_noSlide>)]) ([(<any_Cx_ch_m_n> n)] | [(n <any_Cx_ch_m_n>)]) sil))
Running scan for frate = 72
Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2.4000000000000004 for ay ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard ch with value 1.4 for m ...
candidateGuards = map[ch:true]
Picking guard, ch

frate, target rule = 72 public <time> = (((sil [((ch <any_Cx_t_ch_p>) | (<any_Cx_t_ch_p> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil p (sil [((ch <any_Cx_t_ch_p>) | (<any_Cx_t_ch_p> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_zh_p_ch_t> zh)] | [(zh <any_Cx_zh_p_ch_t>)]) (t | ((<any_Cx_zh_p_ch_t> zh) | (zh <any_Cx_zh_p_ch_t>)))) ((([(<any_Vx_zh_zh_ay_noSlide> zh)] | [(zh <any_Vx_zh_zh_ay_noSlide>)]) ([(<any_Cx_zh_zh_m_t> zh)] | [(zh <any_Cx_zh_zh_m_t>)])) (ay | ((<any_Vx_zh_zh_ay_noSlide> zh) | (zh <any_Vx_zh_zh_ay_noSlide>)))) (([(<any_Cx_ch_zh_m> ch)] | [(ch <any_Cx_ch_zh_m>)]) (m | ((<any_Cx_ch_zh_m> ch) | (ch <any_Cx_ch_zh_m>)))) (([(<any_vowel_noSlide> l)] | [(l <any_vowel_noSlide>)]) ([(<any_Cx_ch_m_l> l)] | [(l <any_Cx_ch_m_l>)]) sil))

results =
{72 [{sil 0 11} {t 12 18} {ay 19 48} {m 49 52} {l 53 56} {v 57 68} {sil 69 99}]}
{80 [{sil 0 13} {t 14 20} {ay 21 52} {m 53 55} {n 56 61} {v 62 75} {sil 76 108}]}
{91 [{sil 0 15} {t 16 23} {ay 24 61} {m 62 67} {b 68 70} {g 71 96} {sil 97 136}]}
{105 [{sil 0 18} {t 19 27} {ay 28 71} {m 72 75} {n 76 82} {g 83 111} {sil 112 157}]}
{125 [{sil 0 20} {t 21 31} {ay 32 88} {m 89 104} {sil 105 185}]}

normalised results =
{72 [{sil 0 11} {t 17 25} {ay 26 67} {m 68 72} {l 74 78} {v 79 94} {sil 96 138}]}
{80 [{sil 0 13} {t 18 25} {ay 26 65} {m 66 66} {n 70 76} {v 78 94} {sil 95 135}]}
{91 [{sil 0 15} {t 18 25} {ay 26 67} {m 68 74} {b 75 75} {g 78 105} {sil 107 149}]}
{105 [{sil 0 18} {t 18 26} {ay 27 68} {m 69 71} {n 72 78} {g 79 106} {sil 107 150}]}
{125 [{sil 0 20} {t 17 25} {ay 26 70} {m 71 83} {sil 84 148}]}

ruleAligned = [{{t 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ay 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{m 0} [{0 3} {2 3} {3 3} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {t 17 25} {ay 26 67} {m 68 72} {l 74 74} {v 79 94} {sil 96 96}]}
{80 [{sil 0 0} {t 18 25} {ay 26 65} {m 66 66} {n 70 76} {v 78 94} {sil 95 95}]}
{91 [{sil 0 0} {t 18 25} {ay 26 67} {m 68 74} {b 75 75} {g 78 105} {sil 107 107}]}
{105 [{sil 0 0} {t 18 26} {ay 27 68} {m 69 71} {n 72 78} {g 79 106} {sil 107 107}]}
{125 [{sil 0 0} {t 17 25} {ay 26 70} {m 71 83} {sil 84 84}]}

timeAligned = [{{t 18 25} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ay 26 67} [{0 2} {1 2} {2 2} {4 2} {3 2}]} {{m 69 72} [{0 3} {2 3} {3 3} {4 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 25
i, iTime, newITime, timeStartFrom = 2 1 2 65
combinedVerdict    = [{t 0} {ay 0} {m 0}]
ruleAlignedVerdict = [{t 0} {ay 0} {m 0}]

score->
+2 for t
+2 for ay
+2 for m
score<-: 11
testPronounce t good ay good m good
publish->
phonsToAlphas = [{[t] t} {[ay] i} {[m] me}]
getVerdict<-:new {t [t] 0}
getVerdict<-:new {i [ay] 0}
getVerdict<-:new {me [m] 0}
lettersVerdicts = [{t [t] 0} {i [ay] 0} {me [m] 0}]
publish<-
{
  "word": "time",
  "results": [
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    },
    {
      "letters": "i",
      "phonemes": "ɑɪ",
      "verdict": "good"
    },
    {
      "letters": "me",
      "phonemes": "m",
      "verdict": "good"
    }
  ],
  "err": null
}
