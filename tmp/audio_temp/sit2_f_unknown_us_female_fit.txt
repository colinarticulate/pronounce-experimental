Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_a01227b2-6948-4c7e-a935-532be0b96bd3 audiofile /Users/test/go/src/Phonemes/audio_clips/sit2_f_unknown_us_female.wav word fit dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  1.199125



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.38 0.56 0.9400000000000001

 start3, duration3, end3 =  0.52 0.28 0.8

 Initial start, duration, end =  0.28 0.66 0.9400000000000001

 Cut at: start, duration =  0.28 0.899125     guard_end =  1.179125 

Running scan for frate = 125
Considering guard r with value 3 for f ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 125 public <fit> = (((sil [((th <any_Cx_f_th_p>) | (<any_Cx_f_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]) | (sil p (sil [((th <any_Cx_f_th_p>) | (<any_Cx_f_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]))) (([(<any_Cx_r_p_th_f> r)] | [(r <any_Cx_r_p_th_f>)]) (f | s | p | ((<any_Cx_r_p_th_f> r) | (r <any_Cx_r_p_th_f>)))) ((([(<any_Vx_r_r_ih_noSlide> r)] | [(r <any_Vx_r_r_ih_noSlide>)]) ([(<any_Cx_r_r_t_f> r)] | [(r <any_Cx_r_r_t_f>)])) (ih | ((<any_Vx_r_r_ih_noSlide> r) | (r <any_Vx_r_r_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_r_t_ch> ch)] | [(ch <any_Cx_r_t_ch>)]) sil))
Running scan for frate = 105
Considering guard r with value 3 for f ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 105 public <fit> = (((sil [((th <any_Cx_f_th_p>) | (<any_Cx_f_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]) | (sil p (sil [((th <any_Cx_f_th_p>) | (<any_Cx_f_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]))) (([(<any_Cx_r_p_th_f> r)] | [(r <any_Cx_r_p_th_f>)]) (f | s | p | ((<any_Cx_r_p_th_f> r) | (r <any_Cx_r_p_th_f>)))) ((([(<any_Vx_r_r_ih_noSlide> r)] | [(r <any_Vx_r_r_ih_noSlide>)]) ([(<any_Cx_r_r_t_f> r)] | [(r <any_Cx_r_r_t_f>)])) (ih | ((<any_Vx_r_r_ih_noSlide> r) | (r <any_Vx_r_r_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_r_t_thr> thr)] | [(thr <any_Cx_r_t_thr>)]) sil))
Running scan for frate = 91
Considering guard r with value 3 for f ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 91 public <fit> = (((sil [((dh <any_Cx_f_dh_p>) | (<any_Cx_f_dh_p> dh))] [((dh <any_vowel_noSlide>) | (<any_vowel_noSlide> dh))]) | (sil p (sil [((dh <any_Cx_f_dh_p>) | (<any_Cx_f_dh_p> dh))] [((dh <any_vowel_noSlide>) | (<any_vowel_noSlide> dh))]))) (([(<any_Cx_r_p_dh_f> r)] | [(r <any_Cx_r_p_dh_f>)]) (f | s | p | ((<any_Cx_r_p_dh_f> r) | (r <any_Cx_r_p_dh_f>)))) ((([(<any_Vx_r_r_ih_noSlide> r)] | [(r <any_Vx_r_r_ih_noSlide>)]) ([(<any_Cx_r_r_t_f> r)] | [(r <any_Cx_r_r_t_f>)])) (ih | ((<any_Vx_r_r_ih_noSlide> r) | (r <any_Vx_r_r_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> k)] | [(k <any_vowel_noSlide>)]) ([(<any_Cx_r_t_k> k)] | [(k <any_Cx_r_t_k>)]) sil))
Running scan for frate = 80
Considering guard r with value 3 for f ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 80 public <fit> = (((sil [((th <any_Cx_f_th_p>) | (<any_Cx_f_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]) | (sil p (sil [((th <any_Cx_f_th_p>) | (<any_Cx_f_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]))) (([(<any_Cx_r_p_th_f> r)] | [(r <any_Cx_r_p_th_f>)]) (f | s | p | ((<any_Cx_r_p_th_f> r) | (r <any_Cx_r_p_th_f>)))) ((([(<any_Vx_r_r_ih_noSlide> r)] | [(r <any_Vx_r_r_ih_noSlide>)]) ([(<any_Cx_r_r_t_f> r)] | [(r <any_Cx_r_r_t_f>)])) (ih | ((<any_Vx_r_r_ih_noSlide> r) | (r <any_Vx_r_r_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_r_t_g> g)] | [(g <any_Cx_r_t_g>)]) sil))
Running scan for frate = 72
Considering guard r with value 3 for f ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 6 for ih ...
candidateGuards = map[r:true]
Picking guard, r

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 72 public <fit> = (((sil [((dh <any_Cx_f_dh_p>) | (<any_Cx_f_dh_p> dh))] [((dh <any_vowel_noSlide>) | (<any_vowel_noSlide> dh))]) | (sil p (sil [((dh <any_Cx_f_dh_p>) | (<any_Cx_f_dh_p> dh))] [((dh <any_vowel_noSlide>) | (<any_vowel_noSlide> dh))]))) (([(<any_Cx_r_p_dh_f> r)] | [(r <any_Cx_r_p_dh_f>)]) (f | s | p | ((<any_Cx_r_p_dh_f> r) | (r <any_Cx_r_p_dh_f>)))) ((([(<any_Vx_r_r_ih_noSlide> r)] | [(r <any_Vx_r_r_ih_noSlide>)]) ([(<any_Cx_r_r_t_f> r)] | [(r <any_Cx_r_r_t_f>)])) (ih | ((<any_Vx_r_r_ih_noSlide> r) | (r <any_Vx_r_r_ih_noSlide>)))) (([(<any_Cx_r_r_t> r)] | [(r <any_Cx_r_r_t>)]) (t | ((<any_Cx_r_r_t> r) | (r <any_Cx_r_r_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_r_t_ch> ch)] | [(ch <any_Cx_r_t_ch>)]) sil))

results =
{72 [{sil 0 10} {s 11 23} {ih 24 34} {t 35 49} {sil 50 63}]}
{80 [{sil 0 12} {s 13 26} {ih 27 39} {t 40 53} {sil 54 68}]}
{91 [{sil 0 13} {s 14 30} {ih 31 45} {t 46 63} {sil 64 80}]}
{105 [{sil 0 15} {s 16 35} {ih 36 53} {t 54 69} {sil 70 93}]}
{125 [{sil 0 19} {s 20 40} {ih 41 59} {t 60 81} {sil 82 109}]}

normalised results =
{72 [{sil 0 10} {s 15 32} {ih 33 47} {t 49 68} {sil 69 88}]}
{80 [{sil 0 12} {s 16 33} {ih 34 49} {t 50 66} {sil 68 85}]}
{91 [{sil 0 13} {s 15 33} {ih 34 49} {t 51 69} {sil 70 88}]}
{105 [{sil 0 15} {s 15 33} {ih 34 50} {t 51 66} {sil 67 89}]}
{125 [{sil 0 19} {s 16 32} {ih 33 47} {t 48 65} {sil 66 87}]}

ruleAligned = [{{f 2} []} {{s 3} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ih 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{t 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {s 15 32} {ih 33 47} {t 49 68} {sil 69 69}]}
{80 [{sil 0 0} {s 16 33} {ih 34 49} {t 50 66} {sil 68 68}]}
{91 [{sil 0 0} {s 15 33} {ih 34 49} {t 51 69} {sil 70 70}]}
{105 [{sil 0 0} {s 15 33} {ih 34 50} {t 51 66} {sil 67 67}]}
{125 [{sil 0 0} {s 16 32} {ih 33 47} {t 48 65} {sil 66 66}]}

timeAligned = [{{s 15 33} [{0 1} {2 1} {3 1} {1 1} {4 1}]} {{ih 34 49} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{t 50 66} [{0 3} {1 3} {4 3} {2 3} {3 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 -1 0
i, iTime, newITime, timeStartFrom = 1 0 0 0
i, iTime, newITime, timeStartFrom = 2 0 1 32
i, iTime, newITime, timeStartFrom = 3 1 2 47
combinedVerdict    = [{f 2} {s 3} {ih 0} {t 0}]
ruleAlignedVerdict = [{f 2} {s 3} {ih 0} {t 0}]

score->
-2 for f
-2 for s
+2 for ih
+2 for t
score<-: 0
bestResult = {0 [{f 2} {s 3} {ih 0} {t 0}] [f ih t]}
testPronounce f missing s surprise ih good t good
publish->
phonsToAlphas = [{[f] f} {[ih] i} {[t] t}]
getVerdict<-:new {f [f] 2}
getVerdict<-:new {i [ih] 0}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{f [f] 2} {s [s] 3} {i [ih] 0} {t [t] 0}]
publish<-
{
  "word": "fit",
  "results": [
    {
      "letters": "f",
      "phonemes": "f",
      "verdict": "missing"
    },
    {
      "letters": "s",
      "phonemes": "s",
      "verdict": "surprise"
    },
    {
      "letters": "i",
      "phonemes": "Éª",
      "verdict": "good"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
