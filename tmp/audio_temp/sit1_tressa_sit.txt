Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_78e597a6-ac9c-4685-8c99-153caa17ba20 audiofile /Users/test/go/src/Phonemes/audio_clips/sit1_tressa.wav word sit dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  2.070375



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.7000000000000001 0.84 1.54

 start3, duration3, end3 =  1.0999999999999999 0.28 1.38

 Initial start, duration, end =  0.6000000000000001 0.94 1.54

 Cut at: start, duration =  0.6000000000000001 1.39     guard_end =  1.99 

Running scan for frate = 125
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 125 public <sit> = (((sil [((th <any_Cx_s_th_p>) | (<any_Cx_s_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]) | (sil p (sil [((th <any_Cx_s_th_p>) | (<any_Cx_s_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]))) (([(<any_Cx_l_p_th_s> l)] | [(l <any_Cx_l_p_th_s>)]) (s | z | ((<any_Cx_l_p_th_s> l) | (l <any_Cx_l_p_th_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_r_t_ch> ch)] | [(ch <any_Cx_r_t_ch>)]) sil))
Running scan for frate = 105
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 105 public <sit> = (((sil [((th <any_Cx_s_th_p>) | (<any_Cx_s_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]) | (sil p (sil [((th <any_Cx_s_th_p>) | (<any_Cx_s_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]))) (([(<any_Cx_l_p_th_s> l)] | [(l <any_Cx_l_p_th_s>)]) (s | z | ((<any_Cx_l_p_th_s> l) | (l <any_Cx_l_p_th_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> d)] | [(d <any_vowel_noSlide>)]) ([(<any_Cx_r_t_d> d)] | [(d <any_Cx_r_t_d>)]) sil))
Running scan for frate = 91
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 91 public <sit> = (((sil [((z <any_Cx_s_z_p>) | (<any_Cx_s_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_s_z_p>) | (<any_Cx_s_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_l_p_z_s> l)] | [(l <any_Cx_l_p_z_s>)]) (s | z | ((<any_Cx_l_p_z_s> l) | (l <any_Cx_l_p_z_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> d)] | [(d <any_vowel_noSlide>)]) ([(<any_Cx_r_t_d> d)] | [(d <any_Cx_r_t_d>)]) sil))
Running scan for frate = 80
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 80 public <sit> = (((sil [((z <any_Cx_s_z_p>) | (<any_Cx_s_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_s_z_p>) | (<any_Cx_s_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_l_p_z_s> l)] | [(l <any_Cx_l_p_z_s>)]) (s | z | ((<any_Cx_l_p_z_s> l) | (l <any_Cx_l_p_z_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_r_t_p> p)] | [(p <any_Cx_r_t_p>)]) sil))
Running scan for frate = 72
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 72 public <sit> = (((sil [((z <any_Cx_s_z_p>) | (<any_Cx_s_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_s_z_p>) | (<any_Cx_s_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_l_p_z_s> l)] | [(l <any_Cx_l_p_z_s>)]) (s | z | ((<any_Cx_l_p_z_s> l) | (l <any_Cx_l_p_z_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_r_t_ch> ch)] | [(ch <any_Cx_r_t_ch>)]) sil))

results =
{72 [{sil 0 26} {s 27 41} {ih 42 54} {t 55 67} {sil 68 84}]}
{80 [{sil 0 29} {s 30 46} {ih 47 60} {t 61 74} {sil 75 91}]}
{91 [{sil 0 33} {s 34 53} {ih 54 69} {t 70 84} {sil 85 125}]}
{105 [{sil 0 39} {s 40 62} {ih 63 82} {t 83 98} {sil 99 145}]}
{125 [{sil 0 46} {s 47 72} {ih 73 96} {t 97 113} {sil 114 170}]}

normalised results =
{72 [{sil 0 26} {s 38 57} {ih 58 75} {t 76 93} {sil 94 117}]}
{80 [{sil 0 29} {s 38 58} {ih 59 75} {t 76 93} {sil 94 114}]}
{91 [{sil 0 33} {s 37 58} {ih 59 76} {t 77 92} {sil 93 137}]}
{105 [{sil 0 39} {s 38 59} {ih 60 78} {t 79 93} {sil 94 138}]}
{125 [{sil 0 46} {s 38 58} {ih 58 77} {t 78 90} {sil 91 136}]}

ruleAligned = [{{s 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ih 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{t 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {s 38 57} {ih 58 75} {t 76 93} {sil 94 94}]}
{80 [{sil 0 0} {s 38 58} {ih 59 75} {t 76 93} {sil 94 94}]}
{91 [{sil 0 0} {s 37 58} {ih 59 76} {t 77 92} {sil 93 93}]}
{105 [{sil 0 0} {s 38 59} {ih 60 78} {t 79 93} {sil 94 94}]}
{125 [{sil 0 0} {s 38 58} {ih 58 77} {t 78 90} {sil 91 91}]}

timeAligned = [{{s 38 58} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ih 59 76} [{0 2} {1 2} {2 2} {4 2} {3 2}]} {{t 77 93} [{0 3} {1 3} {2 3} {4 3} {3 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 57
i, iTime, newITime, timeStartFrom = 2 1 2 75
combinedVerdict    = [{s 0} {ih 0} {t 0}]
ruleAlignedVerdict = [{s 0} {ih 0} {t 0}]

score->
+2 for s
+2 for ih
+2 for t
score<-: 11
testPronounce s good ih good t good
publish->
phonsToAlphas = [{[s] s} {[ih] i} {[t] t}]
getVerdict<-:new {s [s] 0}
getVerdict<-:new {i [ih] 0}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{s [s] 0} {i [ih] 0} {t [t] 0}]
publish<-
{
  "word": "sit",
  "results": [
    {
      "letters": "s",
      "phonemes": "s",
      "verdict": "good"
    },
    {
      "letters": "i",
      "phonemes": "Éª",
      "verdict": "good"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
