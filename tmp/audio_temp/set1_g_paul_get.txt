Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_cab6312e-eaad-4b77-a6b9-64b7846bca8d audiofile /Users/test/go/src/Phonemes/audio_clips/set1_g_paul.wav word get dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  1.902625



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.5800000000000001 0.74 1.32

 start3, duration3, end3 =  0.8 0.32 1.12

 Initial start, duration, end =  0.4800000000000001 0.84 1.32

 Cut at: start, duration =  0.4800000000000001 1.29     guard_end =  1.77 

Running scan for frate = 125
Considering guard s with value 1 for g ...
Considering guard zh with value 1 for g ...
Considering guard oy with value 1 for g ...
Considering guard sh with value 1 for g ...
Considering guard ch with value 1 for g ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, s

Considering guard zh with value 2 for eh ...
Considering guard oy with value 2 for eh ...
candidateGuards = map[oy:true zh:true]
Picking guard, zh

Considering guard zh with value 1 for t ...
Considering guard oy with value 1 for t ...
candidateGuards = map[oy:true zh:true]
Picking guard, zh

frate, target rule = 125 public <get> = (((sil [((v <any_Cx_g_v_p>) | (<any_Cx_g_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]) | (sil p (sil [((v <any_Cx_g_v_p>) | (<any_Cx_g_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]))) (([(<any_Cx_s_p_v_g> s)] | [(s <any_Cx_s_p_v_g>)]) (g | ((<any_Cx_s_p_v_g> s) | (s <any_Cx_s_p_v_g>)))) ((([(<any_Vx_zh_s_eh_noSlide> zh)] | [(zh <any_Vx_zh_s_eh_noSlide>)]) ([(<any_Cx_zh_s_t_g> zh)] | [(zh <any_Cx_zh_s_t_g>)])) (eh | ((<any_Vx_zh_s_eh_noSlide> zh) | (zh <any_Vx_zh_s_eh_noSlide>)))) (([(<any_Cx_zh_zh_t> zh)] | [(zh <any_Cx_zh_zh_t>)]) (t | ((<any_Cx_zh_zh_t> zh) | (zh <any_Cx_zh_zh_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_ch> ch)] | [(ch <any_Cx_zh_t_ch>)]) sil))
Running scan for frate = 105
Considering guard ch with value 1 for g ...
Considering guard s with value 1 for g ...
Considering guard sh with value 1 for g ...
Considering guard zh with value 1 for g ...
Considering guard oy with value 1 for g ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, sh

Considering guard zh with value 2 for eh ...
Considering guard oy with value 2 for eh ...
candidateGuards = map[oy:true zh:true]
Picking guard, zh

Considering guard oy with value 1 for t ...
Considering guard zh with value 1 for t ...
candidateGuards = map[oy:true zh:true]
Picking guard, oy

frate, target rule = 105 public <get> = (((sil [((k <any_Cx_g_k_p>) | (<any_Cx_g_k_p> k))] [((k <any_vowel_noSlide>) | (<any_vowel_noSlide> k))]) | (sil p (sil [((k <any_Cx_g_k_p>) | (<any_Cx_g_k_p> k))] [((k <any_vowel_noSlide>) | (<any_vowel_noSlide> k))]))) (([(<any_Cx_sh_p_k_g> sh)] | [(sh <any_Cx_sh_p_k_g>)]) (g | ((<any_Cx_sh_p_k_g> sh) | (sh <any_Cx_sh_p_k_g>)))) ((([(<any_Vx_zh_sh_eh_noSlide> zh)] | [(zh <any_Vx_zh_sh_eh_noSlide>)]) ([(<any_Cx_zh_sh_t_g> zh)] | [(zh <any_Cx_zh_sh_t_g>)])) (eh | ((<any_Vx_zh_sh_eh_noSlide> zh) | (zh <any_Vx_zh_sh_eh_noSlide>)))) (([(<any_Cx_oy_zh_t> oy)] | [(oy <any_Cx_oy_zh_t>)]) (t | ((<any_Cx_oy_zh_t> oy) | (oy <any_Cx_oy_zh_t>)))) (([(<any_vowel_noSlide> d)] | [(d <any_vowel_noSlide>)]) ([(<any_Cx_oy_t_d> d)] | [(d <any_Cx_oy_t_d>)]) sil))
Running scan for frate = 91
Considering guard sh with value 1 for g ...
Considering guard oy with value 1 for g ...
Considering guard s with value 1 for g ...
Considering guard ch with value 1 for g ...
Considering guard zh with value 1 for g ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, sh

Considering guard oy with value 2 for eh ...
Considering guard zh with value 2 for eh ...
candidateGuards = map[oy:true zh:true]
Picking guard, oy

Considering guard zh with value 1 for t ...
Considering guard oy with value 1 for t ...
candidateGuards = map[oy:true zh:true]
Picking guard, zh

frate, target rule = 91 public <get> = (((sil [((v <any_Cx_g_v_p>) | (<any_Cx_g_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]) | (sil p (sil [((v <any_Cx_g_v_p>) | (<any_Cx_g_v_p> v))] [((v <any_vowel_noSlide>) | (<any_vowel_noSlide> v))]))) (([(<any_Cx_sh_p_v_g> sh)] | [(sh <any_Cx_sh_p_v_g>)]) (g | ((<any_Cx_sh_p_v_g> sh) | (sh <any_Cx_sh_p_v_g>)))) ((([(<any_Vx_oy_sh_eh_noSlide> oy)] | [(oy <any_Vx_oy_sh_eh_noSlide>)]) ([(<any_Cx_oy_sh_t_g> oy)] | [(oy <any_Cx_oy_sh_t_g>)])) (eh | ((<any_Vx_oy_sh_eh_noSlide> oy) | (oy <any_Vx_oy_sh_eh_noSlide>)))) (([(<any_Cx_zh_oy_t> zh)] | [(zh <any_Cx_zh_oy_t>)]) (t | ((<any_Cx_zh_oy_t> zh) | (zh <any_Cx_zh_oy_t>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_thr> thr)] | [(thr <any_Cx_zh_t_thr>)]) sil))
Running scan for frate = 80
Considering guard s with value 1 for g ...
Considering guard sh with value 1 for g ...
Considering guard zh with value 1 for g ...
Considering guard oy with value 1 for g ...
Considering guard ch with value 1 for g ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, ch

Considering guard oy with value 2 for eh ...
Considering guard zh with value 2 for eh ...
candidateGuards = map[oy:true zh:true]
Picking guard, oy

Considering guard oy with value 1 for t ...
Considering guard zh with value 1 for t ...
candidateGuards = map[oy:true zh:true]
Picking guard, oy

frate, target rule = 80 public <get> = (((sil [((ch <any_Cx_g_ch_p>) | (<any_Cx_g_ch_p> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil p (sil [((ch <any_Cx_g_ch_p>) | (<any_Cx_g_ch_p> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_ch_p_ch_g> ch)] | [(ch <any_Cx_ch_p_ch_g>)]) (g | ((<any_Cx_ch_p_ch_g> ch) | (ch <any_Cx_ch_p_ch_g>)))) ((([(<any_Vx_oy_ch_eh_noSlide> oy)] | [(oy <any_Vx_oy_ch_eh_noSlide>)]) ([(<any_Cx_oy_ch_t_g> oy)] | [(oy <any_Cx_oy_ch_t_g>)])) (eh | ((<any_Vx_oy_ch_eh_noSlide> oy) | (oy <any_Vx_oy_ch_eh_noSlide>)))) (([(<any_Cx_oy_oy_t> oy)] | [(oy <any_Cx_oy_oy_t>)]) (t | ((<any_Cx_oy_oy_t> oy) | (oy <any_Cx_oy_oy_t>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_oy_t_thr> thr)] | [(thr <any_Cx_oy_t_thr>)]) sil))
Running scan for frate = 72
Considering guard s with value 1 for g ...
Considering guard sh with value 1 for g ...
Considering guard ch with value 1 for g ...
Considering guard oy with value 1 for g ...
Considering guard zh with value 1 for g ...
candidateGuards = map[ch:true oy:true s:true sh:true zh:true]
Picking guard, s

Considering guard zh with value 2 for eh ...
Considering guard oy with value 2 for eh ...
candidateGuards = map[oy:true zh:true]
Picking guard, zh

Considering guard oy with value 1 for t ...
Considering guard zh with value 1 for t ...
candidateGuards = map[oy:true zh:true]
Picking guard, oy

frate, target rule = 72 public <get> = (((sil [((k <any_Cx_g_k_p>) | (<any_Cx_g_k_p> k))] [((k <any_vowel_noSlide>) | (<any_vowel_noSlide> k))]) | (sil p (sil [((k <any_Cx_g_k_p>) | (<any_Cx_g_k_p> k))] [((k <any_vowel_noSlide>) | (<any_vowel_noSlide> k))]))) (([(<any_Cx_s_p_k_g> s)] | [(s <any_Cx_s_p_k_g>)]) (g | ((<any_Cx_s_p_k_g> s) | (s <any_Cx_s_p_k_g>)))) ((([(<any_Vx_zh_s_eh_noSlide> zh)] | [(zh <any_Vx_zh_s_eh_noSlide>)]) ([(<any_Cx_zh_s_t_g> zh)] | [(zh <any_Cx_zh_s_t_g>)])) (eh | ((<any_Vx_zh_s_eh_noSlide> zh) | (zh <any_Vx_zh_s_eh_noSlide>)))) (([(<any_Cx_oy_zh_t> oy)] | [(oy <any_Cx_oy_zh_t>)]) (t | ((<any_Cx_oy_zh_t> oy) | (oy <any_Cx_oy_zh_t>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_oy_t_g> g)] | [(g <any_Cx_oy_t_g>)]) sil))

results =
{72 [{sil 0 7} {b 8 10} {s 11 26} {eh 27 43} {t 44 56} {sil 57 75}]}
{80 [{sil 0 14} {ch 15 17} {z 18 29} {eh 30 49} {t 50 62} {sil 63 81}]}
{91 [{sil 0 13} {z 14 29} {sh 30 33} {eh 34 56} {t 57 71} {sil 72 116}]}
{105 [{sil 0 15} {z 16 35} {sh 36 38} {eh 39 65} {t 66 82} {sil 83 134}]}
{125 [{sil 0 11} {b 12 14} {s 15 44} {eh 45 77} {t 78 93} {sil 94 158}]}

normalised results =
{72 [{sil 0 7} {b 11 11} {s 15 36} {eh 38 60} {t 61 78} {sil 79 104}]}
{80 [{sil 0 14} {ch 19 19} {z 23 36} {eh 38 61} {t 63 78} {sil 79 101}]}
{91 [{sil 0 13} {z 15 32} {sh 33 36} {eh 37 62} {t 63 78} {sil 79 127}]}
{105 [{sil 0 15} {z 15 33} {sh 34 34} {eh 37 62} {t 63 78} {sil 79 128}]}
{125 [{sil 0 11} {b 10 10} {s 12 35} {eh 36 62} {t 62 74} {sil 75 126}]}

ruleAligned = [{{g 2} []} {{z 3} [{1 2} {2 1} {3 1}]} {{eh 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]} {{t 0} [{0 4} {1 4} {2 4} {3 4} {4 4}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {b 11 11} {s 15 36} {eh 38 60} {t 61 78} {sil 79 79}]}
{80 [{sil 0 0} {ch 19 19} {z 23 36} {eh 38 61} {t 63 78} {sil 79 79}]}
{91 [{sil 0 0} {z 15 32} {sh 33 33} {eh 37 62} {t 63 78} {sil 79 79}]}
{105 [{sil 0 0} {z 15 33} {sh 34 34} {eh 37 62} {t 63 78} {sil 79 79}]}
{125 [{sil 0 0} {b 10 10} {s 12 35} {eh 36 62} {t 62 74} {sil 75 75}]}

timeAligned = [{{z 23 32} [{1 2} {2 1} {3 1}]} {{eh 37 62} [{2 3} {3 3} {4 3} {0 3} {1 3}]} {{t 63 78} [{0 4} {1 4} {2 4} {3 4} {4 4}]}]

i, iTime, newITime, timeStartFrom = 0 0 -1 0
i, iTime, newITime, timeStartFrom = 1 0 0 0
i, iTime, newITime, timeStartFrom = 2 0 1 32
i, iTime, newITime, timeStartFrom = 3 1 2 60
combinedVerdict    = [{g 2} {z 3} {eh 0} {t 0}]
ruleAlignedVerdict = [{g 2} {z 3} {eh 0} {t 0}]

score->
-2 for g
-2 for z
+2 for eh
+2 for t
score<-: 0
bestResult = {0 [{g 2} {z 3} {eh 0} {t 0}] [g eh t]}
testPronounce g missing z surprise eh good t good
publish->
phonsToAlphas = [{[g] g} {[eh] e} {[t] t}]
getVerdict<-:new {g [g] 2}
getVerdict<-:new {e [eh] 0}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{g [g] 2} {z [z] 3} {e [eh] 0} {t [t] 0}]
publish<-
{
  "word": "get",
  "results": [
    {
      "letters": "g",
      "phonemes": "g",
      "verdict": "missing"
    },
    {
      "letters": "z",
      "phonemes": "z",
      "verdict": "surprise"
    },
    {
      "letters": "e",
      "phonemes": "ɛ",
      "verdict": "good"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
