Calling Pronounce with args: outfolder /Users/test/go/src/Phonemes/audio_clips/Temp_e5b860c3-452e-4f63-88c0-82efb7507aea audiofile /Users/test/go/src/Phonemes/audio_clips/caught2_t_paul.wav word coat dictfile /Users/test/Downloads/sourceFiltered_exp3Mar22.dict phdictfile /Users/test/Documents/GitHub/pronounce-experimental/Dictionaries/art_db_v3_inference.phone featureparams /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model/feat.params hmm /Users/test/Documents/GitHub/pronounce-experimental/Models/Bare.ci_cont_29Jun22/model

 length of audio =  2.018687



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.54 0.72 1.26

 start3, duration3, end3 =  0.56 0.6 1.1600000000000001

 Initial start, duration, end =  0.44000000000000006 0.82 1.26

 Cut at: start, duration =  0.44000000000000006 1.27     guard_end =  1.71 

Running scan for frate = 125
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 125 public <coat> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_z_b_ch_k> z)] | [(z <any_Cx_z_b_ch_k>)]) (k | d | ((<any_Cx_z_b_ch_k> z) | (z <any_Cx_z_b_ch_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_y_t_p> p)] | [(p <any_Cx_y_t_p>)]) sil))
Running scan for frate = 105
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 105 public <coat> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_z_b_ch_k> z)] | [(z <any_Cx_z_b_ch_k>)]) (k | d | ((<any_Cx_z_b_ch_k> z) | (z <any_Cx_z_b_ch_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_y_t_p> p)] | [(p <any_Cx_y_t_p>)]) sil))
Running scan for frate = 91
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 91 public <coat> = (((sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]) | (sil b (sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]))) (([(<any_Cx_z_b_t_k> z)] | [(z <any_Cx_z_b_t_k>)]) (k | d | ((<any_Cx_z_b_t_k> z) | (z <any_Cx_z_b_t_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_y_t_p> p)] | [(p <any_Cx_y_t_p>)]) sil))
Running scan for frate = 80
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 80 public <coat> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_z_b_ch_k> z)] | [(z <any_Cx_z_b_ch_k>)]) (k | d | ((<any_Cx_z_b_ch_k> z) | (z <any_Cx_z_b_ch_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_y_t_ch> ch)] | [(ch <any_Cx_y_t_ch>)]) sil))
Running scan for frate = 72
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 72 public <coat> = (((sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]) | (sil b (sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]))) (([(<any_Cx_z_b_p_k> z)] | [(z <any_Cx_z_b_p_k>)]) (k | d | ((<any_Cx_z_b_p_k> z) | (z <any_Cx_z_b_p_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_y_t_g> g)] | [(g <any_Cx_y_t_g>)]) sil))

results =
{72 [{sil 0 11} {k 12 19} {ao 20 33} {y 34 36} {t 37 48} {sil 49 67}]}
{80 [{sil 0 12} {k 13 21} {ao 22 37} {y 38 40} {t 41 53} {sil 54 72}]}
{91 [{sil 0 14} {k 15 24} {ao 25 45} {y 46 48} {t 49 61} {sil 62 114}]}
{105 [{sil 0 17} {k 18 28} {ao 29 51} {y 52 54} {t 55 70} {sil 71 132}]}
{125 [{sil 0 20} {k 21 32} {ao 33 60} {y 61 63} {t 64 84} {sil 85 155}]}

normalised results =
{72 [{sil 0 11} {k 17 26} {ao 28 46} {y 47 47} {t 51 67} {sil 68 93}]}
{80 [{sil 0 12} {k 16 26} {ao 28 46} {y 48 48} {t 51 66} {sil 68 90}]}
{91 [{sil 0 14} {k 16 26} {ao 27 49} {y 51 51} {t 54 67} {sil 68 125}]}
{105 [{sil 0 17} {k 17 27} {ao 28 49} {y 50 50} {t 52 67} {sil 68 126}]}
{125 [{sil 0 20} {k 17 26} {ao 26 48} {y 49 49} {t 51 67} {sil 68 124}]}

ruleAligned = [{{k 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ow 2} []} {{ao 3} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{t 0} [{0 4} {1 4} {2 4} {3 4} {4 4}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {k 17 26} {ao 28 46} {y 47 47} {t 51 67} {sil 68 68}]}
{80 [{sil 0 0} {k 16 26} {ao 28 46} {y 48 48} {t 51 66} {sil 68 68}]}
{91 [{sil 0 0} {k 16 26} {ao 27 49} {y 51 51} {t 54 67} {sil 68 68}]}
{105 [{sil 0 0} {k 17 27} {ao 28 49} {y 50 50} {t 52 67} {sil 68 68}]}
{125 [{sil 0 0} {k 17 26} {ao 26 48} {y 49 49} {t 51 67} {sil 68 68}]}

timeAligned = [{{k 17 26} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ao 28 48} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{t 51 67} [{0 4} {1 4} {4 4} {3 4} {2 4}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 -1 26
i, iTime, newITime, timeStartFrom = 2 0 1 26
i, iTime, newITime, timeStartFrom = 3 1 2 46
combinedVerdict    = [{k 0} {ow 2} {ao 3} {t 0}]
ruleAlignedVerdict = [{k 0} {ow 2} {ao 3} {t 0}]

score->
+2 for k
-2 for ow
-2 for ao
+2 for t
score<-: 0
bestResult = {0 [{k 0} {ow 2} {ao 3} {t 0}] [k ow t]}
testPronounce k good ow missing ao surprise t good
publish->
phonsToAlphas = [{[k] c} {[ow] oa} {[t] t}]
getVerdict<-:new {c [k] 0}
getVerdict<-:new {oa [ow] 2}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{c [k] 0} {oa [ow] 2} {ao [ao] 3} {t [t] 0}]
publish<-
{
  "word": "coat",
  "results": [
    {
      "letters": "c",
      "phonemes": "k",
      "verdict": "good"
    },
    {
      "letters": "oa",
      "phonemes": "oʊ",
      "verdict": "missing"
    },
    {
      "letters": "ao",
      "phonemes": "ɔ",
      "verdict": "surprise"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
