
 length of audio =  1.628062



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.5800000000000001 0.88 1.46

 start3, duration3, end3 =  0.6 0.76 1.3599999999999999

 Initial start, duration, end =  0.4800000000000001 0.9799999999999999 1.46

 Cut at: start, duration =  0.4800000000000001 1.128062     guard_end =  1.6080619999999999 

Running scan for frate = 125
Considering guard ch with value 1 for ow ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 1 for n ...
candidateGuards = map[ch:true]
Picking guard, ch

frate, target rule = 125 public <own> = (((sil [((r <any_Vx_ow_r_p_noSlide>) | (<any_Vx_ow_r_p_noSlide> r))] [((r <any_Cx_ow_r_p>) | (<any_Cx_ow_r_p> r))]) | (sil p (sil [((r <any_Vx_ow_r_p_noSlide>) | (<any_Vx_ow_r_p_noSlide> r))] [((r <any_Cx_ow_r_p>) | (<any_Cx_ow_r_p> r))]))) ((([(<any_Vx_ch_p_r_ow_noSlide> ch)] | [(ch <any_Vx_ch_p_r_ow_noSlide>)]) ([(<any_Cx_ch_p_r_n> ch)] | [(ch <any_Cx_ch_p_r_n>)])) (ow | ((<any_Vx_ch_p_r_ow_noSlide> ch) | (ch <any_Vx_ch_p_r_ow_noSlide>)))) (([(<any_Cx_ch_ch_n> ch)] | [(ch <any_Cx_ch_ch_n>)]) (n | ((<any_Cx_ch_ch_n> ch) | (ch <any_Cx_ch_ch_n>)))) (([(<any_vowel_noSlide> ng)] | [(ng <any_vowel_noSlide>)]) ([(<any_Cx_ch_n_ng> ng)] | [(ng <any_Cx_ch_n_ng>)]) sil))
Running scan for frate = 105
Considering guard ch with value 1 for ow ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 1 for n ...
candidateGuards = map[ch:true]
Picking guard, ch

frate, target rule = 105 public <own> = (((sil [((r <any_Vx_ow_r_p_noSlide>) | (<any_Vx_ow_r_p_noSlide> r))] [((r <any_Cx_ow_r_p>) | (<any_Cx_ow_r_p> r))]) | (sil p (sil [((r <any_Vx_ow_r_p_noSlide>) | (<any_Vx_ow_r_p_noSlide> r))] [((r <any_Cx_ow_r_p>) | (<any_Cx_ow_r_p> r))]))) ((([(<any_Vx_ch_p_r_ow_noSlide> ch)] | [(ch <any_Vx_ch_p_r_ow_noSlide>)]) ([(<any_Cx_ch_p_r_n> ch)] | [(ch <any_Cx_ch_p_r_n>)])) (ow | ((<any_Vx_ch_p_r_ow_noSlide> ch) | (ch <any_Vx_ch_p_r_ow_noSlide>)))) (([(<any_Cx_ch_ch_n> ch)] | [(ch <any_Cx_ch_ch_n>)]) (n | ((<any_Cx_ch_ch_n> ch) | (ch <any_Cx_ch_ch_n>)))) (([(<any_vowel_noSlide> d)] | [(d <any_vowel_noSlide>)]) ([(<any_Cx_ch_n_d> d)] | [(d <any_Cx_ch_n_d>)]) sil))
Running scan for frate = 91
Considering guard ch with value 1 for ow ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 1 for n ...
candidateGuards = map[ch:true]
Picking guard, ch

frate, target rule = 91 public <own> = (((sil [((r <any_Vx_ow_r_p_noSlide>) | (<any_Vx_ow_r_p_noSlide> r))] [((r <any_Cx_ow_r_p>) | (<any_Cx_ow_r_p> r))]) | (sil p (sil [((r <any_Vx_ow_r_p_noSlide>) | (<any_Vx_ow_r_p_noSlide> r))] [((r <any_Cx_ow_r_p>) | (<any_Cx_ow_r_p> r))]))) ((([(<any_Vx_ch_p_r_ow_noSlide> ch)] | [(ch <any_Vx_ch_p_r_ow_noSlide>)]) ([(<any_Cx_ch_p_r_n> ch)] | [(ch <any_Cx_ch_p_r_n>)])) (ow | ((<any_Vx_ch_p_r_ow_noSlide> ch) | (ch <any_Vx_ch_p_r_ow_noSlide>)))) (([(<any_Cx_ch_ch_n> ch)] | [(ch <any_Cx_ch_ch_n>)]) (n | ((<any_Cx_ch_ch_n> ch) | (ch <any_Cx_ch_ch_n>)))) (([(<any_vowel_noSlide> z)] | [(z <any_vowel_noSlide>)]) ([(<any_Cx_ch_n_z> z)] | [(z <any_Cx_ch_n_z>)]) sil))
Running scan for frate = 80
Considering guard ch with value 1 for ow ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 1 for n ...
candidateGuards = map[ch:true]
Picking guard, ch

frate, target rule = 80 public <own> = (((sil [((b <any_Vx_ow_b_p_noSlide>) | (<any_Vx_ow_b_p_noSlide> b))] [((b <any_Cx_ow_b_p>) | (<any_Cx_ow_b_p> b))]) | (sil p (sil [((b <any_Vx_ow_b_p_noSlide>) | (<any_Vx_ow_b_p_noSlide> b))] [((b <any_Cx_ow_b_p>) | (<any_Cx_ow_b_p> b))]))) ((([(<any_Vx_ch_p_b_ow_noSlide> ch)] | [(ch <any_Vx_ch_p_b_ow_noSlide>)]) ([(<any_Cx_ch_p_b_n> ch)] | [(ch <any_Cx_ch_p_b_n>)])) (ow | ((<any_Vx_ch_p_b_ow_noSlide> ch) | (ch <any_Vx_ch_p_b_ow_noSlide>)))) (([(<any_Cx_ch_ch_n> ch)] | [(ch <any_Cx_ch_ch_n>)]) (n | ((<any_Cx_ch_ch_n> ch) | (ch <any_Cx_ch_ch_n>)))) (([(<any_vowel_noSlide> z)] | [(z <any_vowel_noSlide>)]) ([(<any_Cx_ch_n_z> z)] | [(z <any_Cx_ch_n_z>)]) sil))
Running scan for frate = 72
Considering guard ch with value 1 for ow ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 1 for n ...
candidateGuards = map[ch:true]
Picking guard, ch

frate, target rule = 72 public <own> = (((sil [((hh <any_Vx_ow_hh_p_noSlide>) | (<any_Vx_ow_hh_p_noSlide> hh))] [((hh <any_Cx_ow_hh_p>) | (<any_Cx_ow_hh_p> hh))]) | (sil p (sil [((hh <any_Vx_ow_hh_p_noSlide>) | (<any_Vx_ow_hh_p_noSlide> hh))] [((hh <any_Cx_ow_hh_p>) | (<any_Cx_ow_hh_p> hh))]))) ((([(<any_Vx_ch_p_hh_ow_noSlide> ch)] | [(ch <any_Vx_ch_p_hh_ow_noSlide>)]) ([(<any_Cx_ch_p_hh_n> ch)] | [(ch <any_Cx_ch_p_hh_n>)])) (ow | ((<any_Vx_ch_p_hh_ow_noSlide> ch) | (ch <any_Vx_ch_p_hh_ow_noSlide>)))) (([(<any_Cx_ch_ch_n> ch)] | [(ch <any_Cx_ch_ch_n>)]) (n | ((<any_Cx_ch_ch_n> ch) | (ch <any_Cx_ch_ch_n>)))) (([(<any_vowel_noSlide> b)] | [(b <any_vowel_noSlide>)]) ([(<any_Cx_ch_n_b> b)] | [(b <any_Cx_ch_n_b>)]) sil))

results =
{72 [{sil 0 16} {ow 17 36} {n 37 57} {sil 58 65}]}
{80 [{sil 0 13} {b 14 16} {ae 17 26} {ow 27 40} {n 41 62} {sil 63 70}]}
{91 [{sil 0 20} {ow 21 46} {n 47 73} {sil 74 101}]}
{105 [{sil 0 23} {ow 24 50} {n 51 82} {sil 83 117}]}
{125 [{sil 3 29} {ow 30 64} {n 65 83} {l 84 90} {ng 91 98} {sil 99 141}]}

normalised results =
{72 [{sil 0 16} {ow 24 50} {n 51 79} {sil 81 90}]}
{80 [{sil 0 13} {b 18 18} {ae 21 33} {ow 34 50} {n 51 78} {sil 79 88}]}
{91 [{sil 0 20} {ow 23 51} {n 52 80} {sil 81 111}]}
{105 [{sil 0 23} {ow 23 48} {n 49 78} {sil 79 111}]}
{125 [{sil 3 29} {ow 24 51} {n 52 66} {l 67 72} {ng 73 78} {sil 79 113}]}

ruleAligned = [{{ow 0} [{0 1} {1 3} {2 1} {3 1} {4 1}]} {{n 0} [{0 2} {1 4} {2 2} {3 2} {4 2}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {ow 24 50} {n 51 79} {sil 81 81}]}
{80 [{sil 0 0} {b 18 18} {ae 21 33} {ow 34 50} {n 51 78} {sil 79 79}]}
{91 [{sil 0 0} {ow 23 51} {n 52 80} {sil 81 81}]}
{105 [{sil 0 0} {ow 23 48} {n 49 78} {sil 79 79}]}
{125 [{sil 3 3} {ow 24 51} {n 52 66} {l 67 72} {ng 73 78} {sil 79 79}]}

timeAligned = [{{ow 24 50} [{0 1} {2 1} {3 1} {4 1} {1 3}]} {{n 51 78} [{0 2} {1 4} {3 2} {2 2} {4 2}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 48
combinedVerdict    = [{ow 0} {n 0}]
ruleAlignedVerdict = [{ow 0} {n 0}]

score->
+1 for ow
+1 for n
score<-: 7
testPronounce ow good n good
publish->
phonsToAlphas = [{[ow] ow} {[n] n}]
getVerdict<-:new {ow [ow] 0}
getVerdict<-:new {n [n] 0}
lettersVerdicts = [{ow [ow] 0} {n [n] 0}]
publish<-
Total: 206.280835ms
{
  "results": [
    {
      "letters": "ow",
      "phonemes": "oÊŠ",
      "verdict": "good"
    },
    {
      "letters": "n",
      "phonemes": "n",
      "verdict": "good"
    }
  ],
  "err": null
}
