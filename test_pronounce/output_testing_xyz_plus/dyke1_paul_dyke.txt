
 length of audio =  1.764312



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.54 0.86 1.4

 start3, duration3, end3 =  0.54 0.6 1.1400000000000001

 Initial start, duration, end =  0.44000000000000006 0.9599999999999999 1.4

 Cut at: start, duration =  0.44000000000000006 1.304312     guard_end =  1.7443119999999999 

Running scan for frate = 125
Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ay ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard zh with value 1 for k ...
Considering guard z with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

frate, target rule = 125 public <dyke> = (((sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_d> sh)] | [(sh <any_Cx_sh_p_z_d>)]) (d | ((<any_Cx_sh_p_z_d> sh) | (sh <any_Cx_sh_p_z_d>)))) ((([(<any_Vx_sh_sh_ay_noSlide> sh)] | [(sh <any_Vx_sh_sh_ay_noSlide>)]) ([(<any_Cx_sh_sh_k_d> sh)] | [(sh <any_Cx_sh_sh_k_d>)])) (ay | ((<any_Vx_sh_sh_ay_noSlide> sh) | (sh <any_Vx_sh_sh_ay_noSlide>)))) (([(<any_Cx_zh_sh_k> zh)] | [(zh <any_Cx_zh_sh_k>)]) (k | ((<any_Cx_zh_sh_k> zh) | (zh <any_Cx_zh_sh_k>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_zh_k_g> g)] | [(g <any_Cx_zh_k_g>)]) sil))
Running scan for frate = 105
Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ay ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 1 for k ...
Considering guard zh with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, z

frate, target rule = 105 public <dyke> = (((sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_d> sh)] | [(sh <any_Cx_sh_p_z_d>)]) (d | ((<any_Cx_sh_p_z_d> sh) | (sh <any_Cx_sh_p_z_d>)))) ((([(<any_Vx_sh_sh_ay_noSlide> sh)] | [(sh <any_Vx_sh_sh_ay_noSlide>)]) ([(<any_Cx_sh_sh_k_d> sh)] | [(sh <any_Cx_sh_sh_k_d>)])) (ay | ((<any_Vx_sh_sh_ay_noSlide> sh) | (sh <any_Vx_sh_sh_ay_noSlide>)))) (([(<any_Cx_z_sh_k> z)] | [(z <any_Cx_z_sh_k>)]) (k | ((<any_Cx_z_sh_k> z) | (z <any_Cx_z_sh_k>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_z_k_p> p)] | [(p <any_Cx_z_k_p>)]) sil))
Running scan for frate = 91
Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ay ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard zh with value 1 for k ...
Considering guard z with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

frate, target rule = 91 public <dyke> = (((sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_d> sh)] | [(sh <any_Cx_sh_p_z_d>)]) (d | ((<any_Cx_sh_p_z_d> sh) | (sh <any_Cx_sh_p_z_d>)))) ((([(<any_Vx_sh_sh_ay_noSlide> sh)] | [(sh <any_Vx_sh_sh_ay_noSlide>)]) ([(<any_Cx_sh_sh_k_d> sh)] | [(sh <any_Cx_sh_sh_k_d>)])) (ay | ((<any_Vx_sh_sh_ay_noSlide> sh) | (sh <any_Vx_sh_sh_ay_noSlide>)))) (([(<any_Cx_zh_sh_k> zh)] | [(zh <any_Cx_zh_sh_k>)]) (k | ((<any_Cx_zh_sh_k> zh) | (zh <any_Cx_zh_sh_k>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_zh_k_hh> hh)] | [(hh <any_Cx_zh_k_hh>)]) sil))
Running scan for frate = 80
Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ay ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 1 for k ...
Considering guard zh with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

frate, target rule = 80 public <dyke> = (((sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_d> sh)] | [(sh <any_Cx_sh_p_z_d>)]) (d | ((<any_Cx_sh_p_z_d> sh) | (sh <any_Cx_sh_p_z_d>)))) ((([(<any_Vx_sh_sh_ay_noSlide> sh)] | [(sh <any_Vx_sh_sh_ay_noSlide>)]) ([(<any_Cx_sh_sh_k_d> sh)] | [(sh <any_Cx_sh_sh_k_d>)])) (ay | ((<any_Vx_sh_sh_ay_noSlide> sh) | (sh <any_Vx_sh_sh_ay_noSlide>)))) (([(<any_Cx_zh_sh_k> zh)] | [(zh <any_Cx_zh_sh_k>)]) (k | ((<any_Cx_zh_sh_k> zh) | (zh <any_Cx_zh_sh_k>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_k_thr> thr)] | [(thr <any_Cx_zh_k_thr>)]) sil))
Running scan for frate = 72
Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ay ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard zh with value 1 for k ...
Considering guard z with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

frate, target rule = 72 public <dyke> = (((sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_d> sh)] | [(sh <any_Cx_sh_p_z_d>)]) (d | ((<any_Cx_sh_p_z_d> sh) | (sh <any_Cx_sh_p_z_d>)))) ((([(<any_Vx_sh_sh_ay_noSlide> sh)] | [(sh <any_Vx_sh_sh_ay_noSlide>)]) ([(<any_Cx_sh_sh_k_d> sh)] | [(sh <any_Cx_sh_sh_k_d>)])) (ay | ((<any_Vx_sh_sh_ay_noSlide> sh) | (sh <any_Vx_sh_sh_ay_noSlide>)))) (([(<any_Cx_zh_sh_k> zh)] | [(zh <any_Cx_zh_sh_k>)]) (k | ((<any_Cx_zh_sh_k> zh) | (zh <any_Cx_zh_sh_k>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_zh_k_g> g)] | [(g <any_Cx_zh_k_g>)]) sil))

results =
{72 [{sil 0 10} {d 11 16} {ay 17 37} {k 38 57} {sil 58 70}]}
{80 [{sil 0 12} {d 13 18} {ay 19 42} {k 43 62} {sil 63 76}]}
{91 [{sil 0 14} {d 15 20} {ay 21 48} {k 49 73} {sil 74 117}]}
{105 [{sil 0 17} {d 18 24} {ay 25 57} {k 58 84} {sil 85 136}]}
{125 [{sil 3 22} {d 23 29} {ay 30 70} {k 71 101} {sil 102 163}]}

normalised results =
{72 [{sil 0 10} {d 15 22} {ay 24 51} {k 53 79} {sil 81 97}]}
{80 [{sil 0 12} {d 16 23} {ay 24 53} {k 54 78} {sil 79 95}]}
{91 [{sil 0 14} {d 16 22} {ay 23 53} {k 54 80} {sil 81 129}]}
{105 [{sil 0 17} {d 17 23} {ay 24 54} {k 55 80} {sil 81 130}]}
{125 [{sil 3 22} {d 18 23} {ay 24 56} {k 57 81} {sil 82 130}]}

ruleAligned = [{{d 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ay 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{k 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {d 15 22} {ay 24 51} {k 53 79} {sil 81 81}]}
{80 [{sil 0 0} {d 16 23} {ay 24 53} {k 54 78} {sil 79 79}]}
{91 [{sil 0 0} {d 16 22} {ay 23 53} {k 54 80} {sil 81 81}]}
{105 [{sil 0 0} {d 17 23} {ay 24 54} {k 55 80} {sil 81 81}]}
{125 [{sil 3 3} {d 18 23} {ay 24 56} {k 57 81} {sil 82 82}]}

timeAligned = [{{d 16 23} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ay 24 53} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{k 54 80} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 22
i, iTime, newITime, timeStartFrom = 2 1 2 51
combinedVerdict    = [{d 0} {ay 0} {k 0}]
ruleAlignedVerdict = [{d 0} {ay 0} {k 0}]

score->
+1 for d
+1 for ay
+1 for k
score<-: 8
testPronounce d good ay good k good
publish->
phonsToAlphas = [{[d] d} {[ay] y} {[k] ke}]
getVerdict<-:new {d [d] 0}
getVerdict<-:new {y [ay] 0}
getVerdict<-:new {ke [k] 0}
lettersVerdicts = [{d [d] 0} {y [ay] 0} {ke [k] 0}]
publish<-
Total: 188.119418ms
{
  "results": [
    {
      "letters": "d",
      "phonemes": "d",
      "verdict": "good"
    },
    {
      "letters": "y",
      "phonemes": "ɑɪ",
      "verdict": "good"
    },
    {
      "letters": "ke",
      "phonemes": "k",
      "verdict": "good"
    }
  ],
  "err": null
}
