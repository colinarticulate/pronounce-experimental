
 length of audio =  2.298375



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.64 1 1.6400000000000001

 start3, duration3, end3 =  0.8 0.72 1.52

 Initial start, duration, end =  0.54 1.1 1.6400000000000001

 Cut at: start, duration =  0.54 1.55     guard_end =  2.09 

Running scan for frate = 125
Considering guard y with value 1 for ch ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 1 for ehr ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 125 public <chair> = (((sil [((z <any_Cx_ch_z_p>) | (<any_Cx_ch_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_ch_z_p>) | (<any_Cx_ch_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_y_p_z_ch> y)] | [(y <any_Cx_y_p_z_ch>)]) (ch | ((<any_Cx_y_p_z_ch_ehr> y) | (y <any_Cx_y_p_z_ch_ehr>)))) (([(<any_Cx_y_y_ehr_ch> y)] | [(y <any_Cx_y_y_ehr_ch>)]) (ehr | ((<any_Cx_y_y_ehr> y) | (y <any_Cx_y_y_ehr>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_y_ehr_hh> hh)] | [(hh <any_Cx_y_ehr_hh>)]) sil))
Running scan for frate = 105
Considering guard y with value 1 for ch ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 1 for ehr ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 105 public <chair> = (((sil [((z <any_Cx_ch_z_p>) | (<any_Cx_ch_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_ch_z_p>) | (<any_Cx_ch_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_y_p_z_ch> y)] | [(y <any_Cx_y_p_z_ch>)]) (ch | ((<any_Cx_y_p_z_ch_ehr> y) | (y <any_Cx_y_p_z_ch_ehr>)))) (([(<any_Cx_y_y_ehr_ch> y)] | [(y <any_Cx_y_y_ehr_ch>)]) (ehr | ((<any_Cx_y_y_ehr> y) | (y <any_Cx_y_y_ehr>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_y_ehr_thr> thr)] | [(thr <any_Cx_y_ehr_thr>)]) sil))
Running scan for frate = 91
Considering guard y with value 1 for ch ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 1 for ehr ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 91 public <chair> = (((sil [((z <any_Cx_ch_z_p>) | (<any_Cx_ch_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_ch_z_p>) | (<any_Cx_ch_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_y_p_z_ch> y)] | [(y <any_Cx_y_p_z_ch>)]) (ch | ((<any_Cx_y_p_z_ch_ehr> y) | (y <any_Cx_y_p_z_ch_ehr>)))) (([(<any_Cx_y_y_ehr_ch> y)] | [(y <any_Cx_y_y_ehr_ch>)]) (ehr | ((<any_Cx_y_y_ehr> y) | (y <any_Cx_y_y_ehr>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_y_ehr_thr> thr)] | [(thr <any_Cx_y_ehr_thr>)]) sil))
Running scan for frate = 80
Considering guard y with value 1 for ch ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 1 for ehr ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 80 public <chair> = (((sil [((z <any_Cx_ch_z_p>) | (<any_Cx_ch_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_ch_z_p>) | (<any_Cx_ch_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_y_p_z_ch> y)] | [(y <any_Cx_y_p_z_ch>)]) (ch | ((<any_Cx_y_p_z_ch_ehr> y) | (y <any_Cx_y_p_z_ch_ehr>)))) (([(<any_Cx_y_y_ehr_ch> y)] | [(y <any_Cx_y_y_ehr_ch>)]) (ehr | ((<any_Cx_y_y_ehr> y) | (y <any_Cx_y_y_ehr>)))) (([(<any_vowel_noSlide> ng)] | [(ng <any_vowel_noSlide>)]) ([(<any_Cx_y_ehr_ng> ng)] | [(ng <any_Cx_y_ehr_ng>)]) sil))
Running scan for frate = 72
Considering guard y with value 1 for ch ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 1 for ehr ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 72 public <chair> = (((sil [((z <any_Cx_ch_z_p>) | (<any_Cx_ch_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_ch_z_p>) | (<any_Cx_ch_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_y_p_z_ch> y)] | [(y <any_Cx_y_p_z_ch>)]) (ch | ((<any_Cx_y_p_z_ch_ehr> y) | (y <any_Cx_y_p_z_ch_ehr>)))) (([(<any_Cx_y_y_ehr_ch> y)] | [(y <any_Cx_y_y_ehr_ch>)]) (ehr | ((<any_Cx_y_y_ehr> y) | (y <any_Cx_y_y_ehr>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_y_ehr_hh> hh)] | [(hh <any_Cx_y_ehr_hh>)]) sil))

results =
{72 [{sil 0 6} {d 7 15} {z 16 23} {y 24 27} {hh 28 56} {ehr 57 62} {sil 63 73}]}
{80 [{sil 0 9} {d 10 17} {z 18 26} {y 27 30} {hh 31 62} {ehr 63 69} {sil 70 79}]}
{91 [{sil 0 14} {d 15 19} {z 20 30} {y 31 35} {hh 36 70} {ehr 71 87} {sil 88 139}]}
{105 [{sil 0 18} {d 19 22} {z 23 35} {y 36 41} {hh 42 83} {ehr 84 96} {sil 97 158}]}
{125 [{sil 3 24} {ch 25 28} {z 29 43} {y 44 50} {hh 51 55} {ae 56 114} {sil 115 189}]}

normalised results =
{72 [{sil 0 6} {d 10 21} {z 22 32} {y 33 38} {hh 39 78} {ehr 79 86} {sil 88 101}]}
{80 [{sil 0 9} {d 13 21} {z 23 33} {y 34 38} {hh 39 78} {ehr 79 86} {sil 88 99}]}
{91 [{sil 0 14} {d 16 21} {z 22 33} {y 34 38} {hh 40 77} {ehr 78 96} {sil 97 153}]}
{105 [{sil 0 18} {d 18 21} {z 22 33} {y 34 39} {hh 40 79} {ehr 80 91} {sil 92 150}]}
{125 [{sil 3 24} {ch 20 22} {z 23 34} {y 35 40} {hh 41 44} {ae 45 91} {sil 92 151}]}

ruleAligned = [{{d 3} [{0 1} {1 1} {2 1}]} {{z 3} [{0 2} {1 2} {2 2} {3 2}]} {{ch 2} [{4 1}]} {{hh 3} [{0 4} {1 4} {2 4} {3 4}]} {{ehr 0} [{0 5} {1 5} {2 5} {3 5}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {d 10 21} {z 22 32} {y 33 38} {hh 39 78} {ehr 79 86} {sil 88 88}]}
{80 [{sil 0 0} {d 13 21} {z 23 33} {y 34 34} {hh 39 78} {ehr 79 86} {sil 88 88}]}
{91 [{sil 0 0} {d 16 21} {z 22 33} {y 34 34} {hh 40 77} {ehr 78 96} {sil 97 97}]}
{105 [{sil 0 0} {d 18 18} {z 22 33} {y 34 39} {hh 40 79} {ehr 80 91} {sil 92 92}]}
{125 [{sil 3 3} {ch 20 22} {z 23 34} {y 35 40} {hh 41 41} {ae 45 45} {sil 92 92}]}

timeAligned = [{{d 16 21} [{0 1} {1 1} {2 1}]} {{z 22 33} [{0 2} {2 2} {3 2} {1 2} {4 2}]} {{y 35 38} [{0 3} {3 3} {4 3}]} {{hh 40 78} [{0 4} {1 4} {2 4} {3 4}]} {{ehr 79 86} [{0 5} {1 5} {2 5} {3 5}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 21
i, iTime, newITime, timeStartFrom = 2 1 -1 32
i, iTime, newITime, timeStartFrom = 3 1 3 32
i, iTime, newITime, timeStartFrom = 4 3 4 77
combinedVerdict    = [{d 3} {z 3} {ch 2} {y 3} {hh 3} {ehr 0}]
ruleAlignedVerdict = [{d 3} {z 3} {ch 2} {hh 3} {ehr 0}]

score->
-1 for d
-1 for z
-1 for ch
-1 for y
-1 for hh
+1 for ehr
score<-: -4
bestResult = {-4 [{d 3} {z 3} {ch 2} {y 3} {hh 3} {ehr 0}] [ch ehr]}
testPronounce d surprise z surprise ch missing y surprise hh surprise ehr good
publish->
phonsToAlphas = [{[ch] ch} {[ehr] air}]
getVerdict<-:new {ch [ch] 2}
getVerdict<-:new {air [ehr] 0}
lettersVerdicts = [{d [d] 3} {z [z] 3} {ch [ch] 2} {y [y] 3} {hh [hh] 3} {air [ehr] 0}]
publish<-
Total: 211.162474ms
{
  "results": [
    {
      "letters": "d",
      "phonemes": "d",
      "verdict": "surprise"
    },
    {
      "letters": "z",
      "phonemes": "z",
      "verdict": "surprise"
    },
    {
      "letters": "ch",
      "phonemes": "ʧ",
      "verdict": "missing"
    },
    {
      "letters": "y",
      "phonemes": "j",
      "verdict": "surprise"
    },
    {
      "letters": "hh",
      "phonemes": "h",
      "verdict": "surprise"
    },
    {
      "letters": "air",
      "phonemes": "ɛː",
      "verdict": "good"
    }
  ],
  "err": null
}
