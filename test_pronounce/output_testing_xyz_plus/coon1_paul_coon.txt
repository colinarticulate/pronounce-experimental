
 length of audio =  5.409875



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.64 1.28 1.92

 start3, duration3, end3 =  0.66 0.76 1.42

 Initial start, duration, end =  0.54 1.38 1.92

 Cut at: start, duration =  0.54 1.8299999999999998     guard_end =  2.37 

Running scan for frate = 125
Running scan for frate = 125
Considering guard z with value 1 for k ...
Considering guard zh with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, z

Considering guard zh with value 1 for k ...
Considering guard z with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

Considering guard zh with value 2 for uw ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard z with value 1 for uwn ...
Considering guard zh with value 1 for uwn ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

Considering guard sh with value 0.6 for n ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 125 public <coon> = (((sil [((g <any_Cx_k_g_b>) | (<any_Cx_k_g_b> g))] [((g <any_vowel_noSlide>) | (<any_vowel_noSlide> g))]) | (sil b (sil [((g <any_Cx_k_g_b>) | (<any_Cx_k_g_b> g))] [((g <any_vowel_noSlide>) | (<any_vowel_noSlide> g))]))) (([(<any_Cx_zh_b_g_k> zh)] | [(zh <any_Cx_zh_b_g_k>)]) (k | d | ((<any_Cx_zh_b_g_k_uwn> zh) | (zh <any_Cx_zh_b_g_k_uwn>)))) (([(<any_Cx_zh_zh_uwn_k> zh)] | [(zh <any_Cx_zh_zh_uwn_k>)]) (uwn | ((<any_Cx_zh_zh_uwn> zh) | (zh <any_Cx_zh_zh_uwn>)))) (([(<any_vowel_noSlide> f)] | [(f <any_vowel_noSlide>)]) ([(<any_Cx_zh_uwn_f> f)] | [(f <any_Cx_zh_uwn_f>)]) sil))
frate, target rule = 125 public <coon> = (((sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil b (sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_z_b_d_k> z)] | [(z <any_Cx_z_b_d_k>)]) (k | d | ((<any_Cx_z_b_d_k> z) | (z <any_Cx_z_b_d_k>)))) ((([(<any_Vx_zh_z_uw_noSlide> zh)] | [(zh <any_Vx_zh_z_uw_noSlide>)]) ([(<any_Cx_zh_z_n_k> zh)] | [(zh <any_Cx_zh_z_n_k>)])) (uw | ((<any_Vx_zh_z_uw_noSlide> zh) | (zh <any_Vx_zh_z_uw_noSlide>)))) (([(<any_Cx_sh_zh_n> sh)] | [(sh <any_Cx_sh_zh_n>)]) (n | ((<any_Cx_sh_zh_n> sh) | (sh <any_Cx_sh_zh_n>)))) (([(<any_vowel_noSlide> b)] | [(b <any_vowel_noSlide>)]) ([(<any_Cx_sh_n_b> b)] | [(b <any_Cx_sh_n_b>)]) sil))
Running scan for frate = 105
Considering guard zh with value 1 for k ...
Considering guard z with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

Running scan for frate = 105
Considering guard z with value 1 for uwn ...
Considering guard zh with value 1 for uwn ...
candidateGuards = map[z:true zh:true]
Picking guard, z

Considering guard zh with value 1 for k ...
Considering guard z with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

frate, target rule = 105 public <coon> = (((sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]) | (sil b (sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]))) (([(<any_Cx_zh_b_p_k> zh)] | [(zh <any_Cx_zh_b_p_k>)]) (k | d | ((<any_Cx_zh_b_p_k_uwn> zh) | (zh <any_Cx_zh_b_p_k_uwn>)))) (([(<any_Cx_z_zh_uwn_k> z)] | [(z <any_Cx_z_zh_uwn_k>)]) (uwn | ((<any_Cx_z_zh_uwn> z) | (z <any_Cx_z_zh_uwn>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_z_uwn_hh> hh)] | [(hh <any_Cx_z_uwn_hh>)]) sil))
Considering guard zh with value 2 for uw ...
candidateGuards = map[zh:true]
Picking guard, zh

Running scan for frate = 91
Considering guard zh with value 1 for k ...
Considering guard z with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

Considering guard sh with value 0.6 for n ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 1 for uwn ...
Considering guard zh with value 1 for uwn ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

frate, target rule = 105 public <coon> = (((sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil b (sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_zh_b_d_k> zh)] | [(zh <any_Cx_zh_b_d_k>)]) (k | d | ((<any_Cx_zh_b_d_k> zh) | (zh <any_Cx_zh_b_d_k>)))) ((([(<any_Vx_zh_zh_uw_noSlide> zh)] | [(zh <any_Vx_zh_zh_uw_noSlide>)]) ([(<any_Cx_zh_zh_n_k> zh)] | [(zh <any_Cx_zh_zh_n_k>)])) (uw | ((<any_Vx_zh_zh_uw_noSlide> zh) | (zh <any_Vx_zh_zh_uw_noSlide>)))) (([(<any_Cx_sh_zh_n> sh)] | [(sh <any_Cx_sh_zh_n>)]) (n | ((<any_Cx_sh_zh_n> sh) | (sh <any_Cx_sh_zh_n>)))) (([(<any_vowel_noSlide> ng)] | [(ng <any_vowel_noSlide>)]) ([(<any_Cx_sh_n_ng> ng)] | [(ng <any_Cx_sh_n_ng>)]) sil))
frate, target rule = 91 public <coon> = (((sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil b (sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_zh_b_d_k> zh)] | [(zh <any_Cx_zh_b_d_k>)]) (k | d | ((<any_Cx_zh_b_d_k_uwn> zh) | (zh <any_Cx_zh_b_d_k_uwn>)))) (([(<any_Cx_zh_zh_uwn_k> zh)] | [(zh <any_Cx_zh_zh_uwn_k>)]) (uwn | ((<any_Cx_zh_zh_uwn> zh) | (zh <any_Cx_zh_zh_uwn>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_uwn_thr> thr)] | [(thr <any_Cx_zh_uwn_thr>)]) sil))
Running scan for frate = 91
Running scan for frate = 80
Considering guard zh with value 1 for k ...
Considering guard z with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

Considering guard z with value 1 for k ...
Considering guard zh with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, z

Considering guard zh with value 1 for uwn ...
Considering guard z with value 1 for uwn ...
candidateGuards = map[z:true zh:true]
Picking guard, z

Considering guard zh with value 2 for uw ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 80 public <coon> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_zh_b_ch_k> zh)] | [(zh <any_Cx_zh_b_ch_k>)]) (k | d | ((<any_Cx_zh_b_ch_k_uwn> zh) | (zh <any_Cx_zh_b_ch_k_uwn>)))) (([(<any_Cx_z_zh_uwn_k> z)] | [(z <any_Cx_z_zh_uwn_k>)]) (uwn | ((<any_Cx_z_zh_uwn> z) | (z <any_Cx_z_zh_uwn>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_z_uwn_thr> thr)] | [(thr <any_Cx_z_uwn_thr>)]) sil))
Considering guard sh with value 0.6 for n ...
candidateGuards = map[sh:true]
Picking guard, sh

Running scan for frate = 72
Considering guard zh with value 1 for k ...
Considering guard z with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

frate, target rule = 91 public <coon> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_z_b_ch_k> z)] | [(z <any_Cx_z_b_ch_k>)]) (k | d | ((<any_Cx_z_b_ch_k> z) | (z <any_Cx_z_b_ch_k>)))) ((([(<any_Vx_zh_z_uw_noSlide> zh)] | [(zh <any_Vx_zh_z_uw_noSlide>)]) ([(<any_Cx_zh_z_n_k> zh)] | [(zh <any_Cx_zh_z_n_k>)])) (uw | ((<any_Vx_zh_z_uw_noSlide> zh) | (zh <any_Vx_zh_z_uw_noSlide>)))) (([(<any_Cx_sh_zh_n> sh)] | [(sh <any_Cx_sh_zh_n>)]) (n | ((<any_Cx_sh_zh_n> sh) | (sh <any_Cx_sh_zh_n>)))) (([(<any_vowel_noSlide> ng)] | [(ng <any_vowel_noSlide>)]) ([(<any_Cx_sh_n_ng> ng)] | [(ng <any_Cx_sh_n_ng>)]) sil))
Considering guard zh with value 1 for uwn ...
Considering guard z with value 1 for uwn ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

Running scan for frate = 80
frate, target rule = 72 public <coon> = (((sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil b (sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_zh_b_d_k> zh)] | [(zh <any_Cx_zh_b_d_k>)]) (k | d | ((<any_Cx_zh_b_d_k_uwn> zh) | (zh <any_Cx_zh_b_d_k_uwn>)))) (([(<any_Cx_zh_zh_uwn_k> zh)] | [(zh <any_Cx_zh_zh_uwn_k>)]) (uwn | ((<any_Cx_zh_zh_uwn> zh) | (zh <any_Cx_zh_zh_uwn>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_zh_uwn_hh> hh)] | [(hh <any_Cx_zh_uwn_hh>)]) sil))
Considering guard zh with value 1 for k ...
Considering guard z with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

Considering guard zh with value 2 for uw ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard sh with value 0.6 for n ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 80 public <coon> = (((sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil b (sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_zh_b_d_k> zh)] | [(zh <any_Cx_zh_b_d_k>)]) (k | d | ((<any_Cx_zh_b_d_k> zh) | (zh <any_Cx_zh_b_d_k>)))) ((([(<any_Vx_zh_zh_uw_noSlide> zh)] | [(zh <any_Vx_zh_zh_uw_noSlide>)]) ([(<any_Cx_zh_zh_n_k> zh)] | [(zh <any_Cx_zh_zh_n_k>)])) (uw | ((<any_Vx_zh_zh_uw_noSlide> zh) | (zh <any_Vx_zh_zh_uw_noSlide>)))) (([(<any_Cx_sh_zh_n> sh)] | [(sh <any_Cx_sh_zh_n>)]) (n | ((<any_Cx_sh_zh_n> sh) | (sh <any_Cx_sh_zh_n>)))) (([(<any_vowel_noSlide> b)] | [(b <any_vowel_noSlide>)]) ([(<any_Cx_sh_n_b> b)] | [(b <any_Cx_sh_n_b>)]) sil))
Running scan for frate = 72
Considering guard zh with value 1 for k ...
Considering guard z with value 1 for k ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

Considering guard zh with value 2 for uw ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard sh with value 0.6 for n ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 72 public <coon> = (((sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]) | (sil b (sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]))) (([(<any_Cx_zh_b_p_k> zh)] | [(zh <any_Cx_zh_b_p_k>)]) (k | d | ((<any_Cx_zh_b_p_k> zh) | (zh <any_Cx_zh_b_p_k>)))) ((([(<any_Vx_zh_zh_uw_noSlide> zh)] | [(zh <any_Vx_zh_zh_uw_noSlide>)]) ([(<any_Cx_zh_zh_n_k> zh)] | [(zh <any_Cx_zh_zh_n_k>)])) (uw | ((<any_Vx_zh_zh_uw_noSlide> zh) | (zh <any_Vx_zh_zh_uw_noSlide>)))) (([(<any_Cx_sh_zh_n> sh)] | [(sh <any_Cx_sh_zh_n>)]) (n | ((<any_Cx_sh_zh_n> sh) | (sh <any_Cx_sh_zh_n>)))) (([(<any_vowel_noSlide> ng)] | [(ng <any_vowel_noSlide>)]) ([(<any_Cx_sh_n_ng> ng)] | [(ng <any_Cx_sh_n_ng>)]) sil))

results =
{72 [{sil 0 11} {k 12 21} {uw 22 39} {n 40 54} {sil 55 67}]}
{80 [{sil 0 12} {k 13 24} {uw 25 40} {n 41 60} {sil 61 73}]}
{91 [{sil 0 14} {k 15 27} {uw 28 49} {n 50 69} {sil 70 165}]}
{105 [{sil 0 18} {k 19 31} {uw 32 56} {n 57 80} {sil 81 187}]}
{125 [{sil 3 23} {k 24 38} {uw 39 68} {n 69 103} {sil 104 224}]}

normalised results =
{72 [{sil 0 11} {k 17 29} {uw 31 54} {n 56 75} {sil 76 93}]}
{80 [{sil 0 12} {k 16 30} {uw 31 50} {n 51 75} {sil 76 91}]}
{91 [{sil 0 14} {k 16 30} {uw 31 54} {n 55 76} {sil 77 181}]}
{105 [{sil 0 18} {k 18 30} {uw 30 53} {n 54 76} {sil 77 178}]}
{125 [{sil 3 23} {k 19 30} {uw 31 54} {n 55 82} {sil 83 179}]}

ruleAligned = [{{k 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{uw 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{n 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {k 17 29} {uw 31 54} {n 56 75} {sil 76 76}]}
{80 [{sil 0 0} {k 16 30} {uw 31 50} {n 51 75} {sil 76 76}]}
{91 [{sil 0 0} {k 16 30} {uw 31 54} {n 55 76} {sil 77 77}]}
{105 [{sil 0 0} {k 18 30} {uw 30 53} {n 54 76} {sil 77 77}]}
{125 [{sil 3 3} {k 19 30} {uw 31 54} {n 55 82} {sil 83 83}]}

timeAligned = [{{k 17 30} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{uw 31 54} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{n 55 76} [{1 3} {2 3} {3 3} {4 3} {0 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 29
i, iTime, newITime, timeStartFrom = 2 1 2 50
combinedVerdict    = [{k 0} {uw 0} {n 0}]
ruleAlignedVerdict = [{k 0} {uw 0} {n 0}]

score->
+1 for k
+1 for uw
+1 for n
score<-: 8

results =
{72 [{sil 0 12} {d 13 21} {uw 22 39} {k 40 42} {uwn 43 54} {sil 55 67}]}
{80 [{sil 0 14} {ch 15 23} {uw 24 51} {d 52 54} {uwn 55 60} {sil 61 73}]}
{91 [{sil 0 14} {k 15 29} {uwn 30 69} {sil 70 165}]}
{105 [{sil 0 18} {k 19 34} {uwn 35 79} {sil 80 187}]}
{125 [{sil 3 24} {g 25 39} {uw 40 63} {d 64 66} {uwn 67 95} {sil 96 224}]}

normalised results =
{72 [{sil 0 12} {d 18 29} {uw 31 54} {k 56 56} {uwn 60 75} {sil 76 93}]}
{80 [{sil 0 14} {ch 19 29} {uw 30 64} {d 65 65} {uwn 69 75} {sil 76 91}]}
{91 [{sil 0 14} {k 16 32} {uwn 33 76} {sil 77 181}]}
{105 [{sil 0 18} {k 18 32} {uwn 33 75} {sil 76 178}]}
{125 [{sil 3 24} {g 20 31} {uw 32 50} {d 51 51} {uwn 54 76} {sil 77 179}]}

ruleAligned = [{{uw 3} [{0 2} {1 2} {4 2}]} {{k 2} [{2 1} {3 1}]} {{uwn 0} [{0 4} {1 4} {2 2} {3 2} {4 4}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {d 18 29} {uw 31 54} {k 56 56} {uwn 60 75} {sil 76 76}]}
{80 [{sil 0 0} {ch 19 29} {uw 30 64} {d 65 65} {uwn 69 75} {sil 76 76}]}
{91 [{sil 0 0} {k 16 32} {uwn 33 76} {sil 77 77}]}
{105 [{sil 0 0} {k 18 32} {uwn 33 75} {sil 76 76}]}
{125 [{sil 3 3} {g 20 31} {uw 32 50} {d 51 51} {uwn 54 76} {sil 77 77}]}

timeAligned = [{{uw 32 50} [{0 2} {1 2} {4 2}]} {{uwn 54 75} [{2 2} {3 2} {4 4} {0 4} {1 4}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 -1 50
i, iTime, newITime, timeStartFrom = 2 0 1 50
combinedVerdict    = [{uw 3} {k 2} {uwn 0}]
ruleAlignedVerdict = [{uw 3} {k 2} {uwn 0}]

score->
-1 for uw
-1 for k
+1 for uwn
score<-: -1
testPronounce k good uw good n good
publish->
phonsToAlphas = [{[k] c} {[uw] oo} {[n] n}]
getVerdict<-:new {c [k] 0}
getVerdict<-:new {oo [uw] 0}
getVerdict<-:new {n [n] 0}
lettersVerdicts = [{c [k] 0} {oo [uw] 0} {n [n] 0}]
publish<-
Total: 573.11788ms
{
  "results": [
    {
      "letters": "c",
      "phonemes": "k",
      "verdict": "good"
    },
    {
      "letters": "oo",
      "phonemes": "u",
      "verdict": "good"
    },
    {
      "letters": "n",
      "phonemes": "n",
      "verdict": "good"
    }
  ],
  "err": null
}
