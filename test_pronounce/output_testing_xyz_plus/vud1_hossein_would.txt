
 length of audio =  1.834313



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.84 0.58 1.42

 start3, duration3, end3 =  0.84 0.42000000000000004 1.26

 Initial start, duration, end =  0.74 0.6799999999999999 1.42

 Cut at: start, duration =  0.74 1.074313     guard_end =  1.814313 

Running scan for frate = 125
Running scan for frate = 125
Considering guard sh with value 0.8 for w ...
Considering guard g with value 0.8 for w ...
candidateGuards = map[g:true sh:true]
Picking guard, sh

Considering guard sh with value 3 for uh ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 0.8 for w ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard w with value 1 for d ...
candidateGuards = map[w:true]
Picking guard, w

Considering guard sh with value 3 for ax ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh


frate, target rule = 125 public <would> = (((sil [((z <any_Cx_w_z_p>) | (<any_Cx_w_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_w_z_p>) | (<any_Cx_w_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_w> sh)] | [(sh <any_Cx_sh_p_z_w>)]) (w | v | ((<any_Cx_sh_p_z_w> sh) | (sh <any_Cx_sh_p_z_w>)))) ((([(<any_Vx_sh_sh_uh_noSlide> sh)] | [(sh <any_Vx_sh_sh_uh_noSlide>)]) ([(<any_Cx_sh_sh_d_w> sh)] | [(sh <any_Cx_sh_sh_d_w>)])) (uh | ((<any_Vx_sh_sh_uh_noSlide> sh) | (sh <any_Vx_sh_sh_uh_noSlide>)))) (([(<any_Cx_w_sh_d> w)] | [(w <any_Cx_w_sh_d>)]) (d | ((<any_Cx_w_sh_d> w) | (w <any_Cx_w_sh_d>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_w_d_g> g)] | [(g <any_Cx_w_d_g>)]) sil))
Running scan for frate = 105
Considering guard g with value 0.8 for w ...
Considering guard sh with value 0.8 for w ...
candidateGuards = map[g:true sh:true]
Picking guard, g


frate, target rule = 125 public <would> = (((sil [((z <any_Cx_w_z_p>) | (<any_Cx_w_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_w_z_p>) | (<any_Cx_w_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_w_ax> sh)] | [(sh <any_Cx_sh_p_z_w_ax>)]) (w | v | ((<any_Cx_sh_p_z_w_ax> sh) | (sh <any_Cx_sh_p_z_w_ax>)))) (([(<any_Cx_sh_sh_ax_w> sh)] | [(sh <any_Cx_sh_sh_ax_w>)]) (ax | ((<any_Cx_sh_sh_ax_d> sh) | (sh <any_Cx_sh_sh_ax_d>)))) (([(<any_Cx_sh_sh_d_ax> sh)] | [(sh <any_Cx_sh_sh_d_ax>)]) (d | ((<any_Cx_sh_sh_d_ax> sh) | (sh <any_Cx_sh_sh_d_ax>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_thr> thr)] | [(thr <any_Cx_sh_d_thr>)]) sil))
Running scan for frate = 105
Considering guard sh with value 0.8 for w ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for ax ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for uh ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard w with value 1 for d ...
candidateGuards = map[w:true]
Picking guard, w


frate, target rule = 105 public <would> = (((sil [((l <any_Cx_w_l_p>) | (<any_Cx_w_l_p> l))] [((l <any_vowel_noSlide>) | (<any_vowel_noSlide> l))]) | (sil p (sil [((l <any_Cx_w_l_p>) | (<any_Cx_w_l_p> l))] [((l <any_vowel_noSlide>) | (<any_vowel_noSlide> l))]))) (([(<any_Cx_sh_p_l_w_ax> sh)] | [(sh <any_Cx_sh_p_l_w_ax>)]) (w | v | ((<any_Cx_sh_p_l_w_ax> sh) | (sh <any_Cx_sh_p_l_w_ax>)))) (([(<any_Cx_sh_sh_ax_w> sh)] | [(sh <any_Cx_sh_sh_ax_w>)]) (ax | ((<any_Cx_sh_sh_ax_d> sh) | (sh <any_Cx_sh_sh_ax_d>)))) (([(<any_Cx_sh_sh_d_ax> sh)] | [(sh <any_Cx_sh_sh_d_ax>)]) (d | ((<any_Cx_sh_sh_d_ax> sh) | (sh <any_Cx_sh_sh_d_ax>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_g> g)] | [(g <any_Cx_sh_d_g>)]) sil))
Running scan for frate = 91

Considering guard sh with value 0.8 for w ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 105 public <would> = (((sil [((l <any_Cx_w_l_p>) | (<any_Cx_w_l_p> l))] [((l <any_vowel_noSlide>) | (<any_vowel_noSlide> l))]) | (sil p (sil [((l <any_Cx_w_l_p>) | (<any_Cx_w_l_p> l))] [((l <any_vowel_noSlide>) | (<any_vowel_noSlide> l))]))) (([(<any_Cx_g_p_l_w> g)] | [(g <any_Cx_g_p_l_w>)]) (w | v | ((<any_Cx_g_p_l_w> g) | (g <any_Cx_g_p_l_w>)))) ((([(<any_Vx_sh_g_uh_noSlide> sh)] | [(sh <any_Vx_sh_g_uh_noSlide>)]) ([(<any_Cx_sh_g_d_w> sh)] | [(sh <any_Cx_sh_g_d_w>)])) (uh | ((<any_Vx_sh_g_uh_noSlide> sh) | (sh <any_Vx_sh_g_uh_noSlide>)))) (([(<any_Cx_w_sh_d> w)] | [(w <any_Cx_w_sh_d>)]) (d | ((<any_Cx_w_sh_d> w) | (w <any_Cx_w_sh_d>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_w_d_thr> thr)] | [(thr <any_Cx_w_d_thr>)]) sil))
Running scan for frate = 91
Considering guard sh with value 3 for ax ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard g with value 0.8 for w ...
Considering guard sh with value 0.8 for w ...
candidateGuards = map[g:true sh:true]
Picking guard, g

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for uh ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard w with value 1 for d ...
candidateGuards = map[w:true]
Picking guard, w


frate, target rule = 91 public <would> = (((sil [((r <any_Cx_w_r_p>) | (<any_Cx_w_r_p> r))] [((r <any_vowel_noSlide>) | (<any_vowel_noSlide> r))]) | (sil p (sil [((r <any_Cx_w_r_p>) | (<any_Cx_w_r_p> r))] [((r <any_vowel_noSlide>) | (<any_vowel_noSlide> r))]))) (([(<any_Cx_sh_p_r_w_ax> sh)] | [(sh <any_Cx_sh_p_r_w_ax>)]) (w | v | ((<any_Cx_sh_p_r_w_ax> sh) | (sh <any_Cx_sh_p_r_w_ax>)))) (([(<any_Cx_sh_sh_ax_w> sh)] | [(sh <any_Cx_sh_sh_ax_w>)]) (ax | ((<any_Cx_sh_sh_ax_d> sh) | (sh <any_Cx_sh_sh_ax_d>)))) (([(<any_Cx_sh_sh_d_ax> sh)] | [(sh <any_Cx_sh_sh_d_ax>)]) (d | ((<any_Cx_sh_sh_d_ax> sh) | (sh <any_Cx_sh_sh_d_ax>)))) (([(<any_vowel_noSlide> dh)] | [(dh <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_dh> dh)] | [(dh <any_Cx_sh_d_dh>)]) sil))
Running scan for frate = 80

Considering guard sh with value 0.8 for w ...
candidateGuards = map[sh:true]
Picking guard, sh

frate, target rule = 91 public <would> = (((sil [((l <any_Cx_w_l_p>) | (<any_Cx_w_l_p> l))] [((l <any_vowel_noSlide>) | (<any_vowel_noSlide> l))]) | (sil p (sil [((l <any_Cx_w_l_p>) | (<any_Cx_w_l_p> l))] [((l <any_vowel_noSlide>) | (<any_vowel_noSlide> l))]))) (([(<any_Cx_g_p_l_w> g)] | [(g <any_Cx_g_p_l_w>)]) (w | v | ((<any_Cx_g_p_l_w> g) | (g <any_Cx_g_p_l_w>)))) ((([(<any_Vx_sh_g_uh_noSlide> sh)] | [(sh <any_Vx_sh_g_uh_noSlide>)]) ([(<any_Cx_sh_g_d_w> sh)] | [(sh <any_Cx_sh_g_d_w>)])) (uh | ((<any_Vx_sh_g_uh_noSlide> sh) | (sh <any_Vx_sh_g_uh_noSlide>)))) (([(<any_Cx_w_sh_d> w)] | [(w <any_Cx_w_sh_d>)]) (d | ((<any_Cx_w_sh_d> w) | (w <any_Cx_w_sh_d>)))) (([(<any_vowel_noSlide> dh)] | [(dh <any_vowel_noSlide>)]) ([(<any_Cx_w_d_dh> dh)] | [(dh <any_Cx_w_d_dh>)]) sil))
Running scan for frate = 80
Considering guard sh with value 3 for ax ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 0.8 for w ...
Considering guard g with value 0.8 for w ...
candidateGuards = map[g:true sh:true]
Picking guard, sh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for uh ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard w with value 1 for d ...
candidateGuards = map[w:true]
Picking guard, w


frate, target rule = 80 public <would> = (((sil [((d <any_Cx_w_d_p>) | (<any_Cx_w_d_p> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil p (sil [((d <any_Cx_w_d_p>) | (<any_Cx_w_d_p> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_sh_p_d_w_ax> sh)] | [(sh <any_Cx_sh_p_d_w_ax>)]) (w | v | ((<any_Cx_sh_p_d_w_ax> sh) | (sh <any_Cx_sh_p_d_w_ax>)))) (([(<any_Cx_sh_sh_ax_w> sh)] | [(sh <any_Cx_sh_sh_ax_w>)]) (ax | ((<any_Cx_sh_sh_ax_d> sh) | (sh <any_Cx_sh_sh_ax_d>)))) (([(<any_Cx_sh_sh_d_ax> sh)] | [(sh <any_Cx_sh_sh_d_ax>)]) (d | ((<any_Cx_sh_sh_d_ax> sh) | (sh <any_Cx_sh_sh_d_ax>)))) (([(<any_vowel_noSlide> b)] | [(b <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_b> b)] | [(b <any_Cx_sh_d_b>)]) sil))
Running scan for frate = 72
Considering guard sh with value 0.8 for w ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for ax ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh


frate, target rule = 72 public <would> = (((sil [((l <any_Cx_w_l_p>) | (<any_Cx_w_l_p> l))] [((l <any_vowel_noSlide>) | (<any_vowel_noSlide> l))]) | (sil p (sil [((l <any_Cx_w_l_p>) | (<any_Cx_w_l_p> l))] [((l <any_vowel_noSlide>) | (<any_vowel_noSlide> l))]))) (([(<any_Cx_sh_p_l_w_ax> sh)] | [(sh <any_Cx_sh_p_l_w_ax>)]) (w | v | ((<any_Cx_sh_p_l_w_ax> sh) | (sh <any_Cx_sh_p_l_w_ax>)))) (([(<any_Cx_sh_sh_ax_w> sh)] | [(sh <any_Cx_sh_sh_ax_w>)]) (ax | ((<any_Cx_sh_sh_ax_d> sh) | (sh <any_Cx_sh_sh_ax_d>)))) (([(<any_Cx_sh_sh_d_ax> sh)] | [(sh <any_Cx_sh_sh_d_ax>)]) (d | ((<any_Cx_sh_sh_d_ax> sh) | (sh <any_Cx_sh_sh_d_ax>)))) (([(<any_vowel_noSlide> v)] | [(v <any_vowel_noSlide>)]) ([(<any_Cx_sh_d_v> v)] | [(v <any_Cx_sh_d_v>)]) sil))

frate, target rule = 80 public <would> = (((sil [((d <any_Cx_w_d_p>) | (<any_Cx_w_d_p> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil p (sil [((d <any_Cx_w_d_p>) | (<any_Cx_w_d_p> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_sh_p_d_w> sh)] | [(sh <any_Cx_sh_p_d_w>)]) (w | v | ((<any_Cx_sh_p_d_w> sh) | (sh <any_Cx_sh_p_d_w>)))) ((([(<any_Vx_sh_sh_uh_noSlide> sh)] | [(sh <any_Vx_sh_sh_uh_noSlide>)]) ([(<any_Cx_sh_sh_d_w> sh)] | [(sh <any_Cx_sh_sh_d_w>)])) (uh | ((<any_Vx_sh_sh_uh_noSlide> sh) | (sh <any_Vx_sh_sh_uh_noSlide>)))) (([(<any_Cx_w_sh_d> w)] | [(w <any_Cx_w_sh_d>)]) (d | ((<any_Cx_w_sh_d> w) | (w <any_Cx_w_sh_d>)))) (([(<any_vowel_noSlide> dh)] | [(dh <any_vowel_noSlide>)]) ([(<any_Cx_w_d_dh> dh)] | [(dh <any_Cx_w_d_dh>)]) sil))
Running scan for frate = 72
Considering guard sh with value 0.8 for w ...
Considering guard g with value 0.8 for w ...
candidateGuards = map[g:true sh:true]
Picking guard, sh

Considering guard sh with value 3 for uh ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard w with value 1 for d ...
candidateGuards = map[w:true]
Picking guard, w


frate, target rule = 72 public <would> = (((sil [((n <any_Cx_w_n_p>) | (<any_Cx_w_n_p> n))] [((n <any_vowel_noSlide>) | (<any_vowel_noSlide> n))]) | (sil p (sil [((n <any_Cx_w_n_p>) | (<any_Cx_w_n_p> n))] [((n <any_vowel_noSlide>) | (<any_vowel_noSlide> n))]))) (([(<any_Cx_sh_p_n_w> sh)] | [(sh <any_Cx_sh_p_n_w>)]) (w | v | ((<any_Cx_sh_p_n_w> sh) | (sh <any_Cx_sh_p_n_w>)))) ((([(<any_Vx_sh_sh_uh_noSlide> sh)] | [(sh <any_Vx_sh_sh_uh_noSlide>)]) ([(<any_Cx_sh_sh_d_w> sh)] | [(sh <any_Cx_sh_sh_d_w>)])) (uh | ((<any_Vx_sh_sh_uh_noSlide> sh) | (sh <any_Vx_sh_sh_uh_noSlide>)))) (([(<any_Cx_w_sh_d> w)] | [(w <any_Cx_w_sh_d>)]) (d | ((<any_Cx_w_sh_d> w) | (w <any_Cx_w_sh_d>)))) (([(<any_vowel_noSlide> dh)] | [(dh <any_vowel_noSlide>)]) ([(<any_Cx_w_d_dh> dh)] | [(dh <any_Cx_w_d_dh>)]) sil))

results =
{72 [{sil 59 64} {v 65 67} {ax 68 71} {d 72 74} {sil 75 77}]}
{80 [{sil 64 66} {v 67 69} {ax 70 72} {d 73 78} {sil 79 81}]}
{91 [{sil 0 17} {w 18 28} {ax 29 38} {d 39 41} {sil 42 96}]}
{105 [{sil 0 17} {l 18 26} {ah 27 56} {v 57 59} {ax 60 62} {d 63 81} {g 82 98} {eh 99 108} {sil 109 111}]}
{125 [{sil 3 22} {z 23 25} {b 26 31} {ah 32 68} {z 69 73} {g 74 121} {sh 122 124} {ax 125 127} {d 128 131} {sil 132 134}]}

normalised results =
{72 [{sil 59 64} {v 90 90} {ax 94 99} {d 100 100} {sil 104 104}]}
{80 [{sil 64 66} {v 84 84} {ax 88 88} {d 91 98} {sil 99 99}]}
{91 [{sil 0 17} {w 20 31} {ax 32 42} {d 43 43} {sil 46 105}]}
{105 [{sil 0 17} {l 17 25} {ah 26 53} {v 54 54} {ax 57 57} {d 60 77} {g 78 93} {eh 94 103} {sil 104 104}]}
{125 [{sil 3 22} {z 18 18} {b 21 25} {ah 26 54} {z 55 58} {g 59 97} {sh 98 98} {ax 100 100} {d 102 105} {sil 106 106}]}

ruleAligned = [{{w 2} [{2 1}]} {{ax 2} [{0 2} {2 2}]} {{d 1} [{1 3} {3 5} {4 8}]}]

results (after rule-alignment) =
{72 [{sil 59 59} {v 90 90} {ax 94 99} {d 100 100} {sil 104 104}]}
{80 [{sil 64 64} {v 84 84} {ax 88 88} {d 91 98} {sil 99 99}]}
{91 [{sil 0 0} {w 20 31} {ax 32 42} {d 43 43} {sil 46 46}]}
{105 [{sil 0 0} {l 17 25} {ah 26 53} {v 54 54} {ax 57 57} {d 60 77} {g 78 93} {eh 94 103} {sil 104 104}]}
{125 [{sil 3 3} {z 18 18} {b 21 25} {ah 26 54} {z 55 55} {g 59 59} {sh 98 98} {ax 100 100} {d 102 105} {sil 106 106}]}

timeAligned = []

combinedVerdict    = [{w 2} {ax 2} {d 1}]
ruleAlignedVerdict = [{w 2} {ax 2} {d 1}]

score->
-1 for w
-1 for ax
+1 for d
score<-: -1

results =
{72 [{sil 59 64} {v 65 68} {uh 69 71} {d 72 74} {sil 75 77}]}
{80 [{sil 64 66} {v 67 69} {uh 70 72} {d 73 78} {sil 79 81}]}
{91 [{sil 0 14} {v 15 22} {ah 23 47} {sh 48 50} {d 51 53} {sil 54 96}]}
{105 [{sil 0 17} {l 18 26} {ah 27 56} {d 57 81} {g 82 98} {eh 99 102} {sh 103 105} {d 106 108} {sil 109 111}]}
{125 [{sil 3 26} {w 27 34} {ah 35 67} {sh 68 70} {d 71 98} {b 99 101} {g 102 131} {sil 132 134}]}

normalised results =
{72 [{sil 59 64} {v 90 94} {uh 96 96} {d 100 100} {sil 104 104}]}
{80 [{sil 64 66} {v 84 84} {uh 88 88} {d 91 98} {sil 99 99}]}
{91 [{sil 0 14} {v 16 24} {ah 25 52} {sh 53 53} {d 56 56} {sil 59 105}]}
{105 [{sil 0 17} {l 17 25} {ah 26 53} {d 54 77} {g 78 93} {eh 94 97} {sh 98 98} {d 101 101} {sil 104 104}]}
{125 [{sil 3 26} {w 22 27} {ah 28 54} {sh 54 54} {d 57 78} {b 79 79} {g 82 105} {sil 106 106}]}

ruleAligned = [{{w 2} [{4 1}]} {{uh 2} []} {{d 2} [{1 3} {4 4}]}]

results (after rule-alignment) =
{72 [{sil 59 59} {v 90 94} {uh 96 96} {d 100 100} {sil 104 104}]}
{80 [{sil 64 64} {v 84 84} {uh 88 88} {d 91 98} {sil 99 99}]}
{91 [{sil 0 0} {v 16 24} {ah 25 52} {sh 53 53} {d 56 56} {sil 59 59}]}
{105 [{sil 0 0} {l 17 25} {ah 26 53} {d 54 77} {g 78 93} {eh 94 94} {sh 98 98} {d 101 101} {sil 104 104}]}
{125 [{sil 3 3} {w 22 27} {ah 28 54} {sh 54 54} {d 57 78} {b 79 79} {g 82 105} {sil 106 106}]}

timeAligned = [{{ah 28 52} [{2 2} {3 2} {4 2}]}]

i, iTime, newITime, timeStartFrom = 0 0 -1 0
i, iTime, newITime, timeStartFrom = 1 0 -1 0
i, iTime, newITime, timeStartFrom = 2 0 -1 0
combinedVerdict    = [{w 2} {uh 2} {d 2}]
ruleAlignedVerdict = [{w 2} {uh 2} {d 2}]

score->
-1 for w
-1 for uh
-1 for d
score<-: -3
bestResult = {-1 [{w 2} {ax 2} {d 1}] [w ax d]}
testPronounce w missing ax missing d possible
publish->
phonsToAlphas = [{[w] w} {[ax] ou} {[d] ld}]
getVerdict<-:new {w [w] 2}
getVerdict<-:new {ou [ax] 2}
getVerdict<-:new {ld [d] 1}
lettersVerdicts = [{w [w] 2} {ou [ax] 2} {ld [d] 1}]
publish<-
{
  "results": [
    {
      "letters": "w",
      "phonemes": "w",
      "verdict": "missing"
    },
    {
      "letters": "ou",
      "phonemes": "ə",
      "verdict": "missing"
    },
    {
      "letters": "ld",
      "phonemes": "d",
      "verdict": "possible"
    }
  ],
  "err": null
}
