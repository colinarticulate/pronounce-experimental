
 length of audio =  1.462438



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.12 1.24 1.3599999999999999

 start3, duration3, end3 =  0.36 0.82 1.18

 Initial start, duration, end =  0 1.3599999999999999 1.3599999999999999

 Cut at: start, duration =  0 1.4424379999999999     guard_end =  1.4424379999999999 

Running scan for frate = 125
Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for ay ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard zh with value 1.6 for n ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 0.8 for axr ...
Considering guard sh with value 0.8 for axr ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh


frate, target rule = 125 public <diner> = (((sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_d> sh)] | [(sh <any_Cx_sh_p_z_d>)]) (d | ((<any_Cx_sh_p_z_d> sh) | (sh <any_Cx_sh_p_z_d>)))) ((([(<any_Vx_sh_sh_ay_noSlide> sh)] | [(sh <any_Vx_sh_sh_ay_noSlide>)]) ([(<any_Cx_sh_sh_n_d> sh)] | [(sh <any_Cx_sh_sh_n_d>)])) (ay | ((<any_Vx_sh_sh_ay_noSlide> sh) | (sh <any_Vx_sh_sh_ay_noSlide>)))) (([(<any_Cx_zh_sh_n> zh)] | [(zh <any_Cx_zh_sh_n>)]) (n | ((<any_Cx_zh_sh_n_axr> zh) | (zh <any_Cx_zh_sh_n_axr>)))) (([(<any_Cx_zh_zh_axr_n> zh)] | [(zh <any_Cx_zh_zh_axr_n>)]) (axr | ((<any_Cx_zh_zh_axr_n> zh) | (zh <any_Cx_zh_zh_axr_n>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_hh> hh)] | [(hh <any_Cx_zh_axr_hh>)]) sil))
Running scan for frate = 105
Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for ay ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard zh with value 1.6 for n ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard sh with value 0.8 for axr ...
Considering guard zh with value 0.8 for axr ...
candidateGuards = map[sh:true zh:true]
Picking guard, sh


frate, target rule = 105 public <diner> = (((sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_d> sh)] | [(sh <any_Cx_sh_p_z_d>)]) (d | ((<any_Cx_sh_p_z_d> sh) | (sh <any_Cx_sh_p_z_d>)))) ((([(<any_Vx_sh_sh_ay_noSlide> sh)] | [(sh <any_Vx_sh_sh_ay_noSlide>)]) ([(<any_Cx_sh_sh_n_d> sh)] | [(sh <any_Cx_sh_sh_n_d>)])) (ay | ((<any_Vx_sh_sh_ay_noSlide> sh) | (sh <any_Vx_sh_sh_ay_noSlide>)))) (([(<any_Cx_zh_sh_n> zh)] | [(zh <any_Cx_zh_sh_n>)]) (n | ((<any_Cx_zh_sh_n_axr> zh) | (zh <any_Cx_zh_sh_n_axr>)))) (([(<any_Cx_sh_zh_axr_n> sh)] | [(sh <any_Cx_sh_zh_axr_n>)]) (axr | ((<any_Cx_sh_zh_axr_n> sh) | (sh <any_Cx_sh_zh_axr_n>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_sh_axr_hh> hh)] | [(hh <any_Cx_sh_axr_hh>)]) sil))
Running scan for frate = 91
Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for ay ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard zh with value 1.6 for n ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 0.8 for axr ...
Considering guard sh with value 0.8 for axr ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh


frate, target rule = 91 public <diner> = (((sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_d> sh)] | [(sh <any_Cx_sh_p_z_d>)]) (d | ((<any_Cx_sh_p_z_d> sh) | (sh <any_Cx_sh_p_z_d>)))) ((([(<any_Vx_sh_sh_ay_noSlide> sh)] | [(sh <any_Vx_sh_sh_ay_noSlide>)]) ([(<any_Cx_sh_sh_n_d> sh)] | [(sh <any_Cx_sh_sh_n_d>)])) (ay | ((<any_Vx_sh_sh_ay_noSlide> sh) | (sh <any_Vx_sh_sh_ay_noSlide>)))) (([(<any_Cx_zh_sh_n> zh)] | [(zh <any_Cx_zh_sh_n>)]) (n | ((<any_Cx_zh_sh_n_axr> zh) | (zh <any_Cx_zh_sh_n_axr>)))) (([(<any_Cx_zh_zh_axr_n> zh)] | [(zh <any_Cx_zh_zh_axr_n>)]) (axr | ((<any_Cx_zh_zh_axr_n> zh) | (zh <any_Cx_zh_zh_axr_n>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_hh> hh)] | [(hh <any_Cx_zh_axr_hh>)]) sil))
Running scan for frate = 80
Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for ay ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard zh with value 1.6 for n ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 0.8 for axr ...
Considering guard sh with value 0.8 for axr ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh


frate, target rule = 80 public <diner> = (((sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_d> sh)] | [(sh <any_Cx_sh_p_z_d>)]) (d | ((<any_Cx_sh_p_z_d> sh) | (sh <any_Cx_sh_p_z_d>)))) ((([(<any_Vx_sh_sh_ay_noSlide> sh)] | [(sh <any_Vx_sh_sh_ay_noSlide>)]) ([(<any_Cx_sh_sh_n_d> sh)] | [(sh <any_Cx_sh_sh_n_d>)])) (ay | ((<any_Vx_sh_sh_ay_noSlide> sh) | (sh <any_Vx_sh_sh_ay_noSlide>)))) (([(<any_Cx_zh_sh_n> zh)] | [(zh <any_Cx_zh_sh_n>)]) (n | ((<any_Cx_zh_sh_n_axr> zh) | (zh <any_Cx_zh_sh_n_axr>)))) (([(<any_Cx_zh_zh_axr_n> zh)] | [(zh <any_Cx_zh_zh_axr_n>)]) (axr | ((<any_Cx_zh_zh_axr_n> zh) | (zh <any_Cx_zh_zh_axr_n>)))) (([(<any_vowel_noSlide> m)] | [(m <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_m> m)] | [(m <any_Cx_zh_axr_m>)]) sil))
Running scan for frate = 72
Considering guard sh with value 3 for d ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 6 for ay ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard zh with value 1.6 for n ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 0.8 for axr ...
Considering guard sh with value 0.8 for axr ...
candidateGuards = map[sh:true zh:true]
Picking guard, sh


frate, target rule = 72 public <diner> = (((sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_d_z_p>) | (<any_Cx_d_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_sh_p_z_d> sh)] | [(sh <any_Cx_sh_p_z_d>)]) (d | ((<any_Cx_sh_p_z_d> sh) | (sh <any_Cx_sh_p_z_d>)))) ((([(<any_Vx_sh_sh_ay_noSlide> sh)] | [(sh <any_Vx_sh_sh_ay_noSlide>)]) ([(<any_Cx_sh_sh_n_d> sh)] | [(sh <any_Cx_sh_sh_n_d>)])) (ay | ((<any_Vx_sh_sh_ay_noSlide> sh) | (sh <any_Vx_sh_sh_ay_noSlide>)))) (([(<any_Cx_zh_sh_n> zh)] | [(zh <any_Cx_zh_sh_n>)]) (n | ((<any_Cx_zh_sh_n_axr> zh) | (zh <any_Cx_zh_sh_n_axr>)))) (([(<any_Cx_sh_zh_axr_n> sh)] | [(sh <any_Cx_sh_zh_axr_n>)]) (axr | ((<any_Cx_sh_zh_axr_n> sh) | (sh <any_Cx_sh_zh_axr_n>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_sh_axr_thr> thr)] | [(thr <any_Cx_sh_axr_thr>)]) sil))

results =
{72 [{sil 0 32} {d 33 46} {ay 47 60} {n 61 63} {axr 64 82} {sil 83 88}]}
{80 [{sil 0 36} {d 37 51} {ay 52 67} {n 68 70} {axr 71 89} {sil 90 96}]}
{91 [{sil 0 39} {m 40 46} {z 47 51} {d 52 58} {ay 59 76} {n 77 81} {axr 82 105} {sil 106 129}]}
{105 [{sil 0 46} {m 47 54} {z 55 59} {d 60 67} {ay 68 89} {n 90 94} {axr 95 121} {sil 122 150}]}
{125 [{sil 3 56} {m 57 65} {z 66 71} {d 72 81} {ay 82 107} {n 108 113} {axr 114 145} {sil 146 176}]}

normalised results =
{72 [{sil 0 32} {d 46 64} {ay 65 83} {n 85 85} {axr 89 114} {sil 115 122}]}
{80 [{sil 0 36} {d 46 64} {ay 65 84} {n 85 85} {axr 89 111} {sil 113 120}]}
{91 [{sil 0 39} {m 44 51} {z 52 56} {d 57 64} {ay 65 84} {n 85 89} {axr 90 115} {sil 116 142}]}
{105 [{sil 0 46} {m 45 51} {z 52 56} {d 57 64} {ay 65 85} {n 86 90} {axr 90 115} {sil 116 143}]}
{125 [{sil 3 56} {m 46 52} {z 53 57} {d 58 65} {ay 66 86} {n 86 90} {axr 91 116} {sil 117 141}]}

ruleAligned = [{{m 3} [{2 1} {3 1} {4 1}]} {{d 0} [{0 1} {1 1} {2 3} {3 3} {4 3}]} {{ay 0} [{0 2} {1 2} {2 4} {3 4} {4 4}]} {{n 1} [{2 5} {3 5} {4 5}]} {{axr 0} [{0 4} {1 4} {2 6} {3 6} {4 6}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {d 46 64} {ay 65 83} {n 85 85} {axr 89 114} {sil 115 115}]}
{80 [{sil 0 0} {d 46 64} {ay 65 84} {n 85 85} {axr 89 111} {sil 113 113}]}
{91 [{sil 0 0} {m 44 51} {z 52 52} {d 57 64} {ay 65 84} {n 85 89} {axr 90 115} {sil 116 116}]}
{105 [{sil 0 0} {m 45 51} {z 52 52} {d 57 64} {ay 65 85} {n 86 90} {axr 90 115} {sil 116 116}]}
{125 [{sil 3 3} {m 46 52} {z 53 53} {d 58 65} {ay 66 86} {n 86 90} {axr 91 116} {sil 117 117}]}

timeAligned = [{{m 46 51} [{2 1} {3 1} {4 1}]} {{d 57 64} [{0 1} {1 1} {2 3} {3 3} {4 3}]} {{ay 65 84} [{0 2} {1 2} {2 4} {3 4} {4 4}]} {{n 86 89} [{2 5} {3 5} {4 5}]} {{axr 90 115} [{0 4} {1 4} {2 6} {3 6} {4 6}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 51
i, iTime, newITime, timeStartFrom = 2 1 2 64
i, iTime, newITime, timeStartFrom = 3 2 3 83
i, iTime, newITime, timeStartFrom = 4 3 4 89
combinedVerdict    = [{m 3} {d 0} {ay 0} {n 1} {axr 0}]
ruleAlignedVerdict = [{m 3} {d 0} {ay 0} {n 1} {axr 0}]

score->
-1 for m
+1 for d
+1 for ay
+1 for n
+1 for axr
score<-: 3
testPronounce m surprise d good ay good n possible axr good
publish->
phonsToAlphas = [{[d] d} {[ay] i} {[n] n} {[axr] er}]
getVerdict<-:new {d [d] 0}
getVerdict<-:new {i [ay] 0}
getVerdict<-:new {n [n] 1}
getVerdict<-:new {er [axr] 0}
lettersVerdicts = [{m [m] 3} {d [d] 0} {i [ay] 0} {n [n] 1} {er [axr] 0}]
publish<-
{
  "results": [
    {
      "letters": "m",
      "phonemes": "m",
      "verdict": "surprise"
    },
    {
      "letters": "d",
      "phonemes": "d",
      "verdict": "good"
    },
    {
      "letters": "i",
      "phonemes": "ɑɪ",
      "verdict": "good"
    },
    {
      "letters": "n",
      "phonemes": "n",
      "verdict": "possible"
    },
    {
      "letters": "er",
      "phonemes": "əɹ",
      "verdict": "good"
    }
  ],
  "err": null
}
