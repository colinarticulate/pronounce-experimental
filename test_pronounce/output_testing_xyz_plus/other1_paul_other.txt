
 length of audio =  2.320562



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.84 0.84 1.68

 start3, duration3, end3 =  0.84 0.62 1.46

 Initial start, duration, end =  0.74 0.94 1.68

 Cut at: start, duration =  0.74 1.39     guard_end =  2.13 

Running scan for frate = 125
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 125 public <other> = (((sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]) | (sil p (sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]))) ((([(<any_Vx_zh_p_b_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_b_ah_noSlide>)]) ([(<any_Cx_zh_p_b_dh> zh)] | [(zh <any_Cx_zh_p_b_dh>)])) (ah | ((<any_Vx_zh_p_b_ah_noSlide> zh) | (zh <any_Vx_zh_p_b_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_p> p)] | [(p <any_Cx_zh_axr_p>)]) sil))
Running scan for frate = 105
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 105 public <other> = (((sil [((r <any_Vx_ah_r_p_noSlide>) | (<any_Vx_ah_r_p_noSlide> r))] [((r <any_Cx_ah_r_p>) | (<any_Cx_ah_r_p> r))]) | (sil p (sil [((r <any_Vx_ah_r_p_noSlide>) | (<any_Vx_ah_r_p_noSlide> r))] [((r <any_Cx_ah_r_p>) | (<any_Cx_ah_r_p> r))]))) ((([(<any_Vx_zh_p_r_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_r_ah_noSlide>)]) ([(<any_Cx_zh_p_r_dh> zh)] | [(zh <any_Cx_zh_p_r_dh>)])) (ah | ((<any_Vx_zh_p_r_ah_noSlide> zh) | (zh <any_Vx_zh_p_r_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> m)] | [(m <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_m> m)] | [(m <any_Cx_zh_axr_m>)]) sil))
Running scan for frate = 91
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 91 public <other> = (((sil [((hh <any_Vx_ah_hh_p_noSlide>) | (<any_Vx_ah_hh_p_noSlide> hh))] [((hh <any_Cx_ah_hh_p>) | (<any_Cx_ah_hh_p> hh))]) | (sil p (sil [((hh <any_Vx_ah_hh_p_noSlide>) | (<any_Vx_ah_hh_p_noSlide> hh))] [((hh <any_Cx_ah_hh_p>) | (<any_Cx_ah_hh_p> hh))]))) ((([(<any_Vx_zh_p_hh_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_hh_ah_noSlide>)]) ([(<any_Cx_zh_p_hh_dh> zh)] | [(zh <any_Cx_zh_p_hh_dh>)])) (ah | ((<any_Vx_zh_p_hh_ah_noSlide> zh) | (zh <any_Vx_zh_p_hh_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_p> p)] | [(p <any_Cx_zh_axr_p>)]) sil))
Running scan for frate = 80
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 80 public <other> = (((sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]) | (sil p (sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]))) ((([(<any_Vx_zh_p_b_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_b_ah_noSlide>)]) ([(<any_Cx_zh_p_b_dh> zh)] | [(zh <any_Cx_zh_p_b_dh>)])) (ah | ((<any_Vx_zh_p_b_ah_noSlide> zh) | (zh <any_Vx_zh_p_b_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_p> p)] | [(p <any_Cx_zh_axr_p>)]) sil))
Running scan for frate = 72
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 72 public <other> = (((sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]) | (sil p (sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]))) ((([(<any_Vx_zh_p_b_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_b_ah_noSlide>)]) ([(<any_Cx_zh_p_b_dh> zh)] | [(zh <any_Cx_zh_p_b_dh>)])) (ah | ((<any_Vx_zh_p_b_ah_noSlide> zh) | (zh <any_Vx_zh_p_b_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_p> p)] | [(p <any_Cx_zh_axr_p>)]) sil))

results =
{72 [{sil 0 10} {ah 11 28} {dh 29 35} {axr 36 51} {sil 52 59}]}
{80 [{sil 0 12} {ah 13 31} {dh 32 39} {axr 40 57} {sil 58 63}]}
{91 [{sil 0 15} {ah 16 36} {dh 37 44} {axr 45 118} {sil 119 125}]}
{105 [{sil 0 18} {ah 19 39} {dh 40 50} {axr 51 101} {sil 102 145}]}
{125 [{sil 3 23} {ah 24 48} {dh 49 61} {axr 62 121} {sil 122 169}]}

normalised results =
{72 [{sil 0 10} {ah 15 39} {dh 40 49} {axr 50 71} {sil 72 82}]}
{80 [{sil 0 12} {ah 16 39} {dh 40 49} {axr 50 71} {sil 73 79}]}
{91 [{sil 0 15} {ah 18 40} {dh 41 48} {axr 49 130} {sil 131 137}]}
{105 [{sil 0 18} {ah 18 37} {dh 38 48} {axr 49 96} {sil 97 138}]}
{125 [{sil 3 23} {ah 19 38} {dh 39 49} {axr 50 97} {sil 98 135}]}

ruleAligned = [{{ah 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{dh 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{axr 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {ah 15 39} {dh 40 49} {axr 50 71} {sil 72 72}]}
{80 [{sil 0 0} {ah 16 39} {dh 40 49} {axr 50 71} {sil 73 73}]}
{91 [{sil 0 0} {ah 18 40} {dh 41 48} {axr 49 130} {sil 131 131}]}
{105 [{sil 0 0} {ah 18 37} {dh 38 48} {axr 49 96} {sil 97 97}]}
{125 [{sil 3 3} {ah 19 38} {dh 39 49} {axr 50 97} {sil 98 98}]}

timeAligned = [{{ah 18 39} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{dh 40 49} [{0 2} {1 2} {3 2} {4 2} {2 2}]} {{axr 50 96} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 37
i, iTime, newITime, timeStartFrom = 2 1 2 48
combinedVerdict    = [{ah 0} {dh 0} {axr 0}]
ruleAlignedVerdict = [{ah 0} {dh 0} {axr 0}]

score->
+1 for ah
+1 for dh
+1 for axr
score<-: 8
testPronounce ah good dh good axr good
publish->
phonsToAlphas = [{[ah] o} {[dh] th} {[axr] er}]
getVerdict<-:new {o [ah] 0}
getVerdict<-:new {th [dh] 0}
getVerdict<-:new {er [axr] 0}
lettersVerdicts = [{o [ah] 0} {th [dh] 0} {er [axr] 0}]
publish<-
{
  "results": [
    {
      "letters": "o",
      "phonemes": "ʌ",
      "verdict": "good"
    },
    {
      "letters": "th",
      "phonemes": "ð",
      "verdict": "good"
    },
    {
      "letters": "er",
      "phonemes": "əɹ",
      "verdict": "good"
    }
  ],
  "err": null
}
