
 length of audio =  2.111562



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.5800000000000001 0.86 1.44

 start3, duration3, end3 =  0.5800000000000001 0.6 1.1800000000000002

 Initial start, duration, end =  0.4800000000000001 0.9599999999999999 1.44

 Cut at: start, duration =  0.4800000000000001 1.41     guard_end =  1.8900000000000001 

Running scan for frate = 125
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 125 public <coat> = (((sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]) | (sil b (sil [((t <any_Cx_k_t_b>) | (<any_Cx_k_t_b> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]))) (([(<any_Cx_z_b_t_k> z)] | [(z <any_Cx_z_b_t_k>)]) (k | d | ((<any_Cx_z_b_t_k> z) | (z <any_Cx_z_b_t_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_y_t_ch> ch)] | [(ch <any_Cx_y_t_ch>)]) sil))
Running scan for frate = 105
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 105 public <coat> = (((sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]) | (sil b (sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]))) (([(<any_Cx_z_b_p_k> z)] | [(z <any_Cx_z_b_p_k>)]) (k | d | ((<any_Cx_z_b_p_k> z) | (z <any_Cx_z_b_p_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> d)] | [(d <any_vowel_noSlide>)]) ([(<any_Cx_y_t_d> d)] | [(d <any_Cx_y_t_d>)]) sil))
Running scan for frate = 91
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 91 public <coat> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_z_b_ch_k> z)] | [(z <any_Cx_z_b_ch_k>)]) (k | d | ((<any_Cx_z_b_ch_k> z) | (z <any_Cx_z_b_ch_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_y_t_thr> thr)] | [(thr <any_Cx_y_t_thr>)]) sil))
Running scan for frate = 80
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 80 public <coat> = (((sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil b (sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_z_b_d_k> z)] | [(z <any_Cx_z_b_d_k>)]) (k | d | ((<any_Cx_z_b_d_k> z) | (z <any_Cx_z_b_d_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> d)] | [(d <any_vowel_noSlide>)]) ([(<any_Cx_y_t_d> d)] | [(d <any_Cx_y_t_d>)]) sil))
Running scan for frate = 72
Considering guard z with value 1 for k ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard y with value 5.199999999999999 for ow ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3 for t ...
candidateGuards = map[y:true]
Picking guard, y

frate, target rule = 72 public <coat> = (((sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil b (sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_z_b_d_k> z)] | [(z <any_Cx_z_b_d_k>)]) (k | d | ((<any_Cx_z_b_d_k> z) | (z <any_Cx_z_b_d_k>)))) ((([(<any_Vx_y_z_ow_noSlide> y)] | [(y <any_Vx_y_z_ow_noSlide>)]) ([(<any_Cx_y_z_t_k> y)] | [(y <any_Cx_y_z_t_k>)])) (ow | ((<any_Vx_y_z_ow_noSlide> y) | (y <any_Vx_y_z_ow_noSlide>)))) (([(<any_Cx_y_y_t> y)] | [(y <any_Cx_y_y_t>)]) (t | ((<any_Cx_y_y_t> y) | (y <any_Cx_y_y_t>)))) (([(<any_vowel_noSlide> k)] | [(k <any_vowel_noSlide>)]) ([(<any_Cx_y_t_k> k)] | [(k <any_Cx_y_t_k>)]) sil))

results =
{72 [{sil 0 9} {k 10 21} {y 22 24} {ao 25 38} {t 39 53} {sil 54 69}]}
{80 [{sil 0 13} {k 14 21} {ao 22 40} {y 41 43} {t 44 58} {sil 59 74}]}
{91 [{sil 0 13} {k 14 24} {ao 25 46} {y 47 49} {t 50 67} {sil 68 123}]}
{105 [{sil 0 16} {k 17 29} {ao 30 54} {y 55 57} {t 58 78} {sil 79 143}]}
{125 [{sil 3 24} {k 25 36} {ao 37 68} {y 69 71} {t 72 96} {sil 97 176}]}

normalised results =
{72 [{sil 0 9} {k 14 29} {y 31 31} {ao 35 53} {t 54 74} {sil 75 96}]}
{80 [{sil 0 13} {k 18 26} {ao 28 50} {y 51 51} {t 55 73} {sil 74 93}]}
{91 [{sil 0 13} {k 15 26} {ao 27 51} {y 52 52} {t 55 74} {sil 75 135}]}
{105 [{sil 0 16} {k 16 28} {ao 29 51} {y 52 52} {t 55 74} {sil 75 136}]}
{125 [{sil 3 24} {k 20 29} {ao 30 54} {y 55 55} {t 58 77} {sil 78 141}]}

ruleAligned = [{{k 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ow 2} []} {{ao 3} [{0 3} {1 2} {2 2} {3 2} {4 2}]} {{t 0} [{0 4} {1 4} {2 4} {3 4} {4 4}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {k 14 29} {y 31 31} {ao 35 53} {t 54 74} {sil 75 75}]}
{80 [{sil 0 0} {k 18 26} {ao 28 50} {y 51 51} {t 55 73} {sil 74 74}]}
{91 [{sil 0 0} {k 15 26} {ao 27 51} {y 52 52} {t 55 74} {sil 75 75}]}
{105 [{sil 0 0} {k 16 28} {ao 29 51} {y 52 52} {t 55 74} {sil 75 75}]}
{125 [{sil 3 3} {k 20 29} {ao 30 54} {y 55 55} {t 58 77} {sil 78 78}]}

timeAligned = [{{k 16 28} [{0 1} {2 1} {3 1} {1 1} {4 1}]} {{ao 29 51} [{1 2} {2 2} {3 2} {4 2} {0 3}]} {{t 55 74} [{0 4} {1 4} {2 4} {3 4} {4 4}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 -1 26
i, iTime, newITime, timeStartFrom = 2 0 1 26
i, iTime, newITime, timeStartFrom = 3 1 2 50
combinedVerdict    = [{k 0} {ow 2} {ao 3} {t 0}]
ruleAlignedVerdict = [{k 0} {ow 2} {ao 3} {t 0}]

score->
+1 for k
-1 for ow
-1 for ao
+1 for t
score<-: 0
bestResult = {0 [{k 0} {ow 2} {ao 3} {t 0}] [k ow t]}
testPronounce k good ow missing ao surprise t good
publish->
phonsToAlphas = [{[k] c} {[ow] oa} {[t] t}]
getVerdict<-:new {c [k] 0}
getVerdict<-:new {oa [ow] 2}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{c [k] 0} {oa [ow] 2} {ao [ao] 3} {t [t] 0}]
publish<-
Total: 216.877785ms
{
  "results": [
    {
      "letters": "c",
      "phonemes": "k",
      "verdict": "good"
    },
    {
      "letters": "oa",
      "phonemes": "oʊ",
      "verdict": "missing"
    },
    {
      "letters": "ao",
      "phonemes": "ɔ",
      "verdict": "surprise"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
