
 length of audio =  1.694687



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.54 1.1400000000000001 1.6800000000000002

 start3, duration3, end3 =  0.64 0.52 1.1600000000000001

 Initial start, duration, end =  0.44000000000000006 1.2400000000000002 1.6800000000000002

 Cut at: start, duration =  0.44000000000000006 1.234687     guard_end =  1.674687 

Running scan for frate = 125
Considering guard y with value 1 for f ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 2 for r ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.5999999999999996 for oh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard sh with value 2 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ih ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z


frate, target rule = 125 public <frolic> = (((sil [((th <any_Cx_f_th_p>) | (<any_Cx_f_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]) | (sil p (sil [((th <any_Cx_f_th_p>) | (<any_Cx_f_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]))) (([(<any_Cx_y_p_th_f_r> y)] | [(y <any_Cx_y_p_th_f_r>)]) (f | s | ((<any_Cx_y_p_th_f_r> y) | (y <any_Cx_y_p_th_f_r>)))) (([(<any_Cx_y_y_r_oh_f> y)] | [(y <any_Cx_y_y_r_oh_f>)]) (r | ((<any_Cx_y_y_r_oh> y) | (y <any_Cx_y_y_r_oh>)))) (([(<any_Cx_y_y_oh_l_r> y)] | [(y <any_Cx_y_y_oh_l_r>)]) (oh | ((<any_Cx_y_y_oh_l_r> y) | (y <any_Cx_y_y_oh_l_r>)))) (([(<any_Cx_sh_y_l_oh> sh)] | [(sh <any_Cx_sh_y_l_oh>)]) (l | ((<any_Cx_sh_y_l_oh> sh) | (sh <any_Cx_sh_y_l_oh>)))) ((([(<any_Vx_sh_sh_ih_noSlide> sh)] | [(sh <any_Vx_sh_sh_ih_noSlide>)]) ([(<any_Cx_sh_sh_k_l> sh)] | [(sh <any_Cx_sh_sh_k_l>)])) (ih | ((<any_Vx_sh_sh_ih_noSlide> sh) | (sh <any_Vx_sh_sh_ih_noSlide>)))) (([(<any_Cx_z_sh_k> z)] | [(z <any_Cx_z_sh_k>)]) (k | ((<any_Cx_z_sh_k> z) | (z <any_Cx_z_sh_k>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_z_k_g> g)] | [(g <any_Cx_z_k_g>)]) sil))
Running scan for frate = 105
Considering guard y with value 1 for f ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 2 for r ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.5999999999999996 for oh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard sh with value 2 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ih ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z


frate, target rule = 105 public <frolic> = (((sil [((s <any_Cx_f_s_p>) | (<any_Cx_f_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]) | (sil p (sil [((s <any_Cx_f_s_p>) | (<any_Cx_f_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]))) (([(<any_Cx_y_p_s_f_r> y)] | [(y <any_Cx_y_p_s_f_r>)]) (f | s | ((<any_Cx_y_p_s_f_r> y) | (y <any_Cx_y_p_s_f_r>)))) (([(<any_Cx_y_y_r_oh_f> y)] | [(y <any_Cx_y_y_r_oh_f>)]) (r | ((<any_Cx_y_y_r_oh> y) | (y <any_Cx_y_y_r_oh>)))) (([(<any_Cx_y_y_oh_l_r> y)] | [(y <any_Cx_y_y_oh_l_r>)]) (oh | ((<any_Cx_y_y_oh_l_r> y) | (y <any_Cx_y_y_oh_l_r>)))) (([(<any_Cx_sh_y_l_oh> sh)] | [(sh <any_Cx_sh_y_l_oh>)]) (l | ((<any_Cx_sh_y_l_oh> sh) | (sh <any_Cx_sh_y_l_oh>)))) ((([(<any_Vx_sh_sh_ih_noSlide> sh)] | [(sh <any_Vx_sh_sh_ih_noSlide>)]) ([(<any_Cx_sh_sh_k_l> sh)] | [(sh <any_Cx_sh_sh_k_l>)])) (ih | ((<any_Vx_sh_sh_ih_noSlide> sh) | (sh <any_Vx_sh_sh_ih_noSlide>)))) (([(<any_Cx_z_sh_k> z)] | [(z <any_Cx_z_sh_k>)]) (k | ((<any_Cx_z_sh_k> z) | (z <any_Cx_z_sh_k>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_z_k_p> p)] | [(p <any_Cx_z_k_p>)]) sil))
Running scan for frate = 91
Considering guard y with value 1 for f ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 2 for r ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.5999999999999996 for oh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard sh with value 2 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ih ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z


frate, target rule = 91 public <frolic> = (((sil [((z <any_Cx_f_z_p>) | (<any_Cx_f_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_f_z_p>) | (<any_Cx_f_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_y_p_z_f_r> y)] | [(y <any_Cx_y_p_z_f_r>)]) (f | s | ((<any_Cx_y_p_z_f_r> y) | (y <any_Cx_y_p_z_f_r>)))) (([(<any_Cx_y_y_r_oh_f> y)] | [(y <any_Cx_y_y_r_oh_f>)]) (r | ((<any_Cx_y_y_r_oh> y) | (y <any_Cx_y_y_r_oh>)))) (([(<any_Cx_y_y_oh_l_r> y)] | [(y <any_Cx_y_y_oh_l_r>)]) (oh | ((<any_Cx_y_y_oh_l_r> y) | (y <any_Cx_y_y_oh_l_r>)))) (([(<any_Cx_sh_y_l_oh> sh)] | [(sh <any_Cx_sh_y_l_oh>)]) (l | ((<any_Cx_sh_y_l_oh> sh) | (sh <any_Cx_sh_y_l_oh>)))) ((([(<any_Vx_sh_sh_ih_noSlide> sh)] | [(sh <any_Vx_sh_sh_ih_noSlide>)]) ([(<any_Cx_sh_sh_k_l> sh)] | [(sh <any_Cx_sh_sh_k_l>)])) (ih | ((<any_Vx_sh_sh_ih_noSlide> sh) | (sh <any_Vx_sh_sh_ih_noSlide>)))) (([(<any_Cx_z_sh_k> z)] | [(z <any_Cx_z_sh_k>)]) (k | ((<any_Cx_z_sh_k> z) | (z <any_Cx_z_sh_k>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_z_k_hh> hh)] | [(hh <any_Cx_z_k_hh>)]) sil))
Running scan for frate = 80
Considering guard y with value 1 for f ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 2 for r ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.5999999999999996 for oh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard sh with value 2 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ih ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z


frate, target rule = 80 public <frolic> = (((sil [((s <any_Cx_f_s_p>) | (<any_Cx_f_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]) | (sil p (sil [((s <any_Cx_f_s_p>) | (<any_Cx_f_s_p> s))] [((s <any_vowel_noSlide>) | (<any_vowel_noSlide> s))]))) (([(<any_Cx_y_p_s_f_r> y)] | [(y <any_Cx_y_p_s_f_r>)]) (f | s | ((<any_Cx_y_p_s_f_r> y) | (y <any_Cx_y_p_s_f_r>)))) (([(<any_Cx_y_y_r_oh_f> y)] | [(y <any_Cx_y_y_r_oh_f>)]) (r | ((<any_Cx_y_y_r_oh> y) | (y <any_Cx_y_y_r_oh>)))) (([(<any_Cx_y_y_oh_l_r> y)] | [(y <any_Cx_y_y_oh_l_r>)]) (oh | ((<any_Cx_y_y_oh_l_r> y) | (y <any_Cx_y_y_oh_l_r>)))) (([(<any_Cx_sh_y_l_oh> sh)] | [(sh <any_Cx_sh_y_l_oh>)]) (l | ((<any_Cx_sh_y_l_oh> sh) | (sh <any_Cx_sh_y_l_oh>)))) ((([(<any_Vx_sh_sh_ih_noSlide> sh)] | [(sh <any_Vx_sh_sh_ih_noSlide>)]) ([(<any_Cx_sh_sh_k_l> sh)] | [(sh <any_Cx_sh_sh_k_l>)])) (ih | ((<any_Vx_sh_sh_ih_noSlide> sh) | (sh <any_Vx_sh_sh_ih_noSlide>)))) (([(<any_Cx_z_sh_k> z)] | [(z <any_Cx_z_sh_k>)]) (k | ((<any_Cx_z_sh_k> z) | (z <any_Cx_z_sh_k>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_z_k_thr> thr)] | [(thr <any_Cx_z_k_thr>)]) sil))
Running scan for frate = 72
Considering guard y with value 1 for f ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 2 for r ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard y with value 3.5999999999999996 for oh ...
candidateGuards = map[y:true]
Picking guard, y

Considering guard sh with value 2 for l ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard sh with value 7.800000000000001 for ih ...
candidateGuards = map[sh:true]
Picking guard, sh

Considering guard z with value 0.8 for k ...
candidateGuards = map[z:true]
Picking guard, z


frate, target rule = 72 public <frolic> = (((sil [((th <any_Cx_f_th_p>) | (<any_Cx_f_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]) | (sil p (sil [((th <any_Cx_f_th_p>) | (<any_Cx_f_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]))) (([(<any_Cx_y_p_th_f_r> y)] | [(y <any_Cx_y_p_th_f_r>)]) (f | s | ((<any_Cx_y_p_th_f_r> y) | (y <any_Cx_y_p_th_f_r>)))) (([(<any_Cx_y_y_r_oh_f> y)] | [(y <any_Cx_y_y_r_oh_f>)]) (r | ((<any_Cx_y_y_r_oh> y) | (y <any_Cx_y_y_r_oh>)))) (([(<any_Cx_y_y_oh_l_r> y)] | [(y <any_Cx_y_y_oh_l_r>)]) (oh | ((<any_Cx_y_y_oh_l_r> y) | (y <any_Cx_y_y_oh_l_r>)))) (([(<any_Cx_sh_y_l_oh> sh)] | [(sh <any_Cx_sh_y_l_oh>)]) (l | ((<any_Cx_sh_y_l_oh> sh) | (sh <any_Cx_sh_y_l_oh>)))) ((([(<any_Vx_sh_sh_ih_noSlide> sh)] | [(sh <any_Vx_sh_sh_ih_noSlide>)]) ([(<any_Cx_sh_sh_k_l> sh)] | [(sh <any_Cx_sh_sh_k_l>)])) (ih | ((<any_Vx_sh_sh_ih_noSlide> sh) | (sh <any_Vx_sh_sh_ih_noSlide>)))) (([(<any_Cx_z_sh_k> z)] | [(z <any_Cx_z_sh_k>)]) (k | ((<any_Cx_z_sh_k> z) | (z <any_Cx_z_sh_k>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_z_k_hh> hh)] | [(hh <any_Cx_z_k_hh>)]) sil))

results =
{72 [{sil 0 3} {f 4 20} {r 21 28} {oh 29 32} {l 33 38} {ih 39 48} {k 49 65} {sil 66 79}]}
{80 [{sil 0 3} {f 4 22} {r 23 30} {oh 31 36} {l 37 43} {ih 44 54} {k 55 72} {sil 73 86}]}
{91 [{sil 0 4} {f 5 26} {r 27 37} {oh 38 40} {l 41 49} {ih 50 62} {k 63 82} {sil 83 111}]}
{105 [{sil 0 5} {f 6 30} {r 31 42} {oh 43 47} {l 48 56} {ih 57 72} {k 73 82} {v 83 94} {p 95 97} {sil 98 124}]}
{125 [{sil 3 7} {f 8 37} {r 38 51} {oh 52 57} {l 58 68} {ih 69 87} {k 88 98} {v 99 102} {g 103 116} {sil 117 154}]}

normalised results =
{72 [{sil 0 3} {f 6 28} {r 29 39} {oh 40 44} {l 46 53} {ih 54 67} {k 68 90} {sil 92 110}]}
{80 [{sil 0 3} {f 5 28} {r 29 38} {oh 39 45} {l 46 54} {ih 55 68} {k 69 90} {sil 91 108}]}
{91 [{sil 0 4} {f 5 29} {r 30 41} {oh 42 42} {l 45 54} {ih 55 68} {k 69 90} {sil 91 122}]}
{105 [{sil 0 5} {f 6 29} {r 30 40} {oh 41 45} {l 46 53} {ih 54 69} {k 70 78} {v 79 90} {p 90 90} {sil 93 118}]}
{125 [{sil 3 7} {f 6 30} {r 30 41} {oh 42 46} {l 46 54} {ih 55 70} {k 70 78} {v 79 82} {g 82 93} {sil 94 123}]}

ruleAligned = [{{f 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{r 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{oh 0} [{0 3} {1 3} {3 3} {4 3}]} {{l 0} [{0 4} {1 4} {2 4} {3 4} {4 4}]} {{ih 0} [{0 5} {1 5} {2 5} {3 5} {4 5}]} {{k 0} [{0 6} {1 6} {2 6} {3 6} {4 6}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {f 6 28} {r 29 39} {oh 40 44} {l 46 53} {ih 54 67} {k 68 90} {sil 92 92}]}
{80 [{sil 0 0} {f 5 28} {r 29 38} {oh 39 45} {l 46 54} {ih 55 68} {k 69 90} {sil 91 91}]}
{91 [{sil 0 0} {f 5 29} {r 30 41} {oh 42 42} {l 45 54} {ih 55 68} {k 69 90} {sil 91 91}]}
{105 [{sil 0 0} {f 6 29} {r 30 40} {oh 41 45} {l 46 53} {ih 54 69} {k 70 78} {v 79 90} {p 90 90} {sil 93 93}]}
{125 [{sil 3 3} {f 6 30} {r 30 41} {oh 42 46} {l 46 54} {ih 55 70} {k 70 78} {v 79 79} {g 82 93} {sil 94 94}]}

timeAligned = [{{f 6 29} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{r 30 40} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{oh 41 45} [{0 3} {1 3} {3 3} {4 3}]} {{l 46 54} [{0 4} {1 4} {2 4} {3 4} {4 4}]} {{ih 55 68} [{0 5} {1 5} {2 5} {3 5} {4 5}]} {{k 69 90} [{0 6} {1 6} {2 6} {3 6} {4 6}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 28
i, iTime, newITime, timeStartFrom = 2 1 2 38
i, iTime, newITime, timeStartFrom = 3 2 3 44
i, iTime, newITime, timeStartFrom = 4 3 4 53
i, iTime, newITime, timeStartFrom = 5 4 5 67
combinedVerdict    = [{f 0} {r 0} {oh 0} {l 0} {ih 0} {k 0}]
ruleAlignedVerdict = [{f 0} {r 0} {oh 0} {l 0} {ih 0} {k 0}]

score->
+1 for f
+1 for r
+1 for oh
+1 for l
+1 for ih
+1 for k
score<-: 11
testPronounce f good r good oh good l good ih good k good
publish->
phonsToAlphas = [{[f] f} {[r] r} {[oh] o} {[l] l} {[ih] i} {[k] c}]
getVerdict<-:new {f [f] 0}
getVerdict<-:new {r [r] 0}
getVerdict<-:new {o [oh] 0}
getVerdict<-:new {l [l] 0}
getVerdict<-:new {i [ih] 0}
getVerdict<-:new {c [k] 0}
lettersVerdicts = [{f [f] 0} {r [r] 0} {o [oh] 0} {l [l] 0} {i [ih] 0} {c [k] 0}]
publish<-
{
  "results": [
    {
      "letters": "f",
      "phonemes": "f",
      "verdict": "good"
    },
    {
      "letters": "r",
      "phonemes": "ɹ",
      "verdict": "good"
    },
    {
      "letters": "o",
      "phonemes": "ɒ",
      "verdict": "good"
    },
    {
      "letters": "l",
      "phonemes": "l",
      "verdict": "good"
    },
    {
      "letters": "i",
      "phonemes": "ɪ",
      "verdict": "good"
    },
    {
      "letters": "c",
      "phonemes": "k",
      "verdict": "good"
    }
  ],
  "err": null
}
