
 length of audio =  2.943625



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.74 0.62 1.3599999999999999

 start3, duration3, end3 =  0.9600000000000001 0.28 1.2400000000000002

 Initial start, duration, end =  0.64 0.7199999999999999 1.3599999999999999

 Cut at: start, duration =  0.64 1.17     guard_end =  1.81 

Running scan for frate = 125
Considering guard g with value 1 for s ...
Considering guard w with value 1 for s ...
candidateGuards = map[g:true w:true]
Picking guard, g

Considering guard w with value 2 for uh ...
candidateGuards = map[w:true]
Picking guard, w

Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 125 public <soot> = (((sil [((th <any_Cx_s_th_p>) | (<any_Cx_s_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]) | (sil p (sil [((th <any_Cx_s_th_p>) | (<any_Cx_s_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]))) (([(<any_Cx_g_p_th_s> g)] | [(g <any_Cx_g_p_th_s>)]) (s | z | ((<any_Cx_g_p_th_s> g) | (g <any_Cx_g_p_th_s>)))) ((([(<any_Vx_w_g_uh_noSlide> w)] | [(w <any_Vx_w_g_uh_noSlide>)]) ([(<any_Cx_w_g_t_s> w)] | [(w <any_Cx_w_g_t_s>)])) (uh | ((<any_Vx_w_g_uh_noSlide> w) | (w <any_Vx_w_g_uh_noSlide>)))) (([(<any_Cx_zh_w_t> zh)] | [(zh <any_Cx_zh_w_t>)]) (t | ((<any_Cx_zh_w_t> zh) | (zh <any_Cx_zh_w_t>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_g> g)] | [(g <any_Cx_zh_t_g>)]) sil))
Running scan for frate = 105
Considering guard g with value 1 for s ...
Considering guard w with value 1 for s ...
candidateGuards = map[g:true w:true]
Picking guard, g

Considering guard w with value 2 for uh ...
candidateGuards = map[w:true]
Picking guard, w

Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 105 public <soot> = (((sil [((t <any_Cx_s_t_p>) | (<any_Cx_s_t_p> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]) | (sil p (sil [((t <any_Cx_s_t_p>) | (<any_Cx_s_t_p> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]))) (([(<any_Cx_g_p_t_s> g)] | [(g <any_Cx_g_p_t_s>)]) (s | z | ((<any_Cx_g_p_t_s> g) | (g <any_Cx_g_p_t_s>)))) ((([(<any_Vx_w_g_uh_noSlide> w)] | [(w <any_Vx_w_g_uh_noSlide>)]) ([(<any_Cx_w_g_t_s> w)] | [(w <any_Cx_w_g_t_s>)])) (uh | ((<any_Vx_w_g_uh_noSlide> w) | (w <any_Vx_w_g_uh_noSlide>)))) (([(<any_Cx_zh_w_t> zh)] | [(zh <any_Cx_zh_w_t>)]) (t | ((<any_Cx_zh_w_t> zh) | (zh <any_Cx_zh_w_t>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_thr> thr)] | [(thr <any_Cx_zh_t_thr>)]) sil))
Running scan for frate = 91
Considering guard w with value 1 for s ...
Considering guard g with value 1 for s ...
candidateGuards = map[g:true w:true]
Picking guard, w

Considering guard w with value 2 for uh ...
candidateGuards = map[w:true]
Picking guard, w

Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 91 public <soot> = (((sil [((z <any_Cx_s_z_p>) | (<any_Cx_s_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_s_z_p>) | (<any_Cx_s_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_w_p_z_s> w)] | [(w <any_Cx_w_p_z_s>)]) (s | z | ((<any_Cx_w_p_z_s> w) | (w <any_Cx_w_p_z_s>)))) ((([(<any_Vx_w_w_uh_noSlide> w)] | [(w <any_Vx_w_w_uh_noSlide>)]) ([(<any_Cx_w_w_t_s> w)] | [(w <any_Cx_w_w_t_s>)])) (uh | ((<any_Vx_w_w_uh_noSlide> w) | (w <any_Vx_w_w_uh_noSlide>)))) (([(<any_Cx_zh_w_t> zh)] | [(zh <any_Cx_zh_w_t>)]) (t | ((<any_Cx_zh_w_t> zh) | (zh <any_Cx_zh_w_t>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_thr> thr)] | [(thr <any_Cx_zh_t_thr>)]) sil))
Running scan for frate = 80
Considering guard g with value 1 for s ...
Considering guard w with value 1 for s ...
candidateGuards = map[g:true w:true]
Picking guard, g

Considering guard w with value 2 for uh ...
candidateGuards = map[w:true]
Picking guard, w

Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 80 public <soot> = (((sil [((sh <any_Cx_s_sh_p>) | (<any_Cx_s_sh_p> sh))] [((sh <any_vowel_noSlide>) | (<any_vowel_noSlide> sh))]) | (sil p (sil [((sh <any_Cx_s_sh_p>) | (<any_Cx_s_sh_p> sh))] [((sh <any_vowel_noSlide>) | (<any_vowel_noSlide> sh))]))) (([(<any_Cx_g_p_sh_s> g)] | [(g <any_Cx_g_p_sh_s>)]) (s | z | ((<any_Cx_g_p_sh_s> g) | (g <any_Cx_g_p_sh_s>)))) ((([(<any_Vx_w_g_uh_noSlide> w)] | [(w <any_Vx_w_g_uh_noSlide>)]) ([(<any_Cx_w_g_t_s> w)] | [(w <any_Cx_w_g_t_s>)])) (uh | ((<any_Vx_w_g_uh_noSlide> w) | (w <any_Vx_w_g_uh_noSlide>)))) (([(<any_Cx_zh_w_t> zh)] | [(zh <any_Cx_zh_w_t>)]) (t | ((<any_Cx_zh_w_t> zh) | (zh <any_Cx_zh_w_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_ch> ch)] | [(ch <any_Cx_zh_t_ch>)]) sil))
Running scan for frate = 72
Considering guard w with value 1 for s ...
Considering guard g with value 1 for s ...
candidateGuards = map[g:true w:true]
Picking guard, g

Considering guard w with value 2 for uh ...
candidateGuards = map[w:true]
Picking guard, w

Considering guard zh with value 1 for t ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 72 public <soot> = (((sil [((sh <any_Cx_s_sh_p>) | (<any_Cx_s_sh_p> sh))] [((sh <any_vowel_noSlide>) | (<any_vowel_noSlide> sh))]) | (sil p (sil [((sh <any_Cx_s_sh_p>) | (<any_Cx_s_sh_p> sh))] [((sh <any_vowel_noSlide>) | (<any_vowel_noSlide> sh))]))) (([(<any_Cx_g_p_sh_s> g)] | [(g <any_Cx_g_p_sh_s>)]) (s | z | ((<any_Cx_g_p_sh_s> g) | (g <any_Cx_g_p_sh_s>)))) ((([(<any_Vx_w_g_uh_noSlide> w)] | [(w <any_Vx_w_g_uh_noSlide>)]) ([(<any_Cx_w_g_t_s> w)] | [(w <any_Cx_w_g_t_s>)])) (uh | ((<any_Vx_w_g_uh_noSlide> w) | (w <any_Vx_w_g_uh_noSlide>)))) (([(<any_Cx_zh_w_t> zh)] | [(zh <any_Cx_zh_w_t>)]) (t | ((<any_Cx_zh_w_t> zh) | (zh <any_Cx_zh_w_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_p> p)] | [(p <any_Cx_zh_t_p>)]) sil))

results =
{72 [{sil 64 69} {s 70 73} {uh 74 76} {t 77 79} {sil 80 82}]}
{80 [{sil 71 73} {s 74 76} {uh 77 79} {t 80 85} {sil 86 91}]}
{91 [{sil 0 3} {s 4 38} {uh 39 55} {t 56 98} {sil 99 101}]}
{105 [{sil 0 5} {s 6 44} {uh 45 64} {t 65 92} {v 93 108} {thr 109 111} {sil 112 122}]}
{125 [{sil 3 7} {s 8 53} {uh 54 76} {t 77 110} {v 111 123} {g 124 133} {sil 134 146}]}

normalised results =
{72 [{sil 64 69} {s 97 101} {uh 103 103} {t 107 107} {sil 111 111}]}
{80 [{sil 71 73} {s 93 93} {uh 96 96} {t 100 106} {sil 108 114}]}
{91 [{sil 0 3} {s 4 42} {uh 43 60} {t 62 108} {sil 109 109}]}
{105 [{sil 0 5} {s 6 42} {uh 43 61} {t 62 88} {v 89 103} {thr 104 104} {sil 107 116}]}
{125 [{sil 3 7} {s 6 42} {uh 43 61} {t 62 88} {v 89 98} {g 99 106} {sil 107 117}]}

ruleAligned = [{{s 1} [{2 1} {3 1} {4 1}]} {{uh 1} [{2 2} {3 2} {4 2}]} {{t 0} [{1 3} {2 3} {3 3} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 64 64} {s 97 97} {uh 103 103} {t 107 107} {sil 111 111}]}
{80 [{sil 71 71} {s 93 93} {uh 96 96} {t 100 106} {sil 108 108}]}
{91 [{sil 0 0} {s 4 42} {uh 43 60} {t 62 108} {sil 109 109}]}
{105 [{sil 0 0} {s 6 42} {uh 43 61} {t 62 88} {v 89 103} {thr 104 104} {sil 107 107}]}
{125 [{sil 3 3} {s 6 42} {uh 43 61} {t 62 88} {v 89 98} {g 99 106} {sil 107 107}]}

timeAligned = [{{s 6 42} [{2 1} {3 1} {4 1}]} {{uh 43 60} [{2 2} {3 2} {4 2}]} {{t 62 88} [{2 3} {3 3} {4 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 42
i, iTime, newITime, timeStartFrom = 2 1 2 60
combinedVerdict    = [{s 1} {uh 1} {t 0}]
ruleAlignedVerdict = [{s 1} {uh 1} {t 0}]

score->
+1 for s
+1 for uh
+1 for t
score<-: 8
testPronounce s possible uh possible t good
publish->
phonsToAlphas = [{[s] s} {[uh] oo} {[t] t}]
getVerdict<-:new {s [s] 1}
getVerdict<-:new {oo [uh] 1}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{s [s] 1} {oo [uh] 1} {t [t] 0}]
publish<-
{
  "results": [
    {
      "letters": "s",
      "phonemes": "s",
      "verdict": "possible"
    },
    {
      "letters": "oo",
      "phonemes": "ÊŠ",
      "verdict": "possible"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
