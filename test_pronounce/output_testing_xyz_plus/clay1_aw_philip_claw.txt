
 length of audio =  2.282313



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.76 0.94 1.7

 start3, duration3, end3 =  0.86 0.76 1.62

 Initial start, duration, end =  0.66 1.04 1.7

 Cut at: start, duration =  0.66 1.49     guard_end =  2.15 

Running scan for frate = 125
Considering guard n with value 3 for k ...
candidateGuards = map[n:true]
Picking guard, n

Considering guard n with value 6 for l ...
candidateGuards = map[n:true]
Picking guard, n

Considering guard sh with value 1 for ao ...
candidateGuards = map[sh:true]
Picking guard, sh


frate, target rule = 125 public <claw> = (((sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil b (sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_n_b_d_k_l> n)] | [(n <any_Cx_n_b_d_k_l>)]) (k | ((<any_Cx_n_b_d_k_l> n) | (n <any_Cx_n_b_d_k_l>)))) (([(<any_Cx_n_n_l_k> n)] | [(n <any_Cx_n_n_l_k>)]) (l | ((<any_Cx_n_n_l> n) | (n <any_Cx_n_n_l>)))) ((([(<any_Vx_sh_n_ao_noSlide> sh)] | [(sh <any_Vx_sh_n_ao_noSlide>)]) ([(<any_Cx_sh_n_l> sh)] | [(sh <any_Cx_sh_n_l>)])) (ao | ((<any_Vx_sh_n_ao_noSlide> sh) | (sh <any_Vx_sh_n_ao_noSlide>)))) (([(<any_Cx_sh_ao_w> w)] | [(w <any_Cx_sh_ao_w>)]) ([(<any_Vx_sh_ao_w> w)] | [(w <any_Vx_sh_ao_w>)]) sil))
Running scan for frate = 105
Considering guard n with value 3 for k ...
candidateGuards = map[n:true]
Picking guard, n

Considering guard n with value 6 for l ...
candidateGuards = map[n:true]
Picking guard, n

Considering guard sh with value 1 for ao ...
candidateGuards = map[sh:true]
Picking guard, sh


frate, target rule = 105 public <claw> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_n_b_ch_k_l> n)] | [(n <any_Cx_n_b_ch_k_l>)]) (k | ((<any_Cx_n_b_ch_k_l> n) | (n <any_Cx_n_b_ch_k_l>)))) (([(<any_Cx_n_n_l_k> n)] | [(n <any_Cx_n_n_l_k>)]) (l | ((<any_Cx_n_n_l> n) | (n <any_Cx_n_n_l>)))) ((([(<any_Vx_sh_n_ao_noSlide> sh)] | [(sh <any_Vx_sh_n_ao_noSlide>)]) ([(<any_Cx_sh_n_l> sh)] | [(sh <any_Cx_sh_n_l>)])) (ao | ((<any_Vx_sh_n_ao_noSlide> sh) | (sh <any_Vx_sh_n_ao_noSlide>)))) (([(<any_Cx_sh_ao_ch> ch)] | [(ch <any_Cx_sh_ao_ch>)]) ([(<any_Vx_sh_ao_ch> ch)] | [(ch <any_Vx_sh_ao_ch>)]) sil))
Running scan for frate = 91
Considering guard n with value 3 for k ...
candidateGuards = map[n:true]
Picking guard, n

Considering guard n with value 6 for l ...
candidateGuards = map[n:true]
Picking guard, n

Considering guard sh with value 1 for ao ...
candidateGuards = map[sh:true]
Picking guard, sh


frate, target rule = 91 public <claw> = (((sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]) | (sil b (sil [((p <any_Cx_k_p_b>) | (<any_Cx_k_p_b> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]))) (([(<any_Cx_n_b_p_k_l> n)] | [(n <any_Cx_n_b_p_k_l>)]) (k | ((<any_Cx_n_b_p_k_l> n) | (n <any_Cx_n_b_p_k_l>)))) (([(<any_Cx_n_n_l_k> n)] | [(n <any_Cx_n_n_l_k>)]) (l | ((<any_Cx_n_n_l> n) | (n <any_Cx_n_n_l>)))) ((([(<any_Vx_sh_n_ao_noSlide> sh)] | [(sh <any_Vx_sh_n_ao_noSlide>)]) ([(<any_Cx_sh_n_l> sh)] | [(sh <any_Cx_sh_n_l>)])) (ao | ((<any_Vx_sh_n_ao_noSlide> sh) | (sh <any_Vx_sh_n_ao_noSlide>)))) (([(<any_Cx_sh_ao_thr> thr)] | [(thr <any_Cx_sh_ao_thr>)]) ([(<any_Vx_sh_ao_thr> thr)] | [(thr <any_Vx_sh_ao_thr>)]) sil))
Running scan for frate = 80
Considering guard n with value 3 for k ...
candidateGuards = map[n:true]
Picking guard, n

Considering guard n with value 6 for l ...
candidateGuards = map[n:true]
Picking guard, n

Considering guard sh with value 1 for ao ...
candidateGuards = map[sh:true]
Picking guard, sh


frate, target rule = 80 public <claw> = (((sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]) | (sil b (sil [((ch <any_Cx_k_ch_b>) | (<any_Cx_k_ch_b> ch))] [((ch <any_vowel_noSlide>) | (<any_vowel_noSlide> ch))]))) (([(<any_Cx_n_b_ch_k_l> n)] | [(n <any_Cx_n_b_ch_k_l>)]) (k | ((<any_Cx_n_b_ch_k_l> n) | (n <any_Cx_n_b_ch_k_l>)))) (([(<any_Cx_n_n_l_k> n)] | [(n <any_Cx_n_n_l_k>)]) (l | ((<any_Cx_n_n_l> n) | (n <any_Cx_n_n_l>)))) ((([(<any_Vx_sh_n_ao_noSlide> sh)] | [(sh <any_Vx_sh_n_ao_noSlide>)]) ([(<any_Cx_sh_n_l> sh)] | [(sh <any_Cx_sh_n_l>)])) (ao | ((<any_Vx_sh_n_ao_noSlide> sh) | (sh <any_Vx_sh_n_ao_noSlide>)))) (([(<any_Cx_sh_ao_n> n)] | [(n <any_Cx_sh_ao_n>)]) ([(<any_Vx_sh_ao_n> n)] | [(n <any_Vx_sh_ao_n>)]) sil))
Running scan for frate = 72
Considering guard n with value 3 for k ...
candidateGuards = map[n:true]
Picking guard, n

Considering guard n with value 6 for l ...
candidateGuards = map[n:true]
Picking guard, n

Considering guard sh with value 1 for ao ...
candidateGuards = map[sh:true]
Picking guard, sh


frate, target rule = 72 public <claw> = (((sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil b (sil [((d <any_Cx_k_d_b>) | (<any_Cx_k_d_b> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_n_b_d_k_l> n)] | [(n <any_Cx_n_b_d_k_l>)]) (k | ((<any_Cx_n_b_d_k_l> n) | (n <any_Cx_n_b_d_k_l>)))) (([(<any_Cx_n_n_l_k> n)] | [(n <any_Cx_n_n_l_k>)]) (l | ((<any_Cx_n_n_l> n) | (n <any_Cx_n_n_l>)))) ((([(<any_Vx_sh_n_ao_noSlide> sh)] | [(sh <any_Vx_sh_n_ao_noSlide>)]) ([(<any_Cx_sh_n_l> sh)] | [(sh <any_Cx_sh_n_l>)])) (ao | ((<any_Vx_sh_n_ao_noSlide> sh) | (sh <any_Vx_sh_n_ao_noSlide>)))) (([(<any_Cx_sh_ao_w> w)] | [(w <any_Cx_sh_ao_w>)]) ([(<any_Vx_sh_ao_w> w)] | [(w <any_Vx_sh_ao_w>)]) sil))
Running scan for frate = 125
Considering guard zh with value 1 for kl ...
Considering guard z with value 1 for kl ...
candidateGuards = map[z:true zh:true]
Picking guard, z

Considering guard z with value 1 for ao ...
Considering guard zh with value 1 for ao ...
candidateGuards = map[z:true zh:true]
Picking guard, z


frate, target rule = 125 public <claw> = (((sil [((z <any_Cx_kl_z_p>) | (<any_Cx_kl_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_kl_z_p>) | (<any_Cx_kl_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_z_p_z_kl> z)] | [(z <any_Cx_z_p_z_kl>)]) (kl | ((<any_Cx_z_p_z_kl> z) | (z <any_Cx_z_p_z_kl>)))) ((([(<any_Vx_z_z_ao_noSlide> z)] | [(z <any_Vx_z_z_ao_noSlide>)]) ([(<any_Cx_z_z_kl> z)] | [(z <any_Cx_z_z_kl>)])) (ao | ((<any_Vx_z_z_ao_noSlide> z) | (z <any_Vx_z_z_ao_noSlide>)))) (([(<any_Cx_z_ao_thr> thr)] | [(thr <any_Cx_z_ao_thr>)]) ([(<any_Vx_z_ao_thr> thr)] | [(thr <any_Vx_z_ao_thr>)]) sil))
Running scan for frate = 105
Considering guard z with value 1 for kl ...
Considering guard zh with value 1 for kl ...
candidateGuards = map[z:true zh:true]
Picking guard, z

Considering guard z with value 1 for ao ...
Considering guard zh with value 1 for ao ...
candidateGuards = map[z:true zh:true]
Picking guard, z


frate, target rule = 105 public <claw> = (((sil [((z <any_Cx_kl_z_p>) | (<any_Cx_kl_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_kl_z_p>) | (<any_Cx_kl_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_z_p_z_kl> z)] | [(z <any_Cx_z_p_z_kl>)]) (kl | ((<any_Cx_z_p_z_kl> z) | (z <any_Cx_z_p_z_kl>)))) ((([(<any_Vx_z_z_ao_noSlide> z)] | [(z <any_Vx_z_z_ao_noSlide>)]) ([(<any_Cx_z_z_kl> z)] | [(z <any_Cx_z_z_kl>)])) (ao | ((<any_Vx_z_z_ao_noSlide> z) | (z <any_Vx_z_z_ao_noSlide>)))) (([(<any_Cx_z_ao_r> r)] | [(r <any_Cx_z_ao_r>)]) ([(<any_Vx_z_ao_r> r)] | [(r <any_Vx_z_ao_r>)]) sil))
Running scan for frate = 91
Considering guard zh with value 1 for kl ...
Considering guard z with value 1 for kl ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

Considering guard zh with value 1 for ao ...
Considering guard z with value 1 for ao ...
candidateGuards = map[z:true zh:true]
Picking guard, zh


frate, target rule = 91 public <claw> = (((sil [((z <any_Cx_kl_z_p>) | (<any_Cx_kl_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_kl_z_p>) | (<any_Cx_kl_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_zh_p_z_kl> zh)] | [(zh <any_Cx_zh_p_z_kl>)]) (kl | ((<any_Cx_zh_p_z_kl> zh) | (zh <any_Cx_zh_p_z_kl>)))) ((([(<any_Vx_zh_zh_ao_noSlide> zh)] | [(zh <any_Vx_zh_zh_ao_noSlide>)]) ([(<any_Cx_zh_zh_kl> zh)] | [(zh <any_Cx_zh_zh_kl>)])) (ao | ((<any_Vx_zh_zh_ao_noSlide> zh) | (zh <any_Vx_zh_zh_ao_noSlide>)))) (([(<any_Cx_zh_ao_r> r)] | [(r <any_Cx_zh_ao_r>)]) ([(<any_Vx_zh_ao_r> r)] | [(r <any_Vx_zh_ao_r>)]) sil))
Running scan for frate = 80
Considering guard z with value 1 for kl ...
Considering guard zh with value 1 for kl ...
candidateGuards = map[z:true zh:true]
Picking guard, z

Considering guard z with value 1 for ao ...
Considering guard zh with value 1 for ao ...
candidateGuards = map[z:true zh:true]
Picking guard, zh


frate, target rule = 80 public <claw> = (((sil [((z <any_Cx_kl_z_p>) | (<any_Cx_kl_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_kl_z_p>) | (<any_Cx_kl_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_z_p_z_kl> z)] | [(z <any_Cx_z_p_z_kl>)]) (kl | ((<any_Cx_z_p_z_kl> z) | (z <any_Cx_z_p_z_kl>)))) ((([(<any_Vx_zh_z_ao_noSlide> zh)] | [(zh <any_Vx_zh_z_ao_noSlide>)]) ([(<any_Cx_zh_z_kl> zh)] | [(zh <any_Cx_zh_z_kl>)])) (ao | ((<any_Vx_zh_z_ao_noSlide> zh) | (zh <any_Vx_zh_z_ao_noSlide>)))) (([(<any_Cx_zh_ao_d> d)] | [(d <any_Cx_zh_ao_d>)]) ([(<any_Vx_zh_ao_d> d)] | [(d <any_Vx_zh_ao_d>)]) sil))
Running scan for frate = 72
Considering guard zh with value 1 for kl ...
Considering guard z with value 1 for kl ...
candidateGuards = map[z:true zh:true]
Picking guard, zh

Considering guard z with value 1 for ao ...
Considering guard zh with value 1 for ao ...
candidateGuards = map[z:true zh:true]
Picking guard, z


frate, target rule = 72 public <claw> = (((sil [((z <any_Cx_kl_z_p>) | (<any_Cx_kl_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_kl_z_p>) | (<any_Cx_kl_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_zh_p_z_kl> zh)] | [(zh <any_Cx_zh_p_z_kl>)]) (kl | ((<any_Cx_zh_p_z_kl> zh) | (zh <any_Cx_zh_p_z_kl>)))) ((([(<any_Vx_z_zh_ao_noSlide> z)] | [(z <any_Vx_z_zh_ao_noSlide>)]) ([(<any_Cx_z_zh_kl> z)] | [(z <any_Cx_z_zh_kl>)])) (ao | ((<any_Vx_z_zh_ao_noSlide> z) | (z <any_Vx_z_zh_ao_noSlide>)))) (([(<any_Cx_z_ao_r> r)] | [(r <any_Cx_z_ao_r>)]) ([(<any_Vx_z_ao_r> r)] | [(r <any_Vx_z_ao_r>)]) sil))

results =
{72 [{sil 0 10} {kl 11 23} {ao 24 26} {r 27 29} {ay 30 54} {sil 55 63}]}
{80 [{sil 0 12} {kl 13 25} {ao 26 28} {d 29 31} {ay 32 60} {sil 61 68}]}
{91 [{sil 0 11} {g 12 18} {zh 19 21} {kl 22 29} {ao 30 32} {r 33 35} {er 36 66} {sil 67 130}]}
{105 [{sil 0 14} {g 15 22} {z 23 25} {kl 26 33} {ao 34 37} {r 38 40} {er 41 76} {sil 77 151}]}
{125 [{sil 3 19} {g 20 28} {z 29 31} {z 32 35} {l 36 51} {eh 52 76} {z 77 79} {iy 80 109} {z 110 112} {sil 113 182}]}

normalised results =
{72 [{sil 0 10} {kl 15 32} {ao 33 33} {r 38 38} {ay 42 75} {sil 76 88}]}
{80 [{sil 0 12} {kl 16 31} {ao 33 33} {d 36 36} {ay 40 75} {sil 76 85}]}
{91 [{sil 0 11} {g 13 20} {zh 21 21} {kl 24 32} {ao 33 33} {r 36 36} {er 40 73} {sil 74 143}]}
{105 [{sil 0 14} {g 14 21} {z 22 22} {kl 25 31} {ao 32 35} {r 36 36} {er 39 72} {sil 73 144}]}
{125 [{sil 3 19} {g 16 22} {z 23 23} {z 26 28} {l 29 41} {eh 42 61} {z 62 62} {iy 64 87} {z 88 88} {sil 90 146}]}

ruleAligned = [{{kl 0} [{0 1} {1 1} {2 3} {3 3}]} {{ao 2} []}]

results (after rule-alignment) =
{72 [{sil 0 0} {kl 15 32} {ao 33 33} {r 38 38} {ay 42 75} {sil 76 76}]}
{80 [{sil 0 0} {kl 16 31} {ao 33 33} {d 36 36} {ay 40 75} {sil 76 76}]}
{91 [{sil 0 0} {g 13 20} {zh 21 21} {kl 24 32} {ao 33 33} {r 36 36} {er 40 73} {sil 74 74}]}
{105 [{sil 0 0} {g 14 21} {z 22 22} {kl 25 31} {ao 32 32} {r 36 36} {er 39 72} {sil 73 73}]}
{125 [{sil 3 3} {g 16 22} {z 23 23} {z 26 26} {l 29 41} {eh 42 61} {z 62 62} {iy 64 87} {z 88 88} {sil 90 90}]}

timeAligned = [{{g 16 20} [{2 1} {3 1} {4 1}]} {{kl 24 31} [{0 1} {1 1} {2 3} {3 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 1 0
i, iTime, newITime, timeStartFrom = 1 1 -1 31
combinedVerdict    = [{g 3} {kl 0} {ao 2}]
ruleAlignedVerdict = [{kl 0} {ao 2}]

score->
-1 for g
+1 for kl
-1 for ao
score<-: -1

results =
{72 [{sil 0 8} {k 9 21} {l 22 24} {ao 25 27} {w 28 30} {ay 31 54} {sil 55 63}]}
{80 [{sil 0 9} {k 10 22} {l 23 31} {ao 32 34} {ow 35 52} {n 53 65} {sil 66 68}]}
{91 [{sil 0 11} {k 12 26} {l 27 37} {ao 38 49} {thr 50 52} {iy 53 77} {sil 78 130}]}
{105 [{sil 0 14} {k 15 30} {l 31 43} {eh 44 64} {sh 65 67} {iy 68 88} {ch 89 91} {sil 92 151}]}
{125 [{sil 3 20} {k 21 39} {l 40 51} {eh 52 77} {sh 78 80} {iy 81 107} {sh 108 110} {sil 111 182}]}

normalised results =
{72 [{sil 0 8} {k 13 29} {l 31 31} {ao 35 35} {w 39 39} {ay 43 75} {sil 76 88}]}
{80 [{sil 0 9} {k 13 28} {l 29 39} {ao 40 40} {ow 44 65} {n 66 81} {sil 83 83}]}
{91 [{sil 0 11} {k 13 29} {l 30 41} {ao 42 54} {thr 55 55} {iy 58 85} {sil 86 143}]}
{105 [{sil 0 14} {k 14 29} {l 30 41} {eh 42 61} {sh 62 62} {iy 65 84} {ch 85 85} {sil 88 144}]}
{125 [{sil 3 20} {k 17 31} {l 32 41} {eh 42 62} {sh 62 62} {iy 65 86} {sh 86 86} {sil 89 146}]}

ruleAligned = [{{k 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{l 0} [{1 2} {2 2} {3 2} {4 2}]} {{ao 2} [{2 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {k 13 29} {l 31 31} {ao 35 35} {w 39 39} {ay 43 75} {sil 76 76}]}
{80 [{sil 0 0} {k 13 28} {l 29 39} {ao 40 40} {ow 44 65} {n 66 81} {sil 83 83}]}
{91 [{sil 0 0} {k 13 29} {l 30 41} {ao 42 54} {thr 55 55} {iy 58 85} {sil 86 86}]}
{105 [{sil 0 0} {k 14 29} {l 30 41} {eh 42 61} {sh 62 62} {iy 65 84} {ch 85 85} {sil 88 88}]}
{125 [{sil 3 3} {k 17 31} {l 32 41} {eh 42 62} {sh 62 62} {iy 65 86} {sh 86 86} {sil 89 89}]}

timeAligned = [{{k 13 29} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{l 30 41} [{1 2} {2 2} {3 2} {4 2}]} {{iy 65 84} [{2 5} {3 5} {4 5}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 28
i, iTime, newITime, timeStartFrom = 2 1 -1 39
combinedVerdict    = [{k 0} {l 0} {ao 2} {iy 3}]
ruleAlignedVerdict = [{k 0} {l 0} {ao 2}]

score->
+1 for k
+1 for l
-1 for ao
-1 for iy
score<-: 0
bestResult = {0 [{k 0} {l 0} {ao 2} {iy 3}] [k l ao]}
testPronounce k good l good ao missing iy surprise
publish->
phonsToAlphas = [{[k] c} {[l] l} {[ao] aw}]
getVerdict<-:new {c [k] 0}
getVerdict<-:new {l [l] 0}
getVerdict<-:new {aw [ao] 2}
lettersVerdicts = [{c [k] 0} {l [l] 0} {aw [ao] 2} {iy [iy] 3}]
publish<-
{
  "results": [
    {
      "letters": "c",
      "phonemes": "k",
      "verdict": "good"
    },
    {
      "letters": "l",
      "phonemes": "l",
      "verdict": "good"
    },
    {
      "letters": "aw",
      "phonemes": "ɔ",
      "verdict": "missing"
    },
    {
      "letters": "iy",
      "phonemes": "iː",
      "verdict": "surprise"
    }
  ],
  "err": null
}
