
 length of audio =  1.898625



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.7000000000000001 0.94 1.6400000000000001

 start3, duration3, end3 =  0.72 0.56 1.28

 Initial start, duration, end =  0.6000000000000001 1.04 1.6400000000000001

 Cut at: start, duration =  0.6000000000000001 1.278625     guard_end =  1.878625 

Running scan for frate = 125
Considering guard z with value 3.2 for hh ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard sh with value 8 for iy ...
Considering guard ch with value 8 for iy ...
Considering guard s with value 8 for iy ...
candidateGuards = map[ch:true s:true sh:true]
Picking guard, sh

Considering guard ch with value 3 for v ...
candidateGuards = map[ch:true]
Picking guard, ch


frate, target rule = 125 public <heave> = (((sil [((iy <any_Cx_hh_iy_b>) | (<any_Cx_hh_iy_b> iy))] [((iy <any_vowel_noSlide>) | (<any_vowel_noSlide> iy))]) | (sil b (sil [((iy <any_Cx_hh_iy_b>) | (<any_Cx_hh_iy_b> iy))] [((iy <any_vowel_noSlide>) | (<any_vowel_noSlide> iy))]))) (([(<any_Cx_z_b_iy_hh> z)] | [(z <any_Cx_z_b_iy_hh>)]) (hh | ((<any_Cx_z_b_iy_hh> z) | (z <any_Cx_z_b_iy_hh>)))) ((([(<any_Vx_sh_z_iy_noSlide> sh)] | [(sh <any_Vx_sh_z_iy_noSlide>)]) ([(<any_Cx_sh_z_v_hh> sh)] | [(sh <any_Cx_sh_z_v_hh>)])) (iy | ((<any_Vx_sh_z_iy_noSlide> sh) | (sh <any_Vx_sh_z_iy_noSlide>)))) (([(<any_Cx_ch_sh_v> ch)] | [(ch <any_Cx_ch_sh_v>)]) (v | ((<any_Cx_ch_sh_v> ch) | (ch <any_Cx_ch_sh_v>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_ch_v_thr> thr)] | [(thr <any_Cx_ch_v_thr>)]) sil))
Running scan for frate = 105
Considering guard z with value 3.2 for hh ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard s with value 8 for iy ...
Considering guard ch with value 8 for iy ...
Considering guard sh with value 8 for iy ...
candidateGuards = map[ch:true s:true sh:true]
Picking guard, s

Considering guard ch with value 3 for v ...
candidateGuards = map[ch:true]
Picking guard, ch


frate, target rule = 105 public <heave> = (((sil [((b <any_Cx_hh_b_b>) | (<any_Cx_hh_b_b> b))] [((b <any_vowel_noSlide>) | (<any_vowel_noSlide> b))]) | (sil b (sil [((b <any_Cx_hh_b_b>) | (<any_Cx_hh_b_b> b))] [((b <any_vowel_noSlide>) | (<any_vowel_noSlide> b))]))) (([(<any_Cx_z_b_b_hh> z)] | [(z <any_Cx_z_b_b_hh>)]) (hh | ((<any_Cx_z_b_b_hh> z) | (z <any_Cx_z_b_b_hh>)))) ((([(<any_Vx_s_z_iy_noSlide> s)] | [(s <any_Vx_s_z_iy_noSlide>)]) ([(<any_Cx_s_z_v_hh> s)] | [(s <any_Cx_s_z_v_hh>)])) (iy | ((<any_Vx_s_z_iy_noSlide> s) | (s <any_Vx_s_z_iy_noSlide>)))) (([(<any_Cx_ch_s_v> ch)] | [(ch <any_Cx_ch_s_v>)]) (v | ((<any_Cx_ch_s_v> ch) | (ch <any_Cx_ch_s_v>)))) (([(<any_vowel_noSlide> l)] | [(l <any_vowel_noSlide>)]) ([(<any_Cx_ch_v_l> l)] | [(l <any_Cx_ch_v_l>)]) sil))
Running scan for frate = 91
Considering guard z with value 3.2 for hh ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard ch with value 8 for iy ...
Considering guard sh with value 8 for iy ...
Considering guard s with value 8 for iy ...
candidateGuards = map[ch:true s:true sh:true]
Picking guard, s

Considering guard ch with value 3 for v ...
candidateGuards = map[ch:true]
Picking guard, ch


frate, target rule = 91 public <heave> = (((sil [((z <any_Cx_hh_z_b>) | (<any_Cx_hh_z_b> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil b (sil [((z <any_Cx_hh_z_b>) | (<any_Cx_hh_z_b> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_z_b_z_hh> z)] | [(z <any_Cx_z_b_z_hh>)]) (hh | ((<any_Cx_z_b_z_hh> z) | (z <any_Cx_z_b_z_hh>)))) ((([(<any_Vx_s_z_iy_noSlide> s)] | [(s <any_Vx_s_z_iy_noSlide>)]) ([(<any_Cx_s_z_v_hh> s)] | [(s <any_Cx_s_z_v_hh>)])) (iy | ((<any_Vx_s_z_iy_noSlide> s) | (s <any_Vx_s_z_iy_noSlide>)))) (([(<any_Cx_ch_s_v> ch)] | [(ch <any_Cx_ch_s_v>)]) (v | ((<any_Cx_ch_s_v> ch) | (ch <any_Cx_ch_s_v>)))) (([(<any_vowel_noSlide> z)] | [(z <any_vowel_noSlide>)]) ([(<any_Cx_ch_v_z> z)] | [(z <any_Cx_ch_v_z>)]) sil))
Running scan for frate = 80
Considering guard z with value 3.2 for hh ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard sh with value 8 for iy ...
Considering guard s with value 8 for iy ...
Considering guard ch with value 8 for iy ...
candidateGuards = map[ch:true s:true sh:true]
Picking guard, sh

Considering guard ch with value 3 for v ...
candidateGuards = map[ch:true]
Picking guard, ch


frate, target rule = 80 public <heave> = (((sil [((iy <any_Cx_hh_iy_b>) | (<any_Cx_hh_iy_b> iy))] [((iy <any_vowel_noSlide>) | (<any_vowel_noSlide> iy))]) | (sil b (sil [((iy <any_Cx_hh_iy_b>) | (<any_Cx_hh_iy_b> iy))] [((iy <any_vowel_noSlide>) | (<any_vowel_noSlide> iy))]))) (([(<any_Cx_z_b_iy_hh> z)] | [(z <any_Cx_z_b_iy_hh>)]) (hh | ((<any_Cx_z_b_iy_hh> z) | (z <any_Cx_z_b_iy_hh>)))) ((([(<any_Vx_sh_z_iy_noSlide> sh)] | [(sh <any_Vx_sh_z_iy_noSlide>)]) ([(<any_Cx_sh_z_v_hh> sh)] | [(sh <any_Cx_sh_z_v_hh>)])) (iy | ((<any_Vx_sh_z_iy_noSlide> sh) | (sh <any_Vx_sh_z_iy_noSlide>)))) (([(<any_Cx_ch_sh_v> ch)] | [(ch <any_Cx_ch_sh_v>)]) (v | ((<any_Cx_ch_sh_v> ch) | (ch <any_Cx_ch_sh_v>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_ch_v_thr> thr)] | [(thr <any_Cx_ch_v_thr>)]) sil))
Running scan for frate = 72
Considering guard z with value 3.2 for hh ...
candidateGuards = map[z:true]
Picking guard, z

Considering guard sh with value 8 for iy ...
Considering guard s with value 8 for iy ...
Considering guard ch with value 8 for iy ...
candidateGuards = map[ch:true s:true sh:true]
Picking guard, ch

Considering guard ch with value 3 for v ...
candidateGuards = map[ch:true]
Picking guard, ch


frate, target rule = 72 public <heave> = (((sil [((b <any_Cx_hh_b_b>) | (<any_Cx_hh_b_b> b))] [((b <any_vowel_noSlide>) | (<any_vowel_noSlide> b))]) | (sil b (sil [((b <any_Cx_hh_b_b>) | (<any_Cx_hh_b_b> b))] [((b <any_vowel_noSlide>) | (<any_vowel_noSlide> b))]))) (([(<any_Cx_z_b_b_hh> z)] | [(z <any_Cx_z_b_b_hh>)]) (hh | ((<any_Cx_z_b_b_hh> z) | (z <any_Cx_z_b_b_hh>)))) ((([(<any_Vx_ch_z_iy_noSlide> ch)] | [(ch <any_Vx_ch_z_iy_noSlide>)]) ([(<any_Cx_ch_z_v_hh> ch)] | [(ch <any_Cx_ch_z_v_hh>)])) (iy | ((<any_Vx_ch_z_iy_noSlide> ch) | (ch <any_Vx_ch_z_iy_noSlide>)))) (([(<any_Cx_ch_ch_v> ch)] | [(ch <any_Cx_ch_ch_v>)]) (v | ((<any_Cx_ch_ch_v> ch) | (ch <any_Cx_ch_ch_v>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_ch_v_thr> thr)] | [(thr <any_Cx_ch_v_thr>)]) sil))

results =
{72 [{sil 0 7} {hh 8 18} {iy 19 48} {v 49 63} {sil 64 79}]}
{80 [{sil 0 9} {hh 10 20} {iy 21 54} {v 55 69} {sil 70 85}]}
{91 [{sil 0 6} {hh 7 20} {iy 21 62} {v 63 80} {sil 81 115}]}
{105 [{sil 0 7} {hh 8 26} {iy 27 72} {v 73 93} {sil 94 129}]}
{125 [{sil 3 11} {hh 12 32} {iy 33 87} {v 88 111} {sil 112 155}]}

normalised results =
{72 [{sil 0 7} {hh 11 25} {iy 26 67} {v 68 88} {sil 89 110}]}
{80 [{sil 0 9} {hh 13 25} {iy 26 68} {v 69 86} {sil 88 106}]}
{91 [{sil 0 6} {hh 8 22} {iy 23 68} {v 69 88} {sil 89 126}]}
{105 [{sil 0 7} {hh 8 25} {iy 26 69} {v 70 89} {sil 90 123}]}
{125 [{sil 3 11} {hh 10 26} {iy 26 70} {v 70 89} {sil 90 124}]}

ruleAligned = [{{hh 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{iy 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{v 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {hh 11 25} {iy 26 67} {v 68 88} {sil 89 89}]}
{80 [{sil 0 0} {hh 13 25} {iy 26 68} {v 69 86} {sil 88 88}]}
{91 [{sil 0 0} {hh 8 22} {iy 23 68} {v 69 88} {sil 89 89}]}
{105 [{sil 0 0} {hh 8 25} {iy 26 69} {v 70 89} {sil 90 90}]}
{125 [{sil 3 3} {hh 10 26} {iy 26 70} {v 70 89} {sil 90 90}]}

timeAligned = [{{hh 10 25} [{2 1} {3 1} {4 1} {0 1} {1 1}]} {{iy 26 68} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{v 69 88} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 22
i, iTime, newITime, timeStartFrom = 2 1 2 67
combinedVerdict    = [{hh 0} {iy 0} {v 0}]
ruleAlignedVerdict = [{hh 0} {iy 0} {v 0}]

score->
+1 for hh
+1 for iy
+1 for v
score<-: 8
testPronounce hh good iy good v good
publish->
phonsToAlphas = [{[hh] h} {[iy] ea} {[v] ve}]
getVerdict<-:new {h [hh] 0}
getVerdict<-:new {ea [iy] 0}
getVerdict<-:new {ve [v] 0}
lettersVerdicts = [{h [hh] 0} {ea [iy] 0} {ve [v] 0}]
publish<-
{
  "results": [
    {
      "letters": "h",
      "phonemes": "h",
      "verdict": "good"
    },
    {
      "letters": "ea",
      "phonemes": "iː",
      "verdict": "good"
    },
    {
      "letters": "ve",
      "phonemes": "v",
      "verdict": "good"
    }
  ],
  "err": null
}
