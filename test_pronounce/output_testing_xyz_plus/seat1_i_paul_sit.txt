
 length of audio =  3.017125



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  1.2799999999999998 0.66 1.94

 start3, duration3, end3 =  1.2799999999999998 0.44000000000000006 1.7199999999999998

 Initial start, duration, end =  1.1799999999999997 0.7600000000000002 1.94

 Cut at: start, duration =  1.1799999999999997 1.2100000000000002     guard_end =  2.3899999999999997 

Running scan for frate = 125
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 125 public <sit> = (((sil [((th <any_Cx_s_th_p>) | (<any_Cx_s_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]) | (sil p (sil [((th <any_Cx_s_th_p>) | (<any_Cx_s_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]))) (([(<any_Cx_l_p_th_s> l)] | [(l <any_Cx_l_p_th_s>)]) (s | z | ((<any_Cx_l_p_th_s> l) | (l <any_Cx_l_p_th_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_r_t_ch> ch)] | [(ch <any_Cx_r_t_ch>)]) sil))
Running scan for frate = 105
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 105 public <sit> = (((sil [((t <any_Cx_s_t_p>) | (<any_Cx_s_t_p> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]) | (sil p (sil [((t <any_Cx_s_t_p>) | (<any_Cx_s_t_p> t))] [((t <any_vowel_noSlide>) | (<any_vowel_noSlide> t))]))) (([(<any_Cx_l_p_t_s> l)] | [(l <any_Cx_l_p_t_s>)]) (s | z | ((<any_Cx_l_p_t_s> l) | (l <any_Cx_l_p_t_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_r_t_g> g)] | [(g <any_Cx_r_t_g>)]) sil))
Running scan for frate = 91
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 91 public <sit> = (((sil [((th <any_Cx_s_th_p>) | (<any_Cx_s_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]) | (sil p (sil [((th <any_Cx_s_th_p>) | (<any_Cx_s_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]))) (([(<any_Cx_l_p_th_s> l)] | [(l <any_Cx_l_p_th_s>)]) (s | z | ((<any_Cx_l_p_th_s> l) | (l <any_Cx_l_p_th_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_r_t_thr> thr)] | [(thr <any_Cx_r_t_thr>)]) sil))
Running scan for frate = 80
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 80 public <sit> = (((sil [((th <any_Cx_s_th_p>) | (<any_Cx_s_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]) | (sil p (sil [((th <any_Cx_s_th_p>) | (<any_Cx_s_th_p> th))] [((th <any_vowel_noSlide>) | (<any_vowel_noSlide> th))]))) (([(<any_Cx_l_p_th_s> l)] | [(l <any_Cx_l_p_th_s>)]) (s | z | ((<any_Cx_l_p_th_s> l) | (l <any_Cx_l_p_th_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_r_t_p> p)] | [(p <any_Cx_r_t_p>)]) sil))
Running scan for frate = 72
Considering guard l with value 3.3999999999999995 for s ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard l with value 6.799999999999999 for ih ...
candidateGuards = map[l:true]
Picking guard, l

Considering guard r with value 3 for t ...
candidateGuards = map[r:true]
Picking guard, r

frate, target rule = 72 public <sit> = (((sil [((z <any_Cx_s_z_p>) | (<any_Cx_s_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_s_z_p>) | (<any_Cx_s_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_l_p_z_s> l)] | [(l <any_Cx_l_p_z_s>)]) (s | z | ((<any_Cx_l_p_z_s> l) | (l <any_Cx_l_p_z_s>)))) ((([(<any_Vx_l_l_ih_noSlide> l)] | [(l <any_Vx_l_l_ih_noSlide>)]) ([(<any_Cx_l_l_t_s> l)] | [(l <any_Cx_l_l_t_s>)])) (ih | ((<any_Vx_l_l_ih_noSlide> l) | (l <any_Vx_l_l_ih_noSlide>)))) (([(<any_Cx_r_l_t> r)] | [(r <any_Cx_r_l_t>)]) (t | ((<any_Cx_r_l_t> r) | (r <any_Cx_r_l_t>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_r_t_thr> thr)] | [(thr <any_Cx_r_t_thr>)]) sil))

results =
{72 [{sil 0 2} {s 3 13} {ih 14 30} {t 31 52} {sil 53 64}]}
{80 [{sil 0 2} {s 3 14} {iy 15 34} {l 35 37} {t 38 55} {sil 56 69}]}
{91 [{sil 0 2} {s 3 16} {iy 17 36} {l 37 39} {t 40 67} {sil 68 108}]}
{105 [{sil 0 2} {s 3 19} {iy 20 43} {l 44 46} {t 47 80} {sil 81 122}]}
{125 [{sil 3 5} {s 6 24} {iy 25 54} {l 55 57} {t 58 95} {sil 96 147}]}

normalised results =
{72 [{sil 0 2} {s 4 18} {ih 19 42} {t 43 72} {sil 74 89}]}
{80 [{sil 0 2} {s 4 18} {iy 19 43} {l 44 44} {t 48 69} {sil 70 86}]}
{91 [{sil 0 2} {s 3 18} {iy 19 40} {l 41 41} {t 44 74} {sil 75 119}]}
{105 [{sil 0 2} {s 3 18} {iy 19 41} {l 42 42} {t 45 76} {sil 77 116}]}
{125 [{sil 3 5} {s 5 19} {iy 20 43} {l 44 44} {t 46 76} {sil 77 118}]}

ruleAligned = [{{s 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{ih 2} [{0 2}]} {{iy 3} [{1 2} {2 2} {3 2} {4 2}]} {{t 0} [{0 3} {1 4} {2 4} {3 4} {4 4}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {s 4 18} {ih 19 42} {t 43 72} {sil 74 74}]}
{80 [{sil 0 0} {s 4 18} {iy 19 43} {l 44 44} {t 48 69} {sil 70 70}]}
{91 [{sil 0 0} {s 3 18} {iy 19 40} {l 41 41} {t 44 74} {sil 75 75}]}
{105 [{sil 0 0} {s 3 18} {iy 19 41} {l 42 42} {t 45 76} {sil 77 77}]}
{125 [{sil 3 3} {s 5 19} {iy 20 43} {l 44 44} {t 46 76} {sil 77 77}]}

timeAligned = [{{s 4 18} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{iy 19 41} [{1 2} {2 2} {3 2} {4 2}]} {{t 45 74} [{0 3} {2 4} {3 4} {4 4} {1 4}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 -1 18
i, iTime, newITime, timeStartFrom = 2 0 1 18
i, iTime, newITime, timeStartFrom = 3 1 2 40
combinedVerdict    = [{s 0} {ih 2} {iy 3} {t 0}]
ruleAlignedVerdict = [{s 0} {ih 2} {iy 3} {t 0}]

score->
+1 for s
-1 for ih
-1 for iy
+1 for t
score<-: 0
bestResult = {0 [{s 0} {ih 2} {iy 3} {t 0}] [s ih t]}
testPronounce s good ih missing iy surprise t good
publish->
phonsToAlphas = [{[s] s} {[ih] i} {[t] t}]
getVerdict<-:new {s [s] 0}
getVerdict<-:new {i [ih] 2}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{s [s] 0} {i [ih] 2} {iy [iy] 3} {t [t] 0}]
publish<-
Total: 220.980808ms
{
  "results": [
    {
      "letters": "s",
      "phonemes": "s",
      "verdict": "good"
    },
    {
      "letters": "i",
      "phonemes": "ɪ",
      "verdict": "missing"
    },
    {
      "letters": "iy",
      "phonemes": "iː",
      "verdict": "surprise"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
