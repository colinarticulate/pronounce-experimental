
 length of audio =  2.042937



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.9600000000000001 1.08 2.04

 start3, duration3, end3 =  1.0799999999999998 0.52 1.5999999999999999

 Initial start, duration, end =  0.8600000000000001 1.18 2.04

 Cut at: start, duration =  0.8600000000000001 1.1629369999999997     guard_end =  2.0229369999999998 

Running scan for frate = 125
Considering guard s with value 1 for b ...
Considering guard zh with value 1 for b ...
Considering guard sh with value 1 for b ...
Considering guard jh with value 1 for b ...
candidateGuards = map[jh:true s:true sh:true zh:true]
Picking guard, s

Considering guard zh with value 2 for eh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard oy with value 1 for t ...
Considering guard zh with value 1 for t ...
candidateGuards = map[oy:true zh:true]
Picking guard, oy


frate, target rule = 125 public <bet> = (((sil [((sh <any_Cx_b_sh_hh>) | (<any_Cx_b_sh_hh> sh))] [((sh <any_vowel_noSlide>) | (<any_vowel_noSlide> sh))]) | (sil hh (sil [((sh <any_Cx_b_sh_hh>) | (<any_Cx_b_sh_hh> sh))] [((sh <any_vowel_noSlide>) | (<any_vowel_noSlide> sh))]))) (([(<any_Cx_s_hh_sh_b> s)] | [(s <any_Cx_s_hh_sh_b>)]) (b | ((<any_Cx_s_hh_sh_b> s) | (s <any_Cx_s_hh_sh_b>)))) ((([(<any_Vx_zh_s_eh_noSlide> zh)] | [(zh <any_Vx_zh_s_eh_noSlide>)]) ([(<any_Cx_zh_s_t_b> zh)] | [(zh <any_Cx_zh_s_t_b>)])) (eh | ((<any_Vx_zh_s_eh_noSlide> zh) | (zh <any_Vx_zh_s_eh_noSlide>)))) (([(<any_Cx_oy_zh_t> oy)] | [(oy <any_Cx_oy_zh_t>)]) (t | ((<any_Cx_oy_zh_t> oy) | (oy <any_Cx_oy_zh_t>)))) (([(<any_vowel_noSlide> k)] | [(k <any_vowel_noSlide>)]) ([(<any_Cx_oy_t_k> k)] | [(k <any_Cx_oy_t_k>)]) sil))
Running scan for frate = 105
Considering guard sh with value 1 for b ...
Considering guard zh with value 1 for b ...
Considering guard jh with value 1 for b ...
Considering guard s with value 1 for b ...
candidateGuards = map[jh:true s:true sh:true zh:true]
Picking guard, jh

Considering guard zh with value 2 for eh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard oy with value 1 for t ...
Considering guard zh with value 1 for t ...
candidateGuards = map[oy:true zh:true]
Picking guard, oy


frate, target rule = 105 public <bet> = (((sil [((d <any_Cx_b_d_hh>) | (<any_Cx_b_d_hh> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil hh (sil [((d <any_Cx_b_d_hh>) | (<any_Cx_b_d_hh> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_jh_hh_d_b> jh)] | [(jh <any_Cx_jh_hh_d_b>)]) (b | ((<any_Cx_jh_hh_d_b> jh) | (jh <any_Cx_jh_hh_d_b>)))) ((([(<any_Vx_zh_jh_eh_noSlide> zh)] | [(zh <any_Vx_zh_jh_eh_noSlide>)]) ([(<any_Cx_zh_jh_t_b> zh)] | [(zh <any_Cx_zh_jh_t_b>)])) (eh | ((<any_Vx_zh_jh_eh_noSlide> zh) | (zh <any_Vx_zh_jh_eh_noSlide>)))) (([(<any_Cx_oy_zh_t> oy)] | [(oy <any_Cx_oy_zh_t>)]) (t | ((<any_Cx_oy_zh_t> oy) | (oy <any_Cx_oy_zh_t>)))) (([(<any_vowel_noSlide> g)] | [(g <any_vowel_noSlide>)]) ([(<any_Cx_oy_t_g> g)] | [(g <any_Cx_oy_t_g>)]) sil))
Running scan for frate = 91
Considering guard zh with value 1 for b ...
Considering guard s with value 1 for b ...
Considering guard sh with value 1 for b ...
Considering guard jh with value 1 for b ...
candidateGuards = map[jh:true s:true sh:true zh:true]
Picking guard, zh

Considering guard zh with value 2 for eh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard oy with value 1 for t ...
Considering guard zh with value 1 for t ...
candidateGuards = map[oy:true zh:true]
Picking guard, oy


frate, target rule = 91 public <bet> = (((sil [((dh <any_Cx_b_dh_hh>) | (<any_Cx_b_dh_hh> dh))] [((dh <any_vowel_noSlide>) | (<any_vowel_noSlide> dh))]) | (sil hh (sil [((dh <any_Cx_b_dh_hh>) | (<any_Cx_b_dh_hh> dh))] [((dh <any_vowel_noSlide>) | (<any_vowel_noSlide> dh))]))) (([(<any_Cx_zh_hh_dh_b> zh)] | [(zh <any_Cx_zh_hh_dh_b>)]) (b | ((<any_Cx_zh_hh_dh_b> zh) | (zh <any_Cx_zh_hh_dh_b>)))) ((([(<any_Vx_zh_zh_eh_noSlide> zh)] | [(zh <any_Vx_zh_zh_eh_noSlide>)]) ([(<any_Cx_zh_zh_t_b> zh)] | [(zh <any_Cx_zh_zh_t_b>)])) (eh | ((<any_Vx_zh_zh_eh_noSlide> zh) | (zh <any_Vx_zh_zh_eh_noSlide>)))) (([(<any_Cx_oy_zh_t> oy)] | [(oy <any_Cx_oy_zh_t>)]) (t | ((<any_Cx_oy_zh_t> oy) | (oy <any_Cx_oy_zh_t>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_oy_t_thr> thr)] | [(thr <any_Cx_oy_t_thr>)]) sil))
Running scan for frate = 80
Considering guard jh with value 1 for b ...
Considering guard sh with value 1 for b ...
Considering guard s with value 1 for b ...
Considering guard zh with value 1 for b ...
candidateGuards = map[jh:true s:true sh:true zh:true]
Picking guard, jh

Considering guard zh with value 2 for eh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for t ...
Considering guard oy with value 1 for t ...
candidateGuards = map[oy:true zh:true]
Picking guard, zh


frate, target rule = 80 public <bet> = (((sil [((f <any_Cx_b_f_hh>) | (<any_Cx_b_f_hh> f))] [((f <any_vowel_noSlide>) | (<any_vowel_noSlide> f))]) | (sil hh (sil [((f <any_Cx_b_f_hh>) | (<any_Cx_b_f_hh> f))] [((f <any_vowel_noSlide>) | (<any_vowel_noSlide> f))]))) (([(<any_Cx_jh_hh_f_b> jh)] | [(jh <any_Cx_jh_hh_f_b>)]) (b | ((<any_Cx_jh_hh_f_b> jh) | (jh <any_Cx_jh_hh_f_b>)))) ((([(<any_Vx_zh_jh_eh_noSlide> zh)] | [(zh <any_Vx_zh_jh_eh_noSlide>)]) ([(<any_Cx_zh_jh_t_b> zh)] | [(zh <any_Cx_zh_jh_t_b>)])) (eh | ((<any_Vx_zh_jh_eh_noSlide> zh) | (zh <any_Vx_zh_jh_eh_noSlide>)))) (([(<any_Cx_zh_zh_t> zh)] | [(zh <any_Cx_zh_zh_t>)]) (t | ((<any_Cx_zh_zh_t> zh) | (zh <any_Cx_zh_zh_t>)))) (([(<any_vowel_noSlide> ch)] | [(ch <any_vowel_noSlide>)]) ([(<any_Cx_zh_t_ch> ch)] | [(ch <any_Cx_zh_t_ch>)]) sil))
Running scan for frate = 72
Considering guard jh with value 1 for b ...
Considering guard zh with value 1 for b ...
Considering guard s with value 1 for b ...
Considering guard sh with value 1 for b ...
candidateGuards = map[jh:true s:true sh:true zh:true]
Picking guard, sh

Considering guard zh with value 2 for eh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for t ...
Considering guard oy with value 1 for t ...
candidateGuards = map[oy:true zh:true]
Picking guard, oy


frate, target rule = 72 public <bet> = (((sil [((d <any_Cx_b_d_hh>) | (<any_Cx_b_d_hh> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil hh (sil [((d <any_Cx_b_d_hh>) | (<any_Cx_b_d_hh> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_sh_hh_d_b> sh)] | [(sh <any_Cx_sh_hh_d_b>)]) (b | ((<any_Cx_sh_hh_d_b> sh) | (sh <any_Cx_sh_hh_d_b>)))) ((([(<any_Vx_zh_sh_eh_noSlide> zh)] | [(zh <any_Vx_zh_sh_eh_noSlide>)]) ([(<any_Cx_zh_sh_t_b> zh)] | [(zh <any_Cx_zh_sh_t_b>)])) (eh | ((<any_Vx_zh_sh_eh_noSlide> zh) | (zh <any_Vx_zh_sh_eh_noSlide>)))) (([(<any_Cx_oy_zh_t> oy)] | [(oy <any_Cx_oy_zh_t>)]) (t | ((<any_Cx_oy_zh_t> oy) | (oy <any_Cx_oy_zh_t>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_oy_t_p> p)] | [(p <any_Cx_oy_t_p>)]) sil))

results =
{72 [{sil 0 13} {b 14 16} {zh 17 19} {y 20 34} {eh 35 51} {t 52 68} {sil 69 82}]}
{80 [{sil 0 16} {b 17 19} {zh 20 22} {y 23 38} {eh 39 57} {t 58 76} {sil 77 87}]}
{91 [{sil 0 20} {b 21 23} {zh 24 26} {y 27 43} {eh 44 65} {t 66 87} {sil 88 104}]}
{105 [{sil 0 23} {b 24 29} {zh 30 32} {y 33 50} {eh 51 76} {t 77 98} {sil 99 117}]}
{125 [{sil 3 28} {d 29 31} {s 32 36} {zh 37 39} {y 40 60} {eh 61 92} {t 93 117} {sil 118 141}]}

normalised results =
{72 [{sil 0 13} {b 19 19} {zh 24 24} {y 28 47} {eh 49 71} {t 72 94} {sil 96 114}]}
{80 [{sil 0 16} {b 21 21} {zh 25 25} {y 29 48} {eh 49 71} {t 73 95} {sil 96 109}]}
{91 [{sil 0 20} {b 23 23} {zh 26 26} {y 30 47} {eh 48 71} {t 73 96} {sil 97 114}]}
{105 [{sil 0 23} {b 23 28} {zh 29 29} {y 31 48} {eh 49 72} {t 73 93} {sil 94 111}]}
{125 [{sil 3 28} {d 23 23} {s 26 29} {zh 30 30} {y 32 48} {eh 49 74} {t 74 94} {sil 94 113}]}

ruleAligned = [{{b 2} [{3 1}]} {{y 3} [{0 3} {1 3} {2 3} {3 3} {4 4}]} {{eh 0} [{0 4} {1 4} {2 4} {3 4} {4 5}]} {{t 0} [{0 5} {1 5} {2 5} {3 5} {4 6}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {b 19 19} {zh 24 24} {y 28 47} {eh 49 71} {t 72 94} {sil 96 96}]}
{80 [{sil 0 0} {b 21 21} {zh 25 25} {y 29 48} {eh 49 71} {t 73 95} {sil 96 96}]}
{91 [{sil 0 0} {b 23 23} {zh 26 26} {y 30 47} {eh 48 71} {t 73 96} {sil 97 97}]}
{105 [{sil 0 0} {b 23 28} {zh 29 29} {y 31 48} {eh 49 72} {t 73 93} {sil 94 94}]}
{125 [{sil 3 3} {d 23 23} {s 26 26} {zh 30 30} {y 32 48} {eh 49 74} {t 74 94} {sil 94 94}]}

timeAligned = [{{y 30 48} [{0 3} {1 3} {2 3} {3 3} {4 4}]} {{eh 49 71} [{0 4} {1 4} {2 4} {3 4} {4 5}]} {{t 73 94} [{0 5} {1 5} {2 5} {3 5} {4 6}]}]

i, iTime, newITime, timeStartFrom = 0 0 -1 0
i, iTime, newITime, timeStartFrom = 1 0 0 0
i, iTime, newITime, timeStartFrom = 2 0 1 47
i, iTime, newITime, timeStartFrom = 3 1 2 71
combinedVerdict    = [{b 2} {y 3} {eh 0} {t 0}]
ruleAlignedVerdict = [{b 2} {y 3} {eh 0} {t 0}]

score->
-1 for b
-1 for y
+1 for eh
+1 for t
score<-: 0
bestResult = {0 [{b 2} {y 3} {eh 0} {t 0}] [b eh t]}
testPronounce b missing y surprise eh good t good
publish->
phonsToAlphas = [{[b] b} {[eh] e} {[t] t}]
getVerdict<-:new {b [b] 2}
getVerdict<-:new {e [eh] 0}
getVerdict<-:new {t [t] 0}
lettersVerdicts = [{b [b] 2} {y [y] 3} {e [eh] 0} {t [t] 0}]
publish<-
{
  "results": [
    {
      "letters": "b",
      "phonemes": "b",
      "verdict": "missing"
    },
    {
      "letters": "y",
      "phonemes": "j",
      "verdict": "surprise"
    },
    {
      "letters": "e",
      "phonemes": "É›",
      "verdict": "good"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "good"
    }
  ],
  "err": null
}
