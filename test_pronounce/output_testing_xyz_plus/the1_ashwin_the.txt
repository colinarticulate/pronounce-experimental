
 length of audio =  3.562312



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.28 1.2200000000000002 1.5000000000000002

 start3, duration3, end3 =  0.54 0.7 1.24

 Initial start, duration, end =  0.18000000000000002 1.3200000000000003 1.5000000000000002

 Cut at: start, duration =  0.18000000000000002 1.7700000000000002     guard_end =  1.9500000000000002 

Running scan for frate = 125
Considering guard ch with value 3 for dh ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 3 for iy ...
candidateGuards = map[ch:true]
Picking guard, ch


frate, target rule = 125 public <the> = (((sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_ch_p_z_dh> ch)] | [(ch <any_Cx_ch_p_z_dh>)]) (dh | t | ((<any_Cx_ch_p_z_dh> ch) | (ch <any_Cx_ch_p_z_dh>)))) ((([(<any_Vx_ch_ch_iy_noSlide> ch)] | [(ch <any_Vx_ch_ch_iy_noSlide>)]) ([(<any_Cx_ch_ch_dh> ch)] | [(ch <any_Cx_ch_ch_dh>)])) (iy | ((<any_Vx_ch_ch_iy_noSlide> ch) | (ch <any_Vx_ch_ch_iy_noSlide>)))) (([(<any_Cx_ch_iy_f> f)] | [(f <any_Cx_ch_iy_f>)]) ([(<any_Vx_ch_iy_f> f)] | [(f <any_Vx_ch_iy_f>)]) sil))
Running scan for frate = 105
Considering guard ch with value 3 for dh ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 3 for iy ...
candidateGuards = map[ch:true]
Picking guard, ch


frate, target rule = 105 public <the> = (((sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_ch_p_z_dh> ch)] | [(ch <any_Cx_ch_p_z_dh>)]) (dh | t | ((<any_Cx_ch_p_z_dh> ch) | (ch <any_Cx_ch_p_z_dh>)))) ((([(<any_Vx_ch_ch_iy_noSlide> ch)] | [(ch <any_Vx_ch_ch_iy_noSlide>)]) ([(<any_Cx_ch_ch_dh> ch)] | [(ch <any_Cx_ch_ch_dh>)])) (iy | ((<any_Vx_ch_ch_iy_noSlide> ch) | (ch <any_Vx_ch_ch_iy_noSlide>)))) (([(<any_Cx_ch_iy_n> n)] | [(n <any_Cx_ch_iy_n>)]) ([(<any_Vx_ch_iy_n> n)] | [(n <any_Vx_ch_iy_n>)]) sil))
Running scan for frate = 91
Considering guard ch with value 3 for dh ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 3 for iy ...
candidateGuards = map[ch:true]
Picking guard, ch


frate, target rule = 91 public <the> = (((sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_ch_p_z_dh> ch)] | [(ch <any_Cx_ch_p_z_dh>)]) (dh | t | ((<any_Cx_ch_p_z_dh> ch) | (ch <any_Cx_ch_p_z_dh>)))) ((([(<any_Vx_ch_ch_iy_noSlide> ch)] | [(ch <any_Vx_ch_ch_iy_noSlide>)]) ([(<any_Cx_ch_ch_dh> ch)] | [(ch <any_Cx_ch_ch_dh>)])) (iy | ((<any_Vx_ch_ch_iy_noSlide> ch) | (ch <any_Vx_ch_ch_iy_noSlide>)))) (([(<any_Cx_ch_iy_hh> hh)] | [(hh <any_Cx_ch_iy_hh>)]) ([(<any_Vx_ch_iy_hh> hh)] | [(hh <any_Vx_ch_iy_hh>)]) sil))
Running scan for frate = 80
Considering guard ch with value 3 for dh ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 3 for iy ...
candidateGuards = map[ch:true]
Picking guard, ch


frate, target rule = 80 public <the> = (((sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_ch_p_z_dh> ch)] | [(ch <any_Cx_ch_p_z_dh>)]) (dh | t | ((<any_Cx_ch_p_z_dh> ch) | (ch <any_Cx_ch_p_z_dh>)))) ((([(<any_Vx_ch_ch_iy_noSlide> ch)] | [(ch <any_Vx_ch_ch_iy_noSlide>)]) ([(<any_Cx_ch_ch_dh> ch)] | [(ch <any_Cx_ch_ch_dh>)])) (iy | ((<any_Vx_ch_ch_iy_noSlide> ch) | (ch <any_Vx_ch_ch_iy_noSlide>)))) (([(<any_Cx_ch_iy_p> p)] | [(p <any_Cx_ch_iy_p>)]) ([(<any_Vx_ch_iy_p> p)] | [(p <any_Vx_ch_iy_p>)]) sil))
Running scan for frate = 72
Considering guard ch with value 3 for dh ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 3 for iy ...
candidateGuards = map[ch:true]
Picking guard, ch


frate, target rule = 72 public <the> = (((sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_ch_p_z_dh> ch)] | [(ch <any_Cx_ch_p_z_dh>)]) (dh | t | ((<any_Cx_ch_p_z_dh> ch) | (ch <any_Cx_ch_p_z_dh>)))) ((([(<any_Vx_ch_ch_iy_noSlide> ch)] | [(ch <any_Vx_ch_ch_iy_noSlide>)]) ([(<any_Cx_ch_ch_dh> ch)] | [(ch <any_Cx_ch_ch_dh>)])) (iy | ((<any_Vx_ch_ch_iy_noSlide> ch) | (ch <any_Vx_ch_ch_iy_noSlide>)))) (([(<any_Cx_ch_iy_hh> hh)] | [(hh <any_Cx_ch_iy_hh>)]) ([(<any_Vx_ch_iy_hh> hh)] | [(hh <any_Vx_ch_iy_hh>)]) sil))
Running scan for frate = 125
Considering guard zh with value 1 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 125 public <the> = (((sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_zh_p_z_dh> zh)] | [(zh <any_Cx_zh_p_z_dh>)]) (dh | t | ((<any_Cx_zh_p_z_dh_axr> zh) | (zh <any_Cx_zh_p_z_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr> zh) | (zh <any_Cx_zh_zh_axr>)))) (([(<any_vowel_noSlide> m)] | [(m <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_m> m)] | [(m <any_Cx_zh_axr_m>)]) sil))
Running scan for frate = 105
Considering guard zh with value 1 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 105 public <the> = (((sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_zh_p_z_dh> zh)] | [(zh <any_Cx_zh_p_z_dh>)]) (dh | t | ((<any_Cx_zh_p_z_dh_axr> zh) | (zh <any_Cx_zh_p_z_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr> zh) | (zh <any_Cx_zh_zh_axr>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_hh> hh)] | [(hh <any_Cx_zh_axr_hh>)]) sil))
Running scan for frate = 91
Considering guard zh with value 1 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 91 public <the> = (((sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_zh_p_z_dh> zh)] | [(zh <any_Cx_zh_p_z_dh>)]) (dh | t | ((<any_Cx_zh_p_z_dh_axr> zh) | (zh <any_Cx_zh_p_z_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr> zh) | (zh <any_Cx_zh_zh_axr>)))) (([(<any_vowel_noSlide> ng)] | [(ng <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_ng> ng)] | [(ng <any_Cx_zh_axr_ng>)]) sil))
Running scan for frate = 80
Considering guard zh with value 1 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 80 public <the> = (((sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_zh_p_z_dh> zh)] | [(zh <any_Cx_zh_p_z_dh>)]) (dh | t | ((<any_Cx_zh_p_z_dh_axr> zh) | (zh <any_Cx_zh_p_z_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr> zh) | (zh <any_Cx_zh_zh_axr>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_p> p)] | [(p <any_Cx_zh_axr_p>)]) sil))
Running scan for frate = 72
Considering guard zh with value 1 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 72 public <the> = (((sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]) | (sil p (sil [((z <any_Cx_dh_z_p>) | (<any_Cx_dh_z_p> z))] [((z <any_vowel_noSlide>) | (<any_vowel_noSlide> z))]))) (([(<any_Cx_zh_p_z_dh> zh)] | [(zh <any_Cx_zh_p_z_dh>)]) (dh | t | ((<any_Cx_zh_p_z_dh_axr> zh) | (zh <any_Cx_zh_p_z_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr> zh) | (zh <any_Cx_zh_zh_axr>)))) (([(<any_vowel_noSlide> n)] | [(n <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_n> n)] | [(n <any_Cx_zh_axr_n>)]) sil))

results =
{72 [{sil 0 22} {z 23 27} {w 28 41} {t 42 47} {axr 48 69} {sil 70 80}]}
{80 [{sil 0 25} {z 26 30} {w 31 46} {t 47 52} {axr 53 77} {sil 78 86}]}
{91 [{sil 0 28} {t 29 37} {zh 38 40} {d 41 61} {ah 62 87} {ng 88 96} {sil 97 159}]}
{105 [{sil 0 42} {z 43 45} {w 46 63} {t 64 69} {axr 70 101} {sil 102 185}]}
{125 [{sil 3 40} {t 41 50} {axr 51 55} {m 56 78} {ah 79 125} {sil 126 217}]}

normalised results =
{72 [{sil 0 22} {z 32 38} {w 39 57} {t 58 65} {axr 67 96} {sil 97 111}]}
{80 [{sil 0 25} {z 33 38} {w 39 58} {t 59 65} {axr 66 96} {sil 98 108}]}
{91 [{sil 0 28} {t 32 41} {zh 42 42} {d 45 67} {ah 68 96} {ng 97 105} {sil 107 175}]}
{105 [{sil 0 42} {z 41 41} {w 44 60} {t 61 66} {axr 67 96} {sil 97 176}]}
{125 [{sil 3 40} {t 33 40} {axr 41 44} {m 45 62} {ah 63 100} {sil 101 174}]}

ruleAligned = [{{w 3} [{0 2} {1 2} {3 2}]} {{dh 2} []} {{t 3} [{0 3} {1 3} {2 1} {3 3} {4 1}]} {{axr 0} [{0 4} {1 4} {3 4} {4 2}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {z 32 32} {w 39 57} {t 58 65} {axr 67 96} {sil 97 97}]}
{80 [{sil 0 0} {z 33 33} {w 39 58} {t 59 65} {axr 66 96} {sil 98 98}]}
{91 [{sil 0 0} {t 32 41} {zh 42 42} {d 45 67} {ah 68 96} {ng 97 105} {sil 107 107}]}
{105 [{sil 0 0} {z 41 41} {w 44 60} {t 61 66} {axr 67 96} {sil 97 97}]}
{125 [{sil 3 3} {t 33 40} {axr 41 44} {m 45 62} {ah 63 63} {sil 101 101}]}

timeAligned = [{{w 44 57} [{0 2} {1 2} {3 2}]} {{t 61 65} [{0 3} {1 3} {3 3}]} {{axr 67 96} [{0 4} {1 4} {3 4}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 -1 57
i, iTime, newITime, timeStartFrom = 2 0 1 57
i, iTime, newITime, timeStartFrom = 3 1 2 65
combinedVerdict    = [{w 3} {dh 2} {t 3} {axr 0}]
ruleAlignedVerdict = [{w 3} {dh 2} {t 3} {axr 0}]

score->
-1 for w
-1 for dh
-1 for t
+1 for axr
score<-: -2

results =
{72 [{sil 0 22} {ch 23 26} {d 27 48} {eh 49 64} {ch 65 67} {sil 68 80}]}
{80 [{sil 0 32} {ch 33 35} {d 36 54} {eh 55 71} {ch 72 74} {sil 75 86}]}
{91 [{sil 0 28} {t 29 32} {iy 33 35} {hh 36 42} {d 43 60} {er 61 86} {hh 87 89} {sil 90 159}]}
{105 [{sil 0 32} {t 33 43} {iy 44 46} {n 47 64} {d 65 70} {er 71 92} {n 93 98} {sil 99 185}]}
{125 [{sil 3 21} {dh 22 25} {iy 26 29} {f 30 55} {w 56 83} {er 84 112} {f 113 125} {sil 126 217}]}

normalised results =
{72 [{sil 0 22} {ch 32 36} {d 38 67} {eh 68 89} {ch 90 90} {sil 94 111}]}
{80 [{sil 0 32} {ch 41 41} {d 45 68} {eh 69 89} {ch 90 90} {sil 94 108}]}
{91 [{sil 0 28} {t 32 35} {iy 36 36} {hh 40 46} {d 47 66} {er 67 95} {hh 96 96} {sil 99 175}]}
{105 [{sil 0 32} {t 31 41} {iy 42 42} {n 45 61} {d 62 67} {er 68 88} {n 89 93} {sil 94 176}]}
{125 [{sil 3 21} {dh 18 20} {iy 21 23} {f 24 44} {w 45 66} {er 67 90} {f 90 100} {sil 101 174}]}

ruleAligned = [{{dh 2} [{4 1}]} {{iy 2} []} {{er 3} [{2 5} {3 5} {4 5}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {ch 32 32} {d 38 67} {eh 68 89} {ch 90 90} {sil 94 94}]}
{80 [{sil 0 0} {ch 41 41} {d 45 68} {eh 69 89} {ch 90 90} {sil 94 94}]}
{91 [{sil 0 0} {t 32 32} {iy 36 36} {hh 40 40} {d 47 66} {er 67 95} {hh 96 96} {sil 99 99}]}
{105 [{sil 0 0} {t 31 41} {iy 42 42} {n 45 61} {d 62 67} {er 68 88} {n 89 93} {sil 94 94}]}
{125 [{sil 3 3} {dh 18 20} {iy 21 21} {f 24 44} {w 45 66} {er 67 90} {f 90 100} {sil 101 101}]}

timeAligned = [{{d 47 67} [{0 2} {1 2} {2 4} {3 4}]} {{er 68 88} [{2 5} {3 5} {4 5}]}]

i, iTime, newITime, timeStartFrom = 0 0 -1 0
i, iTime, newITime, timeStartFrom = 1 0 -1 0
i, iTime, newITime, timeStartFrom = 2 0 1 0
combinedVerdict    = [{dh 2} {iy 2} {d 3} {er 3}]
ruleAlignedVerdict = [{dh 2} {iy 2} {er 3}]

score->
-1 for dh
-1 for iy
-1 for d
-1 for er
score<-: -4
bestResult = {-2 [{w 3} {dh 2} {t 3} {axr 0}] [dh axr]}
testPronounce w surprise dh missing t surprise axr good
publish->
phonsToAlphas = [{[dh] th} {[axr] e}]
getVerdict<-:new {th [dh] 2}
getVerdict<-:new {e [axr] 0}
lettersVerdicts = [{w [w] 3} {th [dh] 2} {t [t] 3} {e [axr] 0}]
publish<-
{
  "results": [
    {
      "letters": "w",
      "phonemes": "w",
      "verdict": "surprise"
    },
    {
      "letters": "th",
      "phonemes": "ð",
      "verdict": "missing"
    },
    {
      "letters": "t",
      "phonemes": "t",
      "verdict": "surprise"
    },
    {
      "letters": "e",
      "phonemes": "əɹ",
      "verdict": "good"
    }
  ],
  "err": null
}
