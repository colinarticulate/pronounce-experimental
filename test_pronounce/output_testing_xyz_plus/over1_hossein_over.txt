
 length of audio =  1.834313



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.6 0.78 1.38

 start3, duration3, end3 =  0.6 0.6799999999999999 1.2799999999999998

 Initial start, duration, end =  0.5 0.8799999999999999 1.38

 Cut at: start, duration =  0.5 1.3299999999999998     guard_end =  1.8299999999999998 

Running scan for frate = 125
Considering guard ch with value 1.2000000000000002 for ow ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 2.4000000000000004 for v ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 125 public <over> = (((sil [((hh <any_Vx_ow_hh_p_noSlide>) | (<any_Vx_ow_hh_p_noSlide> hh))] [((hh <any_Cx_ow_hh_p>) | (<any_Cx_ow_hh_p> hh))]) | (sil p (sil [((hh <any_Vx_ow_hh_p_noSlide>) | (<any_Vx_ow_hh_p_noSlide> hh))] [((hh <any_Cx_ow_hh_p>) | (<any_Cx_ow_hh_p> hh))]))) ((([(<any_Vx_ch_p_hh_ow_noSlide> ch)] | [(ch <any_Vx_ch_p_hh_ow_noSlide>)]) ([(<any_Cx_ch_p_hh_v> ch)] | [(ch <any_Cx_ch_p_hh_v>)])) (ow | ((<any_Vx_ch_p_hh_ow_noSlide> ch) | (ch <any_Vx_ch_p_hh_ow_noSlide>)))) (([(<any_Cx_ch_ch_v> ch)] | [(ch <any_Cx_ch_ch_v>)]) (v | ((<any_Cx_ch_ch_v_axr> ch) | (ch <any_Cx_ch_ch_v_axr>)))) (([(<any_Cx_zh_ch_axr_v> zh)] | [(zh <any_Cx_zh_ch_axr_v>)]) (axr | ((<any_Cx_zh_ch_axr_v> zh) | (zh <any_Cx_zh_ch_axr_v>)))) (([(<any_vowel_noSlide> p)] | [(p <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_p> p)] | [(p <any_Cx_zh_axr_p>)]) sil))
Running scan for frate = 105
Considering guard ch with value 1.2000000000000002 for ow ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 2.4000000000000004 for v ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 105 public <over> = (((sil [((hh <any_Vx_ow_hh_p_noSlide>) | (<any_Vx_ow_hh_p_noSlide> hh))] [((hh <any_Cx_ow_hh_p>) | (<any_Cx_ow_hh_p> hh))]) | (sil p (sil [((hh <any_Vx_ow_hh_p_noSlide>) | (<any_Vx_ow_hh_p_noSlide> hh))] [((hh <any_Cx_ow_hh_p>) | (<any_Cx_ow_hh_p> hh))]))) ((([(<any_Vx_ch_p_hh_ow_noSlide> ch)] | [(ch <any_Vx_ch_p_hh_ow_noSlide>)]) ([(<any_Cx_ch_p_hh_v> ch)] | [(ch <any_Cx_ch_p_hh_v>)])) (ow | ((<any_Vx_ch_p_hh_ow_noSlide> ch) | (ch <any_Vx_ch_p_hh_ow_noSlide>)))) (([(<any_Cx_ch_ch_v> ch)] | [(ch <any_Cx_ch_ch_v>)]) (v | ((<any_Cx_ch_ch_v_axr> ch) | (ch <any_Cx_ch_ch_v_axr>)))) (([(<any_Cx_zh_ch_axr_v> zh)] | [(zh <any_Cx_zh_ch_axr_v>)]) (axr | ((<any_Cx_zh_ch_axr_v> zh) | (zh <any_Cx_zh_ch_axr_v>)))) (([(<any_vowel_noSlide> n)] | [(n <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_n> n)] | [(n <any_Cx_zh_axr_n>)]) sil))
Running scan for frate = 91
Considering guard ch with value 1.2000000000000002 for ow ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 2.4000000000000004 for v ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 91 public <over> = (((sil [((l <any_Vx_ow_l_p_noSlide>) | (<any_Vx_ow_l_p_noSlide> l))] [((l <any_Cx_ow_l_p>) | (<any_Cx_ow_l_p> l))]) | (sil p (sil [((l <any_Vx_ow_l_p_noSlide>) | (<any_Vx_ow_l_p_noSlide> l))] [((l <any_Cx_ow_l_p>) | (<any_Cx_ow_l_p> l))]))) ((([(<any_Vx_ch_p_l_ow_noSlide> ch)] | [(ch <any_Vx_ch_p_l_ow_noSlide>)]) ([(<any_Cx_ch_p_l_v> ch)] | [(ch <any_Cx_ch_p_l_v>)])) (ow | ((<any_Vx_ch_p_l_ow_noSlide> ch) | (ch <any_Vx_ch_p_l_ow_noSlide>)))) (([(<any_Cx_ch_ch_v> ch)] | [(ch <any_Cx_ch_ch_v>)]) (v | ((<any_Cx_ch_ch_v_axr> ch) | (ch <any_Cx_ch_ch_v_axr>)))) (([(<any_Cx_zh_ch_axr_v> zh)] | [(zh <any_Cx_zh_ch_axr_v>)]) (axr | ((<any_Cx_zh_ch_axr_v> zh) | (zh <any_Cx_zh_ch_axr_v>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_hh> hh)] | [(hh <any_Cx_zh_axr_hh>)]) sil))
Running scan for frate = 80
Considering guard ch with value 1.2000000000000002 for ow ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 2.4000000000000004 for v ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 80 public <over> = (((sil [((b <any_Vx_ow_b_p_noSlide>) | (<any_Vx_ow_b_p_noSlide> b))] [((b <any_Cx_ow_b_p>) | (<any_Cx_ow_b_p> b))]) | (sil p (sil [((b <any_Vx_ow_b_p_noSlide>) | (<any_Vx_ow_b_p_noSlide> b))] [((b <any_Cx_ow_b_p>) | (<any_Cx_ow_b_p> b))]))) ((([(<any_Vx_ch_p_b_ow_noSlide> ch)] | [(ch <any_Vx_ch_p_b_ow_noSlide>)]) ([(<any_Cx_ch_p_b_v> ch)] | [(ch <any_Cx_ch_p_b_v>)])) (ow | ((<any_Vx_ch_p_b_ow_noSlide> ch) | (ch <any_Vx_ch_p_b_ow_noSlide>)))) (([(<any_Cx_ch_ch_v> ch)] | [(ch <any_Cx_ch_ch_v>)]) (v | ((<any_Cx_ch_ch_v_axr> ch) | (ch <any_Cx_ch_ch_v_axr>)))) (([(<any_Cx_zh_ch_axr_v> zh)] | [(zh <any_Cx_zh_ch_axr_v>)]) (axr | ((<any_Cx_zh_ch_axr_v> zh) | (zh <any_Cx_zh_ch_axr_v>)))) (([(<any_vowel_noSlide> ng)] | [(ng <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_ng> ng)] | [(ng <any_Cx_zh_axr_ng>)]) sil))
Running scan for frate = 72
Considering guard ch with value 1.2000000000000002 for ow ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard ch with value 2.4000000000000004 for v ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh

frate, target rule = 72 public <over> = (((sil [((b <any_Vx_ow_b_p_noSlide>) | (<any_Vx_ow_b_p_noSlide> b))] [((b <any_Cx_ow_b_p>) | (<any_Cx_ow_b_p> b))]) | (sil p (sil [((b <any_Vx_ow_b_p_noSlide>) | (<any_Vx_ow_b_p_noSlide> b))] [((b <any_Cx_ow_b_p>) | (<any_Cx_ow_b_p> b))]))) ((([(<any_Vx_ch_p_b_ow_noSlide> ch)] | [(ch <any_Vx_ch_p_b_ow_noSlide>)]) ([(<any_Cx_ch_p_b_v> ch)] | [(ch <any_Cx_ch_p_b_v>)])) (ow | ((<any_Vx_ch_p_b_ow_noSlide> ch) | (ch <any_Vx_ch_p_b_ow_noSlide>)))) (([(<any_Cx_ch_ch_v> ch)] | [(ch <any_Cx_ch_ch_v>)]) (v | ((<any_Cx_ch_ch_v_axr> ch) | (ch <any_Cx_ch_ch_v_axr>)))) (([(<any_Cx_zh_ch_axr_v> zh)] | [(zh <any_Cx_zh_ch_axr_v>)]) (axr | ((<any_Cx_zh_ch_axr_v> zh) | (zh <any_Cx_zh_ch_axr_v>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_hh> hh)] | [(hh <any_Cx_zh_axr_hh>)]) sil))

results =
{72 [{sil 0 12} {oh 13 28} {b 29 34} {ow 35 42} {v 43 54} {axr 55 81} {sil 82 94}]}
{80 [{sil 0 14} {oh 15 31} {b 32 38} {ow 39 47} {v 48 61} {axr 62 90} {sil 91 101}]}
{91 [{sil 0 12} {b 13 19} {l 20 45} {ow 46 56} {v 57 70} {axr 71 91} {sil 92 115}]}
{105 [{sil 0 18} {hh 19 22} {l 23 52} {ow 53 66} {v 67 81} {axr 82 105} {sil 106 138}]}
{125 [{sil 3 24} {hh 25 27} {l 28 62} {ow 63 79} {v 80 99} {axr 100 124} {sil 125 162}]}

normalised results =
{72 [{sil 0 12} {oh 18 39} {b 40 47} {ow 49 58} {v 60 75} {axr 76 113} {sil 114 131}]}
{80 [{sil 0 14} {oh 19 39} {b 40 48} {ow 49 59} {v 60 76} {axr 78 113} {sil 114 126}]}
{91 [{sil 0 12} {b 14 21} {l 22 49} {ow 51 62} {v 63 77} {axr 78 100} {sil 101 126}]}
{105 [{sil 0 18} {hh 18 21} {l 22 50} {ow 50 63} {v 64 77} {axr 78 100} {sil 101 131}]}
{125 [{sil 3 24} {hh 20 20} {l 22 50} {ow 50 63} {v 64 79} {axr 80 99} {sil 100 130}]}

ruleAligned = [{{l 3} [{2 2} {3 2} {4 2}]} {{ow 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]} {{v 0} [{0 4} {1 4} {2 4} {3 4} {4 4}]} {{axr 0} [{0 5} {1 5} {2 5} {3 5} {4 5}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {oh 18 39} {b 40 40} {ow 49 58} {v 60 75} {axr 76 113} {sil 114 114}]}
{80 [{sil 0 0} {oh 19 39} {b 40 48} {ow 49 59} {v 60 76} {axr 78 113} {sil 114 114}]}
{91 [{sil 0 0} {b 14 14} {l 22 49} {ow 51 62} {v 63 77} {axr 78 100} {sil 101 101}]}
{105 [{sil 0 0} {hh 18 18} {l 22 50} {ow 50 63} {v 64 77} {axr 78 100} {sil 101 101}]}
{125 [{sil 3 3} {hh 20 20} {l 22 50} {ow 50 63} {v 64 79} {axr 80 99} {sil 100 100}]}

timeAligned = [{{l 22 49} [{2 2} {3 2} {4 2}]} {{ow 50 62} [{0 3} {1 3} {3 3} {4 3} {2 3}]} {{v 63 77} [{0 4} {1 4} {2 4} {3 4} {4 4}]} {{axr 78 100} [{0 5} {1 5} {2 5} {3 5} {4 5}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 49
i, iTime, newITime, timeStartFrom = 2 1 2 58
i, iTime, newITime, timeStartFrom = 3 2 3 75
combinedVerdict    = [{l 3} {ow 0} {v 0} {axr 0}]
ruleAlignedVerdict = [{l 3} {ow 0} {v 0} {axr 0}]

score->
-1 for l
+1 for ow
+1 for v
+1 for axr
score<-: 2
testPronounce l surprise ow good v good axr good
publish->
phonsToAlphas = [{[ow] o} {[v] v} {[axr] er}]
getVerdict<-:new {o [ow] 0}
getVerdict<-:new {v [v] 0}
getVerdict<-:new {er [axr] 0}
lettersVerdicts = [{l [l] 3} {o [ow] 0} {v [v] 0} {er [axr] 0}]
publish<-
Total: 201.719027ms
{
  "results": [
    {
      "letters": "l",
      "phonemes": "l",
      "verdict": "surprise"
    },
    {
      "letters": "o",
      "phonemes": "oʊ",
      "verdict": "good"
    },
    {
      "letters": "v",
      "phonemes": "v",
      "verdict": "good"
    },
    {
      "letters": "er",
      "phonemes": "əɹ",
      "verdict": "good"
    }
  ],
  "err": null
}
