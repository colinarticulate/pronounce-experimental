
 length of audio =  1.301



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.44000000000000006 0.84 1.28

 start3, duration3, end3 =  0.44000000000000006 0.5 0.9400000000000001

 Initial start, duration, end =  0.3400000000000001 0.94 1.28

 Cut at: start, duration =  0.3400000000000001 0.9409999999999998     guard_end =  1.281 

Running scan for frate = 125
Considering guard sh with value 0.8 for er ...
Considering guard zh with value 0.8 for er ...
candidateGuards = map[sh:true zh:true]
Picking guard, sh

Considering guard zh with value 0.8 for n ...
Considering guard sh with value 0.8 for n ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh

frate, target rule = 125 public <earn> = (((sil [((l <any_Vx_er_l_p_noSlide>) | (<any_Vx_er_l_p_noSlide> l))] [((l <any_Cx_er_l_p>) | (<any_Cx_er_l_p> l))]) | (sil p (sil [((l <any_Vx_er_l_p_noSlide>) | (<any_Vx_er_l_p_noSlide> l))] [((l <any_Cx_er_l_p>) | (<any_Cx_er_l_p> l))]))) ((([(<any_Vx_sh_p_l_er_noSlide> sh)] | [(sh <any_Vx_sh_p_l_er_noSlide>)]) ([(<any_Cx_sh_p_l_n> sh)] | [(sh <any_Cx_sh_p_l_n>)])) (er | ((<any_Vx_sh_p_l_er_noSlide> sh) | (sh <any_Vx_sh_p_l_er_noSlide>)))) (([(<any_Cx_zh_sh_n> zh)] | [(zh <any_Cx_zh_sh_n>)]) (n | ((<any_Cx_zh_sh_n> zh) | (zh <any_Cx_zh_sh_n>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_n_thr> thr)] | [(thr <any_Cx_zh_n_thr>)]) sil))
Running scan for frate = 105
Considering guard sh with value 0.8 for er ...
Considering guard zh with value 0.8 for er ...
candidateGuards = map[sh:true zh:true]
Picking guard, sh

Considering guard sh with value 0.8 for n ...
Considering guard zh with value 0.8 for n ...
candidateGuards = map[sh:true zh:true]
Picking guard, sh

frate, target rule = 105 public <earn> = (((sil [((r <any_Vx_er_r_p_noSlide>) | (<any_Vx_er_r_p_noSlide> r))] [((r <any_Cx_er_r_p>) | (<any_Cx_er_r_p> r))]) | (sil p (sil [((r <any_Vx_er_r_p_noSlide>) | (<any_Vx_er_r_p_noSlide> r))] [((r <any_Cx_er_r_p>) | (<any_Cx_er_r_p> r))]))) ((([(<any_Vx_sh_p_r_er_noSlide> sh)] | [(sh <any_Vx_sh_p_r_er_noSlide>)]) ([(<any_Cx_sh_p_r_n> sh)] | [(sh <any_Cx_sh_p_r_n>)])) (er | ((<any_Vx_sh_p_r_er_noSlide> sh) | (sh <any_Vx_sh_p_r_er_noSlide>)))) (([(<any_Cx_sh_sh_n> sh)] | [(sh <any_Cx_sh_sh_n>)]) (n | ((<any_Cx_sh_sh_n> sh) | (sh <any_Cx_sh_sh_n>)))) (([(<any_vowel_noSlide> z)] | [(z <any_vowel_noSlide>)]) ([(<any_Cx_sh_n_z> z)] | [(z <any_Cx_sh_n_z>)]) sil))
Running scan for frate = 91
Considering guard zh with value 0.8 for er ...
Considering guard sh with value 0.8 for er ...
candidateGuards = map[sh:true zh:true]
Picking guard, sh

Considering guard zh with value 0.8 for n ...
Considering guard sh with value 0.8 for n ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh

frate, target rule = 91 public <earn> = (((sil [((hh <any_Vx_er_hh_p_noSlide>) | (<any_Vx_er_hh_p_noSlide> hh))] [((hh <any_Cx_er_hh_p>) | (<any_Cx_er_hh_p> hh))]) | (sil p (sil [((hh <any_Vx_er_hh_p_noSlide>) | (<any_Vx_er_hh_p_noSlide> hh))] [((hh <any_Cx_er_hh_p>) | (<any_Cx_er_hh_p> hh))]))) ((([(<any_Vx_sh_p_hh_er_noSlide> sh)] | [(sh <any_Vx_sh_p_hh_er_noSlide>)]) ([(<any_Cx_sh_p_hh_n> sh)] | [(sh <any_Cx_sh_p_hh_n>)])) (er | ((<any_Vx_sh_p_hh_er_noSlide> sh) | (sh <any_Vx_sh_p_hh_er_noSlide>)))) (([(<any_Cx_zh_sh_n> zh)] | [(zh <any_Cx_zh_sh_n>)]) (n | ((<any_Cx_zh_sh_n> zh) | (zh <any_Cx_zh_sh_n>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_n_thr> thr)] | [(thr <any_Cx_zh_n_thr>)]) sil))
Running scan for frate = 80
Considering guard sh with value 0.8 for er ...
Considering guard zh with value 0.8 for er ...
candidateGuards = map[sh:true zh:true]
Picking guard, sh

Considering guard sh with value 0.8 for n ...
Considering guard zh with value 0.8 for n ...
candidateGuards = map[sh:true zh:true]
Picking guard, sh

frate, target rule = 80 public <earn> = (((sil [((b <any_Vx_er_b_p_noSlide>) | (<any_Vx_er_b_p_noSlide> b))] [((b <any_Cx_er_b_p>) | (<any_Cx_er_b_p> b))]) | (sil p (sil [((b <any_Vx_er_b_p_noSlide>) | (<any_Vx_er_b_p_noSlide> b))] [((b <any_Cx_er_b_p>) | (<any_Cx_er_b_p> b))]))) ((([(<any_Vx_sh_p_b_er_noSlide> sh)] | [(sh <any_Vx_sh_p_b_er_noSlide>)]) ([(<any_Cx_sh_p_b_n> sh)] | [(sh <any_Cx_sh_p_b_n>)])) (er | ((<any_Vx_sh_p_b_er_noSlide> sh) | (sh <any_Vx_sh_p_b_er_noSlide>)))) (([(<any_Cx_sh_sh_n> sh)] | [(sh <any_Cx_sh_sh_n>)]) (n | ((<any_Cx_sh_sh_n> sh) | (sh <any_Cx_sh_sh_n>)))) (([(<any_vowel_noSlide> d)] | [(d <any_vowel_noSlide>)]) ([(<any_Cx_sh_n_d> d)] | [(d <any_Cx_sh_n_d>)]) sil))
Running scan for frate = 72
Considering guard sh with value 0.8 for er ...
Considering guard zh with value 0.8 for er ...
candidateGuards = map[sh:true zh:true]
Picking guard, sh

Considering guard zh with value 0.8 for n ...
Considering guard sh with value 0.8 for n ...
candidateGuards = map[sh:true zh:true]
Picking guard, zh

frate, target rule = 72 public <earn> = (((sil [((l <any_Vx_er_l_p_noSlide>) | (<any_Vx_er_l_p_noSlide> l))] [((l <any_Cx_er_l_p>) | (<any_Cx_er_l_p> l))]) | (sil p (sil [((l <any_Vx_er_l_p_noSlide>) | (<any_Vx_er_l_p_noSlide> l))] [((l <any_Cx_er_l_p>) | (<any_Cx_er_l_p> l))]))) ((([(<any_Vx_sh_p_l_er_noSlide> sh)] | [(sh <any_Vx_sh_p_l_er_noSlide>)]) ([(<any_Cx_sh_p_l_n> sh)] | [(sh <any_Cx_sh_p_l_n>)])) (er | ((<any_Vx_sh_p_l_er_noSlide> sh) | (sh <any_Vx_sh_p_l_er_noSlide>)))) (([(<any_Cx_zh_sh_n> zh)] | [(zh <any_Cx_zh_sh_n>)]) (n | ((<any_Cx_zh_sh_n> zh) | (zh <any_Cx_zh_sh_n>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_n_thr> thr)] | [(thr <any_Cx_zh_n_thr>)]) sil))

results =
{72 [{sil 0 13} {er 14 36} {n 37 57} {sil 58 66}]}
{80 [{sil 0 6} {z 7 10} {b 11 16} {er 17 40} {n 41 56} {sil 57 74}]}
{91 [{sil 0 17} {er 18 45} {n 46 67} {sil 68 80}]}
{105 [{sil 0 20} {er 21 52} {n 53 78} {sil 79 97}]}
{125 [{sil 3 25} {er 26 63} {n 64 91} {sil 92 113}]}

normalised results =
{72 [{sil 0 13} {er 19 50} {n 51 79} {sil 81 92}]}
{80 [{sil 0 6} {z 9 13} {b 14 20} {er 21 50} {n 51 70} {sil 71 93}]}
{91 [{sil 0 17} {er 20 49} {n 51 74} {sil 75 88}]}
{105 [{sil 0 20} {er 20 50} {n 50 74} {sil 75 92}]}
{125 [{sil 3 25} {er 21 50} {n 51 73} {sil 74 90}]}

ruleAligned = [{{er 0} [{0 1} {1 3} {2 1} {3 1} {4 1}]} {{n 0} [{0 2} {1 4} {2 2} {3 2} {4 2}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {er 19 50} {n 51 79} {sil 81 81}]}
{80 [{sil 0 0} {z 9 13} {b 14 20} {er 21 50} {n 51 70} {sil 71 71}]}
{91 [{sil 0 0} {er 20 49} {n 51 74} {sil 75 75}]}
{105 [{sil 0 0} {er 20 50} {n 50 74} {sil 75 75}]}
{125 [{sil 3 3} {er 21 50} {n 51 73} {sil 74 74}]}

timeAligned = [{{er 20 50} [{0 1} {2 1} {3 1} {1 3} {4 1}]} {{n 51 74} [{0 2} {1 4} {2 2} {3 2} {4 2}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 49
combinedVerdict    = [{er 0} {n 0}]
ruleAlignedVerdict = [{er 0} {n 0}]

score->
+1 for er
+1 for n
score<-: 7
testPronounce er good n good
publish->
phonsToAlphas = [{[er] ear} {[n] n}]
getVerdict<-:new {ear [er] 0}
getVerdict<-:new {n [n] 0}
lettersVerdicts = [{ear [er] 0} {n [n] 0}]
publish<-
Total: 269.537803ms
{
  "results": [
    {
      "letters": "ear",
      "phonemes": "ɜɹ",
      "verdict": "good"
    },
    {
      "letters": "n",
      "phonemes": "n",
      "verdict": "good"
    }
  ],
  "err": null
}
