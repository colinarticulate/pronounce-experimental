
 length of audio =  1.902625



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.52 0.86 1.38

 start3, duration3, end3 =  0.52 0.66 1.1800000000000002

 Initial start, duration, end =  0.42000000000000004 0.9599999999999999 1.38

 Cut at: start, duration =  0.42000000000000004 1.41     guard_end =  1.83 

Running scan for frate = 125
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 125 public <other> = (((sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]) | (sil p (sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]))) ((([(<any_Vx_zh_p_b_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_b_ah_noSlide>)]) ([(<any_Cx_zh_p_b_dh> zh)] | [(zh <any_Cx_zh_p_b_dh>)])) (ah | ((<any_Vx_zh_p_b_ah_noSlide> zh) | (zh <any_Vx_zh_p_b_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_thr> thr)] | [(thr <any_Cx_zh_axr_thr>)]) sil))
Running scan for frate = 105
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 105 public <other> = (((sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]) | (sil p (sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]))) ((([(<any_Vx_zh_p_b_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_b_ah_noSlide>)]) ([(<any_Cx_zh_p_b_dh> zh)] | [(zh <any_Cx_zh_p_b_dh>)])) (ah | ((<any_Vx_zh_p_b_ah_noSlide> zh) | (zh <any_Vx_zh_p_b_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_thr> thr)] | [(thr <any_Cx_zh_axr_thr>)]) sil))
Running scan for frate = 91
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 91 public <other> = (((sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]) | (sil p (sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]))) ((([(<any_Vx_zh_p_b_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_b_ah_noSlide>)]) ([(<any_Cx_zh_p_b_dh> zh)] | [(zh <any_Cx_zh_p_b_dh>)])) (ah | ((<any_Vx_zh_p_b_ah_noSlide> zh) | (zh <any_Vx_zh_p_b_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_hh> hh)] | [(hh <any_Cx_zh_axr_hh>)]) sil))
Running scan for frate = 80
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 80 public <other> = (((sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]) | (sil p (sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]))) ((([(<any_Vx_zh_p_l_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_l_ah_noSlide>)]) ([(<any_Cx_zh_p_l_dh> zh)] | [(zh <any_Cx_zh_p_l_dh>)])) (ah | ((<any_Vx_zh_p_l_ah_noSlide> zh) | (zh <any_Vx_zh_p_l_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> n)] | [(n <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_n> n)] | [(n <any_Cx_zh_axr_n>)]) sil))
Running scan for frate = 72
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 72 public <other> = (((sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]) | (sil p (sil [((b <any_Vx_ah_b_p_noSlide>) | (<any_Vx_ah_b_p_noSlide> b))] [((b <any_Cx_ah_b_p>) | (<any_Cx_ah_b_p> b))]))) ((([(<any_Vx_zh_p_b_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_b_ah_noSlide>)]) ([(<any_Cx_zh_p_b_dh> zh)] | [(zh <any_Cx_zh_p_b_dh>)])) (ah | ((<any_Vx_zh_p_b_ah_noSlide> zh) | (zh <any_Vx_zh_p_b_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> f)] | [(f <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_f> f)] | [(f <any_Cx_zh_axr_f>)]) sil))

results =
{72 [{sil 0 9} {ah 10 23} {dh 24 35} {axr 36 52} {sil 53 60}]}
{80 [{sil 0 11} {ah 12 26} {dh 27 38} {axr 39 58} {sil 59 65}]}
{91 [{sil 0 14} {ah 15 35} {dh 36 45} {axr 46 86} {sil 87 123}]}
{105 [{sil 0 16} {ah 17 40} {dh 41 52} {axr 53 99} {sil 100 143}]}
{125 [{sil 3 22} {ah 23 50} {dh 51 62} {axr 63 119} {sil 120 176}]}

normalised results =
{72 [{sil 0 9} {ah 14 32} {dh 33 49} {axr 50 72} {sil 74 83}]}
{80 [{sil 0 11} {ah 15 33} {dh 34 48} {axr 49 73} {sil 74 81}]}
{91 [{sil 0 14} {ah 16 38} {dh 40 49} {axr 51 95} {sil 96 135}]}
{105 [{sil 0 16} {ah 16 38} {dh 39 50} {axr 50 94} {sil 95 136}]}
{125 [{sil 3 22} {ah 18 40} {dh 41 50} {axr 50 95} {sil 96 141}]}

ruleAligned = [{{ah 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{dh 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{axr 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {ah 14 32} {dh 33 49} {axr 50 72} {sil 74 74}]}
{80 [{sil 0 0} {ah 15 33} {dh 34 48} {axr 49 73} {sil 74 74}]}
{91 [{sil 0 0} {ah 16 38} {dh 40 49} {axr 51 95} {sil 96 96}]}
{105 [{sil 0 0} {ah 16 38} {dh 39 50} {axr 50 94} {sil 95 95}]}
{125 [{sil 3 3} {ah 18 40} {dh 41 50} {axr 50 95} {sil 96 96}]}

timeAligned = [{{ah 16 38} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{dh 39 49} [{0 2} {1 2} {3 2} {2 2} {4 2}]} {{axr 50 94} [{0 3} {1 3} {3 3} {4 3} {2 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 32
i, iTime, newITime, timeStartFrom = 2 1 2 48
combinedVerdict    = [{ah 0} {dh 0} {axr 0}]
ruleAlignedVerdict = [{ah 0} {dh 0} {axr 0}]

score->
+1 for ah
+1 for dh
+1 for axr
score<-: 8
testPronounce ah good dh good axr good
publish->
phonsToAlphas = [{[ah] o} {[dh] th} {[axr] er}]
getVerdict<-:new {o [ah] 0}
getVerdict<-:new {th [dh] 0}
getVerdict<-:new {er [axr] 0}
lettersVerdicts = [{o [ah] 0} {th [dh] 0} {er [axr] 0}]
publish<-
{
  "results": [
    {
      "letters": "o",
      "phonemes": "ʌ",
      "verdict": "good"
    },
    {
      "letters": "th",
      "phonemes": "ð",
      "verdict": "good"
    },
    {
      "letters": "er",
      "phonemes": "əɹ",
      "verdict": "good"
    }
  ],
  "err": null
}
