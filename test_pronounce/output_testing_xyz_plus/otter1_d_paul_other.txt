
 length of audio =  2.413438



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.76 0.74 1.5

 start3, duration3, end3 =  0.78 0.33999999999999997 1.12

 Initial start, duration, end =  0.66 0.84 1.5

 Cut at: start, duration =  0.66 1.29     guard_end =  1.9500000000000002 

Running scan for frate = 125
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 125 public <other> = (((sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]) | (sil p (sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]))) ((([(<any_Vx_zh_p_l_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_l_ah_noSlide>)]) ([(<any_Cx_zh_p_l_dh> zh)] | [(zh <any_Cx_zh_p_l_dh>)])) (ah | ((<any_Vx_zh_p_l_ah_noSlide> zh) | (zh <any_Vx_zh_p_l_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> n)] | [(n <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_n> n)] | [(n <any_Cx_zh_axr_n>)]) sil))
Running scan for frate = 105
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 105 public <other> = (((sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]) | (sil p (sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]))) ((([(<any_Vx_zh_p_l_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_l_ah_noSlide>)]) ([(<any_Cx_zh_p_l_dh> zh)] | [(zh <any_Cx_zh_p_l_dh>)])) (ah | ((<any_Vx_zh_p_l_ah_noSlide> zh) | (zh <any_Vx_zh_p_l_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_thr> thr)] | [(thr <any_Cx_zh_axr_thr>)]) sil))
Running scan for frate = 91
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 91 public <other> = (((sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]) | (sil p (sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]))) ((([(<any_Vx_zh_p_l_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_l_ah_noSlide>)]) ([(<any_Cx_zh_p_l_dh> zh)] | [(zh <any_Cx_zh_p_l_dh>)])) (ah | ((<any_Vx_zh_p_l_ah_noSlide> zh) | (zh <any_Vx_zh_p_l_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> hh)] | [(hh <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_hh> hh)] | [(hh <any_Cx_zh_axr_hh>)]) sil))
Running scan for frate = 80
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 80 public <other> = (((sil [((r <any_Vx_ah_r_p_noSlide>) | (<any_Vx_ah_r_p_noSlide> r))] [((r <any_Cx_ah_r_p>) | (<any_Cx_ah_r_p> r))]) | (sil p (sil [((r <any_Vx_ah_r_p_noSlide>) | (<any_Vx_ah_r_p_noSlide> r))] [((r <any_Cx_ah_r_p>) | (<any_Cx_ah_r_p> r))]))) ((([(<any_Vx_zh_p_r_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_r_ah_noSlide>)]) ([(<any_Cx_zh_p_r_dh> zh)] | [(zh <any_Cx_zh_p_r_dh>)])) (ah | ((<any_Vx_zh_p_r_ah_noSlide> zh) | (zh <any_Vx_zh_p_r_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_thr> thr)] | [(thr <any_Cx_zh_axr_thr>)]) sil))
Running scan for frate = 72
Considering guard zh with value 1 for ah ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 2 for dh ...
candidateGuards = map[zh:true]
Picking guard, zh

Considering guard zh with value 1 for axr ...
candidateGuards = map[zh:true]
Picking guard, zh


frate, target rule = 72 public <other> = (((sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]) | (sil p (sil [((l <any_Vx_ah_l_p_noSlide>) | (<any_Vx_ah_l_p_noSlide> l))] [((l <any_Cx_ah_l_p>) | (<any_Cx_ah_l_p> l))]))) ((([(<any_Vx_zh_p_l_ah_noSlide> zh)] | [(zh <any_Vx_zh_p_l_ah_noSlide>)]) ([(<any_Cx_zh_p_l_dh> zh)] | [(zh <any_Cx_zh_p_l_dh>)])) (ah | ((<any_Vx_zh_p_l_ah_noSlide> zh) | (zh <any_Vx_zh_p_l_ah_noSlide>)))) (([(<any_Cx_zh_zh_dh> zh)] | [(zh <any_Cx_zh_zh_dh>)]) (dh | ((<any_Cx_zh_zh_dh_axr> zh) | (zh <any_Cx_zh_zh_dh_axr>)))) (([(<any_Cx_zh_zh_axr_dh> zh)] | [(zh <any_Cx_zh_zh_axr_dh>)]) (axr | ((<any_Cx_zh_zh_axr_dh> zh) | (zh <any_Cx_zh_zh_axr_dh>)))) (([(<any_vowel_noSlide> f)] | [(f <any_vowel_noSlide>)]) ([(<any_Cx_zh_axr_f> f)] | [(f <any_Cx_zh_axr_f>)]) sil))

results =
{72 [{sil 0 13} {oh 14 29} {zh 30 34} {dh 35 37} {axr 38 58} {sil 59 66}]}
{80 [{sil 0 15} {oh 16 32} {zh 33 38} {dh 39 41} {axr 42 64} {sil 65 71}]}
{91 [{sil 0 17} {oh 18 38} {zh 39 43} {dh 44 47} {axr 48 104} {sil 105 116}]}
{105 [{sil 0 20} {oh 21 42} {zh 43 45} {zh 46 48} {z 49 53} {axr 54 122} {sil 123 130}]}
{125 [{sil 3 25} {oh 26 52} {zh 53 55} {zh 56 58} {d 59 64} {axr 65 106} {sil 107 161}]}

normalised results =
{72 [{sil 0 13} {oh 19 40} {zh 42 47} {dh 49 49} {axr 53 81} {sil 82 92}]}
{80 [{sil 0 15} {oh 20 40} {zh 41 48} {dh 49 49} {axr 53 80} {sil 81 89}]}
{91 [{sil 0 17} {oh 20 42} {zh 43 47} {dh 48 52} {axr 53 114} {sil 115 127}]}
{105 [{sil 0 20} {oh 20 40} {zh 41 41} {zh 44 44} {z 47 50} {axr 51 116} {sil 117 124}]}
{125 [{sil 3 25} {oh 21 42} {zh 42 42} {zh 45 45} {d 47 51} {axr 52 85} {sil 86 129}]}

ruleAligned = [{{ah 2} []} {{oh 3} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{dh 2} [{2 3}]} {{axr 0} [{0 4} {1 4} {2 4} {3 5} {4 5}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {oh 19 40} {zh 42 47} {dh 49 49} {axr 53 81} {sil 82 82}]}
{80 [{sil 0 0} {oh 20 40} {zh 41 48} {dh 49 49} {axr 53 80} {sil 81 81}]}
{91 [{sil 0 0} {oh 20 42} {zh 43 43} {dh 48 52} {axr 53 114} {sil 115 115}]}
{105 [{sil 0 0} {oh 20 40} {zh 41 41} {zh 44 44} {z 47 47} {axr 51 116} {sil 117 117}]}
{125 [{sil 3 3} {oh 21 42} {zh 42 42} {zh 45 45} {d 47 51} {axr 52 85} {sil 86 86}]}

timeAligned = [{{oh 20 40} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{axr 53 85} [{0 4} {1 4} {2 4} {3 5} {4 5}]}]

i, iTime, newITime, timeStartFrom = 0 0 -1 0
i, iTime, newITime, timeStartFrom = 1 0 0 0
i, iTime, newITime, timeStartFrom = 2 0 -1 40
i, iTime, newITime, timeStartFrom = 3 0 1 40
combinedVerdict    = [{ah 2} {oh 3} {dh 2} {axr 0}]
ruleAlignedVerdict = [{ah 2} {oh 3} {dh 2} {axr 0}]

score->
-1 for ah
-1 for oh
-1 for dh
+1 for axr
score<-: -2
bestResult = {-2 [{ah 2} {oh 3} {dh 2} {axr 0}] [ah dh axr]}
testPronounce ah missing oh surprise dh missing axr good
publish->
phonsToAlphas = [{[ah] o} {[dh] th} {[axr] er}]
getVerdict<-:new {o [ah] 2}
getVerdict<-:new {th [dh] 2}
getVerdict<-:new {er [axr] 0}
lettersVerdicts = [{o [ah] 2} {oh [oh] 3} {th [dh] 2} {er [axr] 0}]
publish<-
{
  "results": [
    {
      "letters": "o",
      "phonemes": "ʌ",
      "verdict": "missing"
    },
    {
      "letters": "oh",
      "phonemes": "ɒ",
      "verdict": "surprise"
    },
    {
      "letters": "th",
      "phonemes": "ð",
      "verdict": "missing"
    },
    {
      "letters": "er",
      "phonemes": "əɹ",
      "verdict": "good"
    }
  ],
  "err": null
}
