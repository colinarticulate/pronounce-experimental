
 length of audio =  2.922312



len(frame)= 640
rate = 16000



len(frame)= 640
rate = 16000

 start2, duration2, end2 =  0.64 0.58 1.22

 start3, duration3, end3 =  0.66 0.5 1.1600000000000001

 Initial start, duration, end =  0.54 0.6799999999999999 1.22

 Cut at: start, duration =  0.54 1.13     guard_end =  1.67 

Running scan for frate = 125
Considering guard sh with value 1 for b ...
Considering guard zh with value 1 for b ...
Considering guard jh with value 1 for b ...
candidateGuards = map[jh:true sh:true zh:true]
Picking guard, zh

Considering guard ch with value 5 for uw ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard p with value 3.3999999999999995 for z ...
candidateGuards = map[p:true]
Picking guard, p


frate, target rule = 125 public <boos> = (((sil [((hh <any_Cx_b_hh_hh>) | (<any_Cx_b_hh_hh> hh))] [((hh <any_vowel_noSlide>) | (<any_vowel_noSlide> hh))]) | (sil hh (sil [((hh <any_Cx_b_hh_hh>) | (<any_Cx_b_hh_hh> hh))] [((hh <any_vowel_noSlide>) | (<any_vowel_noSlide> hh))]))) (([(<any_Cx_zh_hh_hh_b> zh)] | [(zh <any_Cx_zh_hh_hh_b>)]) (b | ((<any_Cx_zh_hh_hh_b> zh) | (zh <any_Cx_zh_hh_hh_b>)))) ((([(<any_Vx_ch_zh_uw_noSlide> ch)] | [(ch <any_Vx_ch_zh_uw_noSlide>)]) ([(<any_Cx_ch_zh_z_b> ch)] | [(ch <any_Cx_ch_zh_z_b>)])) (uw | ((<any_Vx_ch_zh_uw_noSlide> ch) | (ch <any_Vx_ch_zh_uw_noSlide>)))) (([(<any_Cx_p_ch_z> p)] | [(p <any_Cx_p_ch_z>)]) (z | ((<any_Cx_p_ch_z> p) | (p <any_Cx_p_ch_z>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_p_z_thr> thr)] | [(thr <any_Cx_p_z_thr>)]) sil))
Running scan for frate = 105
Considering guard jh with value 1 for b ...
Considering guard sh with value 1 for b ...
Considering guard zh with value 1 for b ...
candidateGuards = map[jh:true sh:true zh:true]
Picking guard, jh

Considering guard ch with value 5 for uw ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard p with value 3.3999999999999995 for z ...
candidateGuards = map[p:true]
Picking guard, p


frate, target rule = 105 public <boos> = (((sil [((d <any_Cx_b_d_hh>) | (<any_Cx_b_d_hh> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil hh (sil [((d <any_Cx_b_d_hh>) | (<any_Cx_b_d_hh> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_jh_hh_d_b> jh)] | [(jh <any_Cx_jh_hh_d_b>)]) (b | ((<any_Cx_jh_hh_d_b> jh) | (jh <any_Cx_jh_hh_d_b>)))) ((([(<any_Vx_ch_jh_uw_noSlide> ch)] | [(ch <any_Vx_ch_jh_uw_noSlide>)]) ([(<any_Cx_ch_jh_z_b> ch)] | [(ch <any_Cx_ch_jh_z_b>)])) (uw | ((<any_Vx_ch_jh_uw_noSlide> ch) | (ch <any_Vx_ch_jh_uw_noSlide>)))) (([(<any_Cx_p_ch_z> p)] | [(p <any_Cx_p_ch_z>)]) (z | ((<any_Cx_p_ch_z> p) | (p <any_Cx_p_ch_z>)))) (([(<any_vowel_noSlide> v)] | [(v <any_vowel_noSlide>)]) ([(<any_Cx_p_z_v> v)] | [(v <any_Cx_p_z_v>)]) sil))
Running scan for frate = 91
Considering guard sh with value 1 for b ...
Considering guard zh with value 1 for b ...
Considering guard jh with value 1 for b ...
candidateGuards = map[jh:true sh:true zh:true]
Picking guard, sh

Considering guard ch with value 5 for uw ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard p with value 3.3999999999999995 for z ...
candidateGuards = map[p:true]
Picking guard, p


frate, target rule = 91 public <boos> = (((sil [((d <any_Cx_b_d_hh>) | (<any_Cx_b_d_hh> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]) | (sil hh (sil [((d <any_Cx_b_d_hh>) | (<any_Cx_b_d_hh> d))] [((d <any_vowel_noSlide>) | (<any_vowel_noSlide> d))]))) (([(<any_Cx_sh_hh_d_b> sh)] | [(sh <any_Cx_sh_hh_d_b>)]) (b | ((<any_Cx_sh_hh_d_b> sh) | (sh <any_Cx_sh_hh_d_b>)))) ((([(<any_Vx_ch_sh_uw_noSlide> ch)] | [(ch <any_Vx_ch_sh_uw_noSlide>)]) ([(<any_Cx_ch_sh_z_b> ch)] | [(ch <any_Cx_ch_sh_z_b>)])) (uw | ((<any_Vx_ch_sh_uw_noSlide> ch) | (ch <any_Vx_ch_sh_uw_noSlide>)))) (([(<any_Cx_p_ch_z> p)] | [(p <any_Cx_p_ch_z>)]) (z | ((<any_Cx_p_ch_z> p) | (p <any_Cx_p_ch_z>)))) (([(<any_vowel_noSlide> thr)] | [(thr <any_vowel_noSlide>)]) ([(<any_Cx_p_z_thr> thr)] | [(thr <any_Cx_p_z_thr>)]) sil))
Running scan for frate = 80
Considering guard zh with value 1 for b ...
Considering guard sh with value 1 for b ...
Considering guard jh with value 1 for b ...
candidateGuards = map[jh:true sh:true zh:true]
Picking guard, zh

Considering guard ch with value 5 for uw ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard p with value 3.3999999999999995 for z ...
candidateGuards = map[p:true]
Picking guard, p


frate, target rule = 80 public <boos> = (((sil [((dh <any_Cx_b_dh_hh>) | (<any_Cx_b_dh_hh> dh))] [((dh <any_vowel_noSlide>) | (<any_vowel_noSlide> dh))]) | (sil hh (sil [((dh <any_Cx_b_dh_hh>) | (<any_Cx_b_dh_hh> dh))] [((dh <any_vowel_noSlide>) | (<any_vowel_noSlide> dh))]))) (([(<any_Cx_zh_hh_dh_b> zh)] | [(zh <any_Cx_zh_hh_dh_b>)]) (b | ((<any_Cx_zh_hh_dh_b> zh) | (zh <any_Cx_zh_hh_dh_b>)))) ((([(<any_Vx_ch_zh_uw_noSlide> ch)] | [(ch <any_Vx_ch_zh_uw_noSlide>)]) ([(<any_Cx_ch_zh_z_b> ch)] | [(ch <any_Cx_ch_zh_z_b>)])) (uw | ((<any_Vx_ch_zh_uw_noSlide> ch) | (ch <any_Vx_ch_zh_uw_noSlide>)))) (([(<any_Cx_p_ch_z> p)] | [(p <any_Cx_p_ch_z>)]) (z | ((<any_Cx_p_ch_z> p) | (p <any_Cx_p_ch_z>)))) (([(<any_vowel_noSlide> s)] | [(s <any_vowel_noSlide>)]) ([(<any_Cx_p_z_s> s)] | [(s <any_Cx_p_z_s>)]) sil))
Running scan for frate = 72
Considering guard jh with value 1 for b ...
Considering guard zh with value 1 for b ...
Considering guard sh with value 1 for b ...
candidateGuards = map[jh:true sh:true zh:true]
Picking guard, jh

Considering guard ch with value 5 for uw ...
candidateGuards = map[ch:true]
Picking guard, ch

Considering guard p with value 3.3999999999999995 for z ...
candidateGuards = map[p:true]
Picking guard, p


frate, target rule = 72 public <boos> = (((sil [((p <any_Cx_b_p_hh>) | (<any_Cx_b_p_hh> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]) | (sil hh (sil [((p <any_Cx_b_p_hh>) | (<any_Cx_b_p_hh> p))] [((p <any_vowel_noSlide>) | (<any_vowel_noSlide> p))]))) (([(<any_Cx_jh_hh_p_b> jh)] | [(jh <any_Cx_jh_hh_p_b>)]) (b | ((<any_Cx_jh_hh_p_b> jh) | (jh <any_Cx_jh_hh_p_b>)))) ((([(<any_Vx_ch_jh_uw_noSlide> ch)] | [(ch <any_Vx_ch_jh_uw_noSlide>)]) ([(<any_Cx_ch_jh_z_b> ch)] | [(ch <any_Cx_ch_jh_z_b>)])) (uw | ((<any_Vx_ch_jh_uw_noSlide> ch) | (ch <any_Vx_ch_jh_uw_noSlide>)))) (([(<any_Cx_p_ch_z> p)] | [(p <any_Cx_p_ch_z>)]) (z | ((<any_Cx_p_ch_z> p) | (p <any_Cx_p_ch_z>)))) (([(<any_vowel_noSlide> v)] | [(v <any_vowel_noSlide>)]) ([(<any_Cx_p_z_v> v)] | [(v <any_Cx_p_z_v>)]) sil))

results =
{72 [{sil 0 13} {b 14 18} {uw 19 32} {z 33 51} {sil 52 66}]}
{80 [{sil 0 15} {b 16 20} {uw 21 36} {z 37 57} {sil 58 71}]}
{91 [{sil 0 15} {b 16 22} {uw 23 41} {z 42 66} {sil 67 101}]}
{105 [{sil 0 19} {b 20 26} {uw 27 48} {z 49 76} {sil 77 117}]}
{125 [{sil 3 24} {b 25 32} {uw 33 58} {z 59 91} {sil 92 141}]}

normalised results =
{72 [{sil 0 13} {b 19 25} {uw 26 44} {z 46 71} {sil 72 92}]}
{80 [{sil 0 15} {b 20 25} {uw 26 45} {z 46 71} {sil 73 89}]}
{91 [{sil 0 15} {b 18 24} {uw 25 45} {z 46 73} {sil 74 111}]}
{105 [{sil 0 19} {b 19 25} {uw 26 46} {z 47 72} {sil 73 111}]}
{125 [{sil 3 24} {b 20 26} {uw 26 46} {z 47 73} {sil 74 113}]}

ruleAligned = [{{b 0} [{0 1} {1 1} {2 1} {3 1} {4 1}]} {{uw 0} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{z 0} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

results (after rule-alignment) =
{72 [{sil 0 0} {b 19 25} {uw 26 44} {z 46 71} {sil 72 72}]}
{80 [{sil 0 0} {b 20 25} {uw 26 45} {z 46 71} {sil 73 73}]}
{91 [{sil 0 0} {b 18 24} {uw 25 45} {z 46 73} {sil 74 74}]}
{105 [{sil 0 0} {b 19 25} {uw 26 46} {z 47 72} {sil 73 73}]}
{125 [{sil 3 3} {b 20 26} {uw 26 46} {z 47 73} {sil 74 74}]}

timeAligned = [{{b 19 25} [{0 1} {2 1} {3 1} {1 1} {4 1}]} {{uw 26 45} [{0 2} {1 2} {2 2} {3 2} {4 2}]} {{z 46 72} [{0 3} {1 3} {2 3} {3 3} {4 3}]}]

i, iTime, newITime, timeStartFrom = 0 0 0 0
i, iTime, newITime, timeStartFrom = 1 0 1 24
i, iTime, newITime, timeStartFrom = 2 1 2 44
combinedVerdict    = [{b 0} {uw 0} {z 0}]
ruleAlignedVerdict = [{b 0} {uw 0} {z 0}]

score->
+1 for b
+1 for uw
+1 for z
score<-: 8
testPronounce b good uw good z good
publish->
phonsToAlphas = [{[b] b} {[uw] oo} {[z] s}]
getVerdict<-:new {b [b] 0}
getVerdict<-:new {oo [uw] 0}
getVerdict<-:new {s [z] 0}
lettersVerdicts = [{b [b] 0} {oo [uw] 0} {s [z] 0}]
publish<-
{
  "results": [
    {
      "letters": "b",
      "phonemes": "b",
      "verdict": "good"
    },
    {
      "letters": "oo",
      "phonemes": "u",
      "verdict": "good"
    },
    {
      "letters": "s",
      "phonemes": "z",
      "verdict": "good"
    }
  ],
  "err": null
}
